seasons
season = "TA1"
# select feed and transpose the data
season_feeds <- livestock_selected %>%
dplyr::filter(season_name == season) %>%
gather(feed,value,-season_name,-livestock_category_code,-livestock_category_name,-feed_variables)%>%
spread(feed_variables,value)
# select form energy requirment sheet
season_selected_energy <- energy_required[["seasonal_results"]] %>%
as.data.frame() %>%
dplyr::filter(livestock_category_code == livestock, season_name == season)
# replace NAs, Inf etc
season_selected_energy <- season_selected_energy %>%
dplyr::mutate_if(is.numeric, list(~na_if(.,Inf))) %>%
replace(is.na(.), 0)
feed_items <- unique(season_feeds$feed)
land_requirements <- list()
feed_items_frac <- list()
feed_items
i="Maize (Zea mays) - cracked grains IP"
# select feed item
feed_item_selected <- unnest(para[["feed_items"]], cols = c(feed_type_name)) %>%
dplyr::filter(feed_item_name == i)
# selected feed from season feeds above
selected_feed <- season_feeds[season_feeds$feed == i,]
View(feed_item_selected)
para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
rm(list = ls())
para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
ghg_ipcc_data <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
energy_parameters <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
stock_change_para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
feed_basket_quality <- feed_quality(para)
energy_required <- energy_requirement(para,feed_basket_quality,energy_parameters)
livestock_category_code <- unique(feed_basket_quality$livestock_category_code)
livestock_requirements <- list()
livestock_category_code
livestock = "2"
livestock_selected <- feed_basket_quality %>%
dplyr::filter(livestock_category_code == livestock)
seasons <- unique(feed_basket_quality$season_name)
seasonal_requirements <- list()
seasons
season = "TA1"
# select feed and transpose the data
season_feeds <- livestock_selected %>%
dplyr::filter(season_name == season) %>%
gather(feed,value,-season_name,-livestock_category_code,-livestock_category_name,-feed_variables)%>%
spread(feed_variables,value)
# select form energy requirment sheet
season_selected_energy <- energy_required[["seasonal_results"]] %>%
as.data.frame() %>%
dplyr::filter(livestock_category_code == livestock, season_name == season)
# replace NAs, Inf etc
season_selected_energy <- season_selected_energy %>%
dplyr::mutate_if(is.numeric, list(~na_if(.,Inf))) %>%
replace(is.na(.), 0)
feed_items <- unique(season_feeds$feed)
land_requirements <- list()
feed_items_frac <- list()
feed_items
i = "Maize (Zea mays) - cracked grains IP"
# select feed item
feed_item_selected <- unnest(para[["feed_items"]], cols = c(feed_type_name)) %>%
dplyr::filter(feed_item_name == i)
# selected feed from season feeds above
selected_feed <- season_feeds[season_feeds$feed == i,]
feed_items_frac[[i]] <- feed_item_selected
land_requirements[[i]] <- selected_feed %>%
mutate(feed_item_dm = selected_feed$fraction_dry_matter*season_selected_energy$dmi_s,
crop_yield = as.numeric(feed_item_selected$dry_yield)*1000,
crop_removal = as.numeric(feed_item_selected$main_product_removal),
cr_yield = as.numeric(feed_item_selected$residue_dry_yield)*1000,
crop_residue_removal = ifelse(feed_item_selected$source_type == "Residue",
as.numeric(feed_item_selected$residue_removal), 0),
area_total = ifelse(feed_item_selected$source_type == "Main",
feed_item_dm/(crop_yield*crop_removal)-feed_item_selected$intercrop*(feed_item_selected$intercrop_fraction)*feed_item_dm/(crop_yield*crop_removal),
ifelse(feed_item_dm/(cr_yield*crop_residue_removal)-feed_item_selected$intercrop*(feed_item_selected$intercrop_fraction)*feed_item_dm/(cr_yield*crop_residue_removal), 0)),
area_non_feed = ifelse(crop_residue_removal > 0,
area_total*(crop_yield*crop_removal)/(crop_yield*crop_removal+cr_yield*crop_residue_removal), 0),
area_feed = ifelse(crop_residue_removal > 0,
area_total*(cr_yield*crop_residue_removal)/(crop_yield*crop_removal+cr_yield*crop_residue_removal),
area_total*(crop_yield*crop_removal+cr_yield*crop_residue_removal)/(crop_yield*crop_removal+cr_yield*crop_residue_removal)),
rough_of = ifelse(stringr::str_detect(selected_feed$feed, "OFR"), area_feed, 0),
conc_of = ifelse(stringr::str_detect(selected_feed$feed, "OFC"), area_feed, 0),
conc_ip = ifelse(stringr::str_detect(selected_feed$feed, "IP"), area_feed, 0),
farm = sum(area_feed, rough_of, conc_of, conc_ip),
grasses = ifelse(feed_item_selected$category == "grass", area_feed, 0),
tree_legume = ifelse(feed_item_selected$category == "tree crop" | feed_item_selected$category == "tree legume", area_feed, 0)) %>%
dplyr::mutate_if(is.numeric, list(~na_if(.,Inf))) %>%
replace(is.na(.), 0)
view(land_requirements[[1]])
library(cleaned)
para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
rm(list = ls())
para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
ghg_ipcc_data <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
energy_parameters <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
stock_change_para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
feed_basket_quality <- feed_quality(para)
energy_required <- energy_requirement(para,feed_basket_quality,energy_parameters)
land_required <- land_requirement(feed_basket_quality, energy_required, para)
soil_erosion <- soil_health(para, land_required)
water_required <- water_requirement(para, land_required)
nitrogen_balance <- n_balance(para, land_required, soil_erosion)
livestock_productivity <- land_productivity(para)
economics <- economics_payback(para, energy_required, livestock_productivity)
biomass <- biomass_calculation(para, land_required)
soil_carbon <- soil_organic_carbon(para, stock_change_para, land_required, biomass)
ghg_emissions <- ghg_emission(para,energy_required,ghg_ipcc_data,land_required,nitrogen_balance)
View(ghg_emissions)
View(land_required)
View(land_required[[1]])
View(land_required[[2]])
View(water_required)
View(water_required[[1]])
View(water_required[[2]])
View(soil_erosion)
no_days <- 365
soil_type <- para[["soil_description"]]
erosivity_r <- 0.55*(as.numeric(para[["annual_prec"]])/(as.numeric(para[["rain_length"]])/30))-4.7
as.numeric(para[["annual_prec"]])/
as.numeric(para[["annual_prec"]])
(as.numeric(para[["rain_length"]])
)
erosivity_r <- 0.55*(as.numeric(para[["annual_prec"]])/(as.numeric(para[["rain_length"]])))-4.7
soil_health <- function(para, land_required) {
no_days <- 365
soil_type <- para[["soil_description"]]
erosivity_r <- 0.55*(as.numeric(para[["annual_prec"]])/(as.numeric(para[["rain_length"]])))-4.7
erodibility_k <- as.numeric(para[["soil_k_value"]])
feed_production <- unnest(para[["feed_items"]], cols = c(feed_type_name))
feed_items <- unique(feed_production$feed_item_name)
soil_erosion_all_feed <- list()
for (i in feed_items){
feed_item <- i
feed_selected <- feed_production[feed_production$feed_item_name == i,]
#feed_item_selected <- as.data.frame(feed_selected[["feed_items"]])
slope_p_factor <- feed_selected$slope_p_factor
slope <- as.numeric(feed_selected$slope)
slope_length <- feed_selected$slope_length
# slope_steepness_length_conversion <- function(x, y){
#   z <- ifelse(x == "Flat (0-5%)" & y == "1", 0.3,
#               ifelse(x == "Hilly (5-20%)" & y == "1", 0.52,
#                      ifelse(x == "Steep (20-30%)" & y == "1", 0.59,
#                             ifelse(x == "Extremely steep (30%+)" & y == "1", 0.65,
#                                    ifelse(x == "Flat (0-5%)" & y == "3", 0.3,
#                                           ifelse(x == "Hilly (5-20%)" & y == "3", 0.85,
#                                                  ifelse(x == "Steep (20-30%)" & y == "3", 1.13,
#                                                         ifelse(x == "Extremely steep (30%+)" & y == "3", 1.36,
#                                                                ifelse(x == "Flat (0-5%)" & y == "5", 0.3,
#                                                                       ifelse(x == "Hilly (5-20%)" & y == "5", 1.06,
#                                                                              ifelse(x == "Steep (20-30%)" & y == "5", 1.53,
#                                                                                     ifelse(x == "Extremely steep (30%+)" & y == "5", 1.95,
#                                                                                            ifelse(x == "Flat (0-5%)" & y == "15", 0.49,
#                                                                                                   ifelse(x == "Hilly (5-20%)" & y == "15", 2.22,
#                                                                                                          ifelse(x == "Steep (20-30%)" & y == "15", 3.39,
#                                                                                                                 ifelse(x == "Extremely steep (30%+)" & y == "15", 4.45,
#                                                                                                                        ifelse(x == "Flat (0-5%)" & y == "30", 0.65,
#                                                                                                                               ifelse(x == "Hilly (5-20%)" & y == "30", 3.4,
#                                                                                                                                      ifelse(x == "Steep (20-30%)" & y == "30", 5.34,
#                                                                                                                                             ifelse(x == "Extremely steep (30%+)" & y == "30", 7.14,
#                                                                                                                                                    ifelse(x == "Flat (0-5%)" & y == "90", 1.01,
#                                                                                                                                                           ifelse(x == "Hilly (5-20%)" & y == "90", 6.68,
#                                                                                                                                                                  ifelse(x == "Steep (20-30%)" & y == "90", 11.01,
#                                                                                                                                                                         ifelse(x == "Extremely steep (30%+)" & y == "90", 15.14, NA))))))))))))))))))))))))
#   return(z)
# }
slope_steepness_length_conversion <- function(x, y){
z <- ifelse(x >= 0 & x <= 5 & y == "1", 0.3,
ifelse(x > 5 & x <= 20 & y == "1", 0.52,
ifelse(x > 20 & x <= 30 & y == "1", 0.59,
ifelse(x >30 & y == "1", 0.65,
ifelse(x >= 0 & x <= 5 & y == "3", 0.3,
ifelse(x > 5 & x <= 20 & y == "3", 0.85,
ifelse(x > 20 & x <= 30 & y == "3", 1.13,
ifelse(x >30 & y == "3", 1.36,
ifelse(x >= 0 & x <= 5 & y == "5", 0.3,
ifelse(x > 5 & x <= 20 & y == "5", 1.06,
ifelse(x > 20 & x <= 30 & y == "5", 1.53,
ifelse(x >30 & y == "5", 1.95,
ifelse(x >= 0 & x <= 5 & y == "15", 0.49,
ifelse(x > 5 & x <= 20 & y == "15", 2.22,
ifelse(x > 20 & x <= 30 & y == "15", 3.39,
ifelse(x >30 & y == "15", 4.45,
ifelse(x >= 0 & x <= 5 & y == "30", 0.65,
ifelse(x > 5 & x <= 20 & y == "30", 3.4,
ifelse(x > 20 & x <= 30 & y == "30", 5.34,
ifelse(x >30 & y == "30", 7.14,
ifelse(x >= 0 & x <= 5 & y == "90", 1.01,
ifelse(x > 5 & x <= 20 & y == "90", 6.68,
ifelse(x > 20 & x <= 30 & y == "90", 11.01,
ifelse(x >30 & y == "90", 15.14, 0))))))))))))))))))))))))
return(z)
}
ls <- slope_steepness_length_conversion(slope_p_factor, slope_length)
# calculate cover factor
c_factor <- feed_selected$landcover_c_factor
# landcover_c_factor_conversion <- function(x){
#
#   z <- ifelse(x == "Dense forest", 0.001,
#               ifelse(x == "Other forest", 0.05,
#                      ifelse(x == "Badlands hard", 0.05,
#                             ifelse(x == "Badlands soft", 0.4,
#                                    ifelse(x == "Sorghum", 0.1,
#                                           ifelse(x == "Maize", 0.1,
#                                                  ifelse(x == "Cereals", 0.15,
#                                                         ifelse(x == "Pulses", 0.15,
#                                                                ifelse(x == "Dense grass", 0.01,
#                                                                       ifelse(x == "Degraded grass", 0.05,
#                                                                              ifelse(x == "Fallow hard", 0.05,
#                                                                                     ifelse(x == "Fallow plouged", 0.6,
#                                                                                            ifelse(x == "Ethiopian teff", 0.25,
#                                                                                                   ifelse(x == "Continuous fallow", 1, NA))))))))))))))
#   return(z)
#
# }
#
# c_factor <- landcover_c_factor_conversion(landcover_c_factor)
# # calculate management factor
# management_factor_conversion <- function(x){
#
#   ifelse(x == "Flat (0-5%)", 0.11,
#          ifelse(x == "Hilly (5-20%)", 0.13,
#                 ifelse(x == "Steep (20-30%)", 0.22,
#                        ifelse(x == "Extremely steep (30%+)", 0.37, 1))))
#
# }
#
# p_factor <- management_factor_conversion(slope_p_factor)
p_factor <- slope_p_factor
# calculate Soil loss (t/ha/year)
soil_loss_ha_year <- erosivity_r*erodibility_k*ls*c_factor*p_factor
# select feed from land required dataframe
land_required_feed_selected <- land_required[["land_requirements_all"]] %>%
as.data.frame() %>%
dplyr::filter(feed == i)
# land requirement for feed production (ha)
land_required_feed_selected <- sum(land_required_feed_selected$area_feed)
# calculate Soil loss (t/plot/ season)
soil_loss_plot <- soil_loss_ha_year*land_required_feed_selected
# write data into a dataframe
soil_erosion_per_feed <- as.data.frame(cbind(feed_item, soil_type, erosivity_r, erodibility_k, ls, c_factor, p_factor, soil_loss_ha_year, soil_loss_plot))
soil_erosion_all_feed[[i]] <- soil_erosion_per_feed
}
soil_erosion_all_feed <- soil_erosion_all_feed %>% bind_rows()
}
soil_erosion <- soil_health(para, land_required)
View(soil_erosion)
no_days <- 365
soil_type <- para[["soil_description"]]
erosivity_r <- 0.55*(as.numeric(para[["annual_prec"]])/(as.numeric(para[["rain_length"]])))-4.7
erodibility_k <- as.numeric(para[["soil_k_value"]])
para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
soil_erosion <- soil_health(para, land_required)
View(soil_erosion)
erodibility_k <- as.numeric(para[["soil_k_value"]])
feed_production <- unnest(para[["feed_items"]], cols = c(feed_type_name))
feed_items <- unique(feed_production$feed_item_name)
soil_erosion_all_feed <- list()
for (i in feed_items){
feed_item <- i
feed_selected <- feed_production[feed_production$feed_item_name == i,]
#feed_item_selected <- as.data.frame(feed_selected[["feed_items"]])
slope_p_factor <- feed_selected$slope_p_factor
slope <- as.numeric(feed_selected$slope)
slope_length <- feed_selected$slope_length
# slope_steepness_length_conversion <- function(x, y){
#   z <- ifelse(x == "Flat (0-5%)" & y == "1", 0.3,
#               ifelse(x == "Hilly (5-20%)" & y == "1", 0.52,
#                      ifelse(x == "Steep (20-30%)" & y == "1", 0.59,
#                             ifelse(x == "Extremely steep (30%+)" & y == "1", 0.65,
#                                    ifelse(x == "Flat (0-5%)" & y == "3", 0.3,
#                                           ifelse(x == "Hilly (5-20%)" & y == "3", 0.85,
#                                                  ifelse(x == "Steep (20-30%)" & y == "3", 1.13,
#                                                         ifelse(x == "Extremely steep (30%+)" & y == "3", 1.36,
#                                                                ifelse(x == "Flat (0-5%)" & y == "5", 0.3,
#                                                                       ifelse(x == "Hilly (5-20%)" & y == "5", 1.06,
#                                                                              ifelse(x == "Steep (20-30%)" & y == "5", 1.53,
#                                                                                     ifelse(x == "Extremely steep (30%+)" & y == "5", 1.95,
#                                                                                            ifelse(x == "Flat (0-5%)" & y == "15", 0.49,
#                                                                                                   ifelse(x == "Hilly (5-20%)" & y == "15", 2.22,
#                                                                                                          ifelse(x == "Steep (20-30%)" & y == "15", 3.39,
#                                                                                                                 ifelse(x == "Extremely steep (30%+)" & y == "15", 4.45,
#                                                                                                                        ifelse(x == "Flat (0-5%)" & y == "30", 0.65,
#                                                                                                                               ifelse(x == "Hilly (5-20%)" & y == "30", 3.4,
#                                                                                                                                      ifelse(x == "Steep (20-30%)" & y == "30", 5.34,
#                                                                                                                                             ifelse(x == "Extremely steep (30%+)" & y == "30", 7.14,
#                                                                                                                                                    ifelse(x == "Flat (0-5%)" & y == "90", 1.01,
#                                                                                                                                                           ifelse(x == "Hilly (5-20%)" & y == "90", 6.68,
#                                                                                                                                                                  ifelse(x == "Steep (20-30%)" & y == "90", 11.01,
#                                                                                                                                                                         ifelse(x == "Extremely steep (30%+)" & y == "90", 15.14, NA))))))))))))))))))))))))
#   return(z)
# }
slope_steepness_length_conversion <- function(x, y){
z <- ifelse(x >= 0 & x <= 5 & y == "1", 0.3,
ifelse(x > 5 & x <= 20 & y == "1", 0.52,
ifelse(x > 20 & x <= 30 & y == "1", 0.59,
ifelse(x >30 & y == "1", 0.65,
ifelse(x >= 0 & x <= 5 & y == "3", 0.3,
ifelse(x > 5 & x <= 20 & y == "3", 0.85,
ifelse(x > 20 & x <= 30 & y == "3", 1.13,
ifelse(x >30 & y == "3", 1.36,
ifelse(x >= 0 & x <= 5 & y == "5", 0.3,
ifelse(x > 5 & x <= 20 & y == "5", 1.06,
ifelse(x > 20 & x <= 30 & y == "5", 1.53,
ifelse(x >30 & y == "5", 1.95,
ifelse(x >= 0 & x <= 5 & y == "15", 0.49,
ifelse(x > 5 & x <= 20 & y == "15", 2.22,
ifelse(x > 20 & x <= 30 & y == "15", 3.39,
ifelse(x >30 & y == "15", 4.45,
ifelse(x >= 0 & x <= 5 & y == "30", 0.65,
ifelse(x > 5 & x <= 20 & y == "30", 3.4,
ifelse(x > 20 & x <= 30 & y == "30", 5.34,
ifelse(x >30 & y == "30", 7.14,
ifelse(x >= 0 & x <= 5 & y == "90", 1.01,
ifelse(x > 5 & x <= 20 & y == "90", 6.68,
ifelse(x > 20 & x <= 30 & y == "90", 11.01,
ifelse(x >30 & y == "90", 15.14, 0))))))))))))))))))))))))
return(z)
}
ls <- slope_steepness_length_conversion(slope_p_factor, slope_length)
# calculate cover factor
c_factor <- feed_selected$landcover_c_factor
# landcover_c_factor_conversion <- function(x){
#
#   z <- ifelse(x == "Dense forest", 0.001,
#               ifelse(x == "Other forest", 0.05,
#                      ifelse(x == "Badlands hard", 0.05,
#                             ifelse(x == "Badlands soft", 0.4,
#                                    ifelse(x == "Sorghum", 0.1,
#                                           ifelse(x == "Maize", 0.1,
#                                                  ifelse(x == "Cereals", 0.15,
#                                                         ifelse(x == "Pulses", 0.15,
#                                                                ifelse(x == "Dense grass", 0.01,
#                                                                       ifelse(x == "Degraded grass", 0.05,
#                                                                              ifelse(x == "Fallow hard", 0.05,
#                                                                                     ifelse(x == "Fallow plouged", 0.6,
#                                                                                            ifelse(x == "Ethiopian teff", 0.25,
#                                                                                                   ifelse(x == "Continuous fallow", 1, NA))))))))))))))
#   return(z)
#
# }
#
# c_factor <- landcover_c_factor_conversion(landcover_c_factor)
# # calculate management factor
# management_factor_conversion <- function(x){
#
#   ifelse(x == "Flat (0-5%)", 0.11,
#          ifelse(x == "Hilly (5-20%)", 0.13,
#                 ifelse(x == "Steep (20-30%)", 0.22,
#                        ifelse(x == "Extremely steep (30%+)", 0.37, 1))))
#
# }
#
# p_factor <- management_factor_conversion(slope_p_factor)
p_factor <- slope_p_factor
# calculate Soil loss (t/ha/year)
soil_loss_ha_year <- erosivity_r*erodibility_k*ls*c_factor*p_factor
# select feed from land required dataframe
land_required_feed_selected <- land_required[["land_requirements_all"]] %>%
as.data.frame() %>%
dplyr::filter(feed == i)
# land requirement for feed production (ha)
land_required_feed_selected <- sum(land_required_feed_selected$area_feed)
# calculate Soil loss (t/plot/ season)
soil_loss_plot <- soil_loss_ha_year*land_required_feed_selected
# write data into a dataframe
soil_erosion_per_feed <- as.data.frame(cbind(feed_item, soil_type, erosivity_r, erodibility_k, ls, c_factor, p_factor, soil_loss_ha_year, soil_loss_plot))
soil_erosion_all_feed[[i]] <- soil_erosion_per_feed
}
soil_erosion_all_feed <- soil_erosion_all_feed %>% bind_rows()
View(soil_erosion_all_feed)
slope_steepness_length_conversion <- function(x, y){
z <- ifelse(x >= 0 & x <= 5 & y == "1", 0.3,
ifelse(x > 5 & x <= 20 & y == "1", 0.52,
ifelse(x > 20 & x <= 30 & y == "1", 0.59,
ifelse(x >30 & y == "1", 0.65,
ifelse(x >= 0 & x <= 5 & y == "3", 0.3,
ifelse(x > 5 & x <= 20 & y == "3", 0.85,
ifelse(x > 20 & x <= 30 & y == "3", 1.13,
ifelse(x >30 & y == "3", 1.36,
ifelse(x >= 0 & x <= 5 & y == "5", 0.3,
ifelse(x > 5 & x <= 20 & y == "5", 1.06,
ifelse(x > 20 & x <= 30 & y == "5", 1.53,
ifelse(x >30 & y == "5", 1.95,
ifelse(x >= 0 & x <= 5 & y == "15", 0.49,
ifelse(x > 5 & x <= 20 & y == "15", 2.22,
ifelse(x > 20 & x <= 30 & y == "15", 3.39,
ifelse(x >30 & y == "15", 4.45,
ifelse(x >= 0 & x <= 5 & y == "30", 0.65,
ifelse(x > 5 & x <= 20 & y == "30", 3.4,
ifelse(x > 20 & x <= 30 & y == "30", 5.34,
ifelse(x >30 & y == "30", 7.14,
ifelse(x >= 0 & x <= 5 & y == "90", 1.01,
ifelse(x > 5 & x <= 20 & y == "90", 6.68,
ifelse(x > 20 & x <= 30 & y == "90", 11.01,
ifelse(x >30 & y == "90", 15.14, 0))))))))))))))))))))))))
return(z)
}
slope_steepness_length_conversion(3, "5")
slope_steepness_length_conversion(6, "5")
slope_steepness_length_conversion(-4, "5")
#getting the crop parameters
feed_production <- unnest(para[["feed_items"]], cols = c(feed_type_name))
#getting the livestock parameters
livestock <- unnest(para[["livestock"]], cols = c())
#area evapotranspiration
et <- as.numeric(para[["et"]])
et
#annual precipitation
annual_precipitation <- as.numeric(para[["annual_prec"]])
water_use_per_feed_item <- land_required[["land_requirements_all"]] %>%
group_by(feed)%>%
summarise(area_feed = sum(area_feed, na.rm = T),
area_non_feed = sum(area_non_feed, na.rm = T),
area_total = sum(area_total, na.rm = T))
View(water_use_per_feed_item)
water_use_per_feed_item <- land_required[["land_requirements_all"]] %>%
group_by(feed)%>%
summarise(area_feed = sum(area_feed, na.rm = T),
area_non_feed = sum(area_non_feed, na.rm = T),
area_total = sum(area_total, na.rm = T))%>% #reformating land required
left_join(feed_production, by = c("feed"="feed_item_name"))%>%
mutate(fraction_of_land_required = area_feed/sum(area_feed,na.rm = T),
kc_average = (kc_initial+kc_midseason+kc_late)/3,
kc_frac = fraction_of_land_required*kc_average,
ET = kc_frac*et,
water_use = ET*sum(area_feed),
feed_water_use = ifelse(is.nan(water_use*(1-(area_non_feed/area_total))),0,
(water_use*(1-(area_non_feed/area_total)))),
non_feed_water_use = water_use-feed_water_use)%>%
select(feed,area_feed,kc_average,kc_frac,water_use,feed_water_use,non_feed_water_use)
5.82+3.82
5.28+3.47
water_use_per_feed_item <- land_required[["land_requirements_all"]] %>%
group_by(feed)%>%
summarise(area_feed = sum(area_feed, na.rm = T),
area_non_feed = sum(area_non_feed, na.rm = T),
area_total = sum(area_total, na.rm = T))%>% #reformating land required
left_join(feed_production, by = c("feed"="feed_item_name"))%>%
mutate(fraction_of_land_required = area_feed/sum(area_feed,na.rm = T),
kc_average = (kc_initial+kc_midseason+kc_late)/3,
kc_frac = fraction_of_land_required*kc_average,
ET = kc_frac*et,
water_use = ET*sum(area_feed),
feed_water_use = ifelse(is.nan(water_use*(1-(area_non_feed/area_total))),0,
(water_use*(1-(area_non_feed/area_total)))),
non_feed_water_use = water_use-feed_water_use)
view(land_required[["land_requirements_all"]])
livestock_category_code <- unique(feed_basket_quality$livestock_category_code)
livestock_requirements <- list()
livestock_category_code
livestock = "2"
livestock_selected <- feed_basket_quality %>%
dplyr::filter(livestock_category_code == livestock)
seasons <- unique(feed_basket_quality$season_name)
seasonal_requirements <- list()
seasons
season = "TA1"
season_feeds <- livestock_selected %>%
dplyr::filter(season_name == season) %>%
gather(feed,value,-season_name,-livestock_category_code,-livestock_category_name,-feed_variables)%>%
spread(feed_variables,value)
# select form energy requirment sheet
season_selected_energy <- energy_required[["seasonal_results"]] %>%
as.data.frame() %>%
dplyr::filter(livestock_category_code == livestock, season_name == season)
# replace NAs, Inf etc
season_selected_energy <- season_selected_energy %>%
dplyr::mutate_if(is.numeric, list(~na_if(.,Inf))) %>%
replace(is.na(.), 0)
feed_items <- unique(season_feeds$feed)
land_requirements <- list()
feed_items_frac <- list()
feed_items
i = "Wheat (bran) OFC"
# select feed item
feed_item_selected <- unnest(para[["feed_items"]], cols = c(feed_type_name)) %>%
dplyr::filter(feed_item_name == i)
# selected feed from season feeds above
selected_feed <- season_feeds[season_feeds$feed == i,]
View(selected_feed)
feed_item_selected$residue_removal
land_requirements[[i]] <- selected_feed %>%
mutate(feed_item_dm = selected_feed$fraction_dry_matter*season_selected_energy$dmi_s,
crop_yield = as.numeric(feed_item_selected$dry_yield)*1000,
crop_removal = as.numeric(feed_item_selected$main_product_removal),
cr_yield = as.numeric(feed_item_selected$residue_dry_yield)*1000,
crop_residue_removal = ifelse(feed_item_selected$source_type == "Residue",
as.numeric(feed_item_selected$residue_removal), 0),
area_total = ifelse(feed_item_selected$source_type == "Main",
feed_item_dm/(crop_yield*crop_removal)-feed_item_selected$intercrop*(feed_item_selected$intercrop_fraction)*feed_item_dm/(crop_yield*crop_removal),
ifelse(feed_item_dm/(cr_yield*crop_residue_removal)-feed_item_selected$intercrop*(feed_item_selected$intercrop_fraction)*feed_item_dm/(cr_yield*crop_residue_removal), 0)),
area_non_feed = ifelse(crop_residue_removal > 0,
area_total*(crop_yield*crop_removal)/(crop_yield*crop_removal+cr_yield*crop_residue_removal), 0),
area_feed = ifelse(crop_residue_removal > 0,
area_total*(cr_yield*crop_residue_removal)/(crop_yield*crop_removal+cr_yield*crop_residue_removal),
area_total*(crop_yield*crop_removal+cr_yield*crop_residue_removal)/(crop_yield*crop_removal+cr_yield*crop_residue_removal)),
rough_of = ifelse(stringr::str_detect(selected_feed$feed, "OFR"), area_feed, 0),
conc_of = ifelse(stringr::str_detect(selected_feed$feed, "OFC"), area_feed, 0),
conc_ip = ifelse(stringr::str_detect(selected_feed$feed, "IP"), area_feed, 0),
farm = sum(area_feed, rough_of, conc_of, conc_ip),
grasses = ifelse(feed_item_selected$category == "grass", area_feed, 0),
tree_legume = ifelse(feed_item_selected$category == "tree crop" | feed_item_selected$category == "tree legume", area_feed, 0)) %>%
dplyr::mutate_if(is.numeric, list(~na_if(.,Inf))) %>%
replace(is.na(.), 0)
view(land_requirements[[1]])
land_requirements[[1]]$crop_residue_removal
feed_item_selected$main_product_removal
feed_item_selected$residue_removal
feed_item_selected$source_type
