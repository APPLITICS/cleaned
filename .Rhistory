ghgtot_t_co2eq_yr <- (sum(ghg_emission$kg_per_ha,na.rm = T)/1000)*land_requirement_ha
View(livestock_productivity)
names(livestock_productivity)
library(cleaned)
library(cleaned)
library(cleaned)
library(jsonlite)
library(tidyverse)
para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
ghg_ipcc_data <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
energy_parameters <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
feed_basket_quality <- feed_quality(para)
energy_required <- energy_requirement(para,feed_basket_quality,energy_parameters)
land_required <- land_requirement(feed_basket_quality, energy_required, para)
soil_erosion <- soil_health(para, land_required)
water_required <- water_requirement(para, land_required)
nitrogen_balance <- n_balance(para, land_required, soil_erosion)
livestock_productivity <- land_productivity(para)
economics <- economics_payback(para, energy_required, livestock_productivity)
biomass <- biomass_calculation(para, land_required)
soil_carbon <- soil_organic_carbon(para, stock_change_para, land_required, biomass)
ghg_emissions <- ghg_emission(para,energy_required,ghg_ipcc_data,land_required,nitrogen_balance)
combineOutputs(feed_basket_quality,energy_required,land_required,soil_erosion,water_required,
nitrogen_balance,livestock_productivity,economics,biomass,soil_carbon,ghg_emissions)
output1 <-  combineOutputs(feed_basket_quality,energy_required,land_required,soil_erosion,water_required,
nitrogen_balance,livestock_productivity,economics,biomass,soil_carbon,ghg_emissions)
cleanedOut <- combineOutputs(feed_basket_quality, energy_required, land_required, soil_erosion, water_required, nitrogen_balance,livestock_productivity,economics,biomass,soil_carbon,ghg_emissions)
args = commandArgs(trailingOnly=TRUE)
# write output
write(cleanedOut, args[5])
# write output
write(cleanedOut, "C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/outputs/output1")
# write output
write(cleanedOut, "C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/outputs/output2")
diff <- calculate_differences("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/outputs")
iDir <- "C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/outputs"
outputList <- list.files(paste0(iDir), pattern = "output_", full.names = TRUE)
# write output
write(cleanedOut, "C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/outputs/output_output2")
# write output
write(cleanedOut, "C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/outputs/output_output1")
outputList <- list.files(paste0(iDir), pattern = "output_", full.names = TRUE)
diff <- calculate_differences("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/outputs")
setwd("~/ILRI work/Projects/CLEANED-XtRa/outputs")
clean_plotting(diff)
# write output
write(cleanedOut, "C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/outputs/output_output1.json")
# write output
write(cleanedOut, "C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/outputs/output_output2.json")
diff <- calculate_differences("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/outputs")
clean_plotting(diff)
library(cleaned)
library(jsonlite)
library(tidyverse)
para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
ghg_ipcc_data <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
energy_parameters <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
feed_basket_quality <- feed_quality(para)
energy_required <- energy_requirement(para,feed_basket_quality,energy_parameters)
livestock_category_code <- unique(feed_basket_quality$livestock_category_code)
livestock_requirements <- list()
livestock_category_code
View(feed_basket_quality)
land_required <- land_requirement(feed_basket_quality, energy_required, para)
View(land_required)
View(land_required[[1]])
season_selected_energy <- energy_required[["seasonal_results"]]
View(season_selected_energy)
feed_item_selected <- unnest(para[["feed_items"]]
view(para[["feed_items"]])
feed_item_selected <- (para[["feed_items"]])
season_feeds
x=10
r=0.8
k=2
for (i in 0:20) {
X <- X+r*X*(1-X/K)
}
#Fetch the parameters
X <- Xo
rm(list = ls())
para <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/gui_test/steve_test_2.json",
flatten = TRUE, simplifyDataFrame = TRUE)
ghg_ipcc_data <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/cleaned_tool/cleaned/inst/extdata/ghg_parameters.json",
flatten = TRUE, simplifyDataFrame = TRUE)
energy_parameters <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/cleaned_tool/cleaned/inst/extdata/energy_parameters.json",
flatten = TRUE, simplifyDataFrame = TRUE)
stock_change_parameters <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/cleaned_tool/cleaned/inst/extdata/stock_change_parameters.json",
flatten = TRUE, simplifyDataFrame = TRUE)
feed_basket_quality <- feed_quality(para)
energy_required <- energy_requirement(para,feed_basket_quality,energy_parameters)
land_required <- land_requirement(feed_basket_quality, energy_required, para)
soil_erosion <- soil_health(para, land_required)
water_required <- water_requirement(para, land_required)
nitrogen_balance <- n_balance(para, land_required, soil_erosion)
livestock_productivity <- land_productivity(para)
economics <- economics_payback(para, energy_required, livestock_productivity)
biomass <- biomass_calculation(para, land_required)
soil_carbon <- soil_organic_carbon(para, stock_change_para, land_required, biomass)
ghg_emissions <- ghg_emission(para,energy_required,ghg_ipcc_data,land_required,nitrogen_balance)
cleaned_output <- combineOutputs(feed_basket_quality,energy_required,land_required,soil_erosion,water_required,
nitrogen_balance,livestock_productivity,economics,biomass,soil_carbon,ghg_emissions)
View(stock_change_parameters)
# Cleaned sensitivity analysis
library(pse)
library(cleaned)
library(jsonlite)
library(tidyverse)
# Parameters of interest
factors <- c("herdsize", "angrowth", "anmilk")
# Parameter distribution
q <- c("qnorm", "qnorm", "qunif")
# Mean and standard deviation
q.arg <- list( list(min=1, max=200), list(mean=200, sd=50), list(mean=700, sd=250) )
# Parameter distribution
q <- c("qunif", "qnorm", "qnorm")
para <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/gui_test/steve_test_2.json",
flatten = TRUE, simplifyDataFrame = TRUE)
ghg_ipcc_data <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/cleaned_tool/cleaned/inst/extdata/ghg_parameters.json",
flatten = TRUE, simplifyDataFrame = TRUE)
energy_parameters <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/cleaned_tool/cleaned/inst/extdata/energy_parameters.json",
flatten = TRUE, simplifyDataFrame = TRUE)
stock_change_parameters <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/cleaned_tool/cleaned/inst/extdata/stock_change_parameters.json",
flatten = TRUE, simplifyDataFrame = TRUE)
feed_basket_quality <- feed_quality(para)
energy_required <- energy_requirement(para,feed_basket_quality,energy_parameters)
land_required <- land_requirement(feed_basket_quality, energy_required, para)
soil_erosion <- soil_health(para, land_required)
water_required <- water_requirement(para, land_required)
nitrogen_balance <- n_balance(para, land_required, soil_erosion)
livestock_productivity <- land_productivity(para)
economics <- economics_payback(para, energy_required, livestock_productivity)
biomass <- biomass_calculation(para, land_required)
soil_carbon <- soil_organic_carbon(para, stock_change_para, land_required, biomass)
ghg_emissions <- ghg_emission(para,energy_required,ghg_ipcc_data,land_required,nitrogen_balance)
co2_conversion_factor <- 44/12
soil_amount <- 1000000*(para[["soil_depth"]]/100)*para[["soil_bulk"]]
field_soc <- soil_amount*para[["soil_c"]]*0.001
land_required <- land_required[["land_requirements_all"]] %>%
as.data.frame()
cropland_change_carbon_stocks_mineral_soils <- data.frame("initial_landuse" = "cropland") %>%
mutate(reporting_landuse = "cropland",
area_last_year_inventory_period = sum(land_required$area_feed)-(sum(land_required$grasses)+sum(land_required$tree_legume)),
carbon_stock_last_year_inventory_period = ifelse(field_soc>0, field_soc, 30),
time_dependence_stock_change = 20,
stock_change_factor_land_use = unnest(stock_change_para[["cropland"]], cols = c(landuse)) %>%
unnest(cols = c(factor_variables)) %>%
select(paste0(para[["cropland_system"]])) %>%
as.numeric(),
stock_change_factor_management = unnest(stock_change_para[["cropland"]], cols = c(tillage)) %>%
unnest(cols = c(factor_variables)) %>%
select(paste0(para[["cropland_tillage"]])) %>%
as.numeric(),
stock_change_factor_input = unnest(stock_change_para[["cropland"]], cols = c(input)) %>%
unnest(cols = c(factor_variables)) %>%
select(paste0(para[["cropland_orgmatter"]])) %>%
as.numeric(),
annual_change_carbon_stocks_mineral_soils = ((carbon_stock_last_year_inventory_period*stock_change_factor_land_use*stock_change_factor_management*stock_change_factor_input)-carbon_stock_last_year_inventory_period)/time_dependence_stock_change*area_last_year_inventory_period)
View(land_required)
cropland_change_carbon_stocks_mineral_soils <- land_required("initial_landuse" = "cropland") %>%
mutate(reporting_landuse = "cropland",
area_last_year_inventory_period = sum(land_required$area_feed)-(sum(land_required$grasses)+sum(land_required$tree_legume)),
carbon_stock_last_year_inventory_period = ifelse(field_soc>0, field_soc, 30),
time_dependence_stock_change = 20,
stock_change_factor_land_use = unnest(stock_change_para[["cropland"]], cols = c(landuse)) %>%
unnest(cols = c(factor_variables)) %>%
select(paste0(para[["cropland_system"]])) %>%
as.numeric(),
stock_change_factor_management = unnest(stock_change_para[["cropland"]], cols = c(tillage)) %>%
unnest(cols = c(factor_variables)) %>%
select(paste0(para[["cropland_tillage"]])) %>%
as.numeric(),
stock_change_factor_input = unnest(stock_change_para[["cropland"]], cols = c(input)) %>%
unnest(cols = c(factor_variables)) %>%
select(paste0(para[["cropland_orgmatter"]])) %>%
as.numeric(),
annual_change_carbon_stocks_mineral_soils = ((carbon_stock_last_year_inventory_period*stock_change_factor_land_use*stock_change_factor_management*stock_change_factor_input)-carbon_stock_last_year_inventory_period)/time_dependence_stock_change*area_last_year_inventory_period)
grassland_change_carbon_stocks_mineral_soils <- data.frame("initial_landuse" = "grassland")
grassland_change_carbon_stocks_mineral_soils <- data.frame("initial_landuse" = "grassland") %>%
mutate(reporting_landuse = "grassland",
area_last_year_inventory_period = sum(land_required$grasses)+sum(land_required$tree_legume),
carbon_stock_last_year_inventory_period = 40, #hardcoded in the excel sheet 40
time_dependence_stock_change = 20
)
View(grassland_change_carbon_stocks_mineral_soils)
grassland_change_carbon_stocks_mineral_soils <- data.frame("initial_landuse" = "grassland") %>%
mutate(reporting_landuse = "grassland",
area_last_year_inventory_period = sum(land_required$grasses)+sum(land_required$tree_legume),
carbon_stock_last_year_inventory_period = 40, #hardcoded in the excel sheet 40
time_dependence_stock_change = 20,
stock_change_factor_land_use = unnest(stock_change_para[["grassland"]], cols = c(landuse)) %>%
unnest(cols = c(factor_variables)) %>%
select(everything("All")) %>%
as.numeric()
)
grassland_change_carbon_stocks_mineral_soils <- data.frame("initial_landuse" = "grassland") %>%
mutate(reporting_landuse = "grassland",
area_last_year_inventory_period = sum(land_required$grasses)+sum(land_required$tree_legume),
carbon_stock_last_year_inventory_period = 40, #hardcoded in the excel sheet 40
time_dependence_stock_change = 20,
stock_change_factor_land_use = unnest(stock_change_para[["grassland"]], cols = c(landuse)) %>%
unnest(cols = c(factor_variables)) %>%
select(everything("All")) %>%
as.numeric(),
stock_change_factor_management = unnest(stock_change_para[["grassland"]], cols = c(management)) %>%
unnest(cols = c(factor_variables)) %>%
select(paste0(para[["grassland_management"]])) %>%
as.numeric()
)
grassland_change_carbon_stocks_mineral_soils <- data.frame("initial_landuse" = "grassland") %>%
mutate(reporting_landuse = "grassland",
area_last_year_inventory_period = sum(land_required$grasses)+sum(land_required$tree_legume),
carbon_stock_last_year_inventory_period = 40, #hardcoded in the excel sheet 40
time_dependence_stock_change = 20,
stock_change_factor_land_use = unnest(stock_change_para[["grassland"]], cols = c(landuse)) %>%
unnest(cols = c(factor_variables)) %>%
select(everything("All")) %>%
as.numeric(),
stock_change_factor_management = unnest(stock_change_para[["grassland"]], cols = c(management)) %>%
unnest(cols = c(factor_variables)) %>%
select(paste0(para[["grassland_management"]])) %>%
as.numeric(),
stock_change_factor_input = unnest(stock_change_para[["grassland"]], cols = c(input)) %>%
unnest(cols = c(factor_variables)) %>%
select(paste0(para[["grassland_implevel"]])) %>%
as.numeric()
)
grassland_change_carbon_stocks_mineral_soils <- data.frame("initial_landuse" = "grassland") %>%
mutate(reporting_landuse = "grassland",
area_last_year_inventory_period = sum(land_required$grasses)+sum(land_required$tree_legume),
carbon_stock_last_year_inventory_period = 40, #hardcoded in the excel sheet 40
time_dependence_stock_change = 20,
stock_change_factor_land_use = unnest(stock_change_para[["grassland"]], cols = c(landuse)) %>%
unnest(cols = c(factor_variables)) %>%
select(everything("All")) %>%
as.numeric(),
stock_change_factor_management = unnest(stock_change_para[["grassland"]], cols = c(management)) %>%
unnest(cols = c(factor_variables)) %>%
select(paste0(para[["grassland_management"]])) %>%
as.numeric(),
stock_change_factor_input = unnest(stock_change_para[["grassland"]], cols = c(input)) %>%
unnest(cols = c(factor_variables)) %>%
select(paste0(para[["grassland_implevel"]])) %>%
as.numeric(),
annual_change_carbon_stocks_mineral_soils = ((carbon_stock_last_year_inventory_period*stock_change_factor_land_use*stock_change_factor_management*stock_change_factor_input)-carbon_stock_last_year_inventory_period)/time_dependence_stock_change*area_last_year_inventory_period)
cropland_change_carbon_stocks_mineral_soils <- data.frame("initial_landuse" = "cropland") %>%
mutate(reporting_landuse = "cropland",
area_last_year_inventory_period = sum(land_required$area_feed)-(sum(land_required$grasses)+sum(land_required$tree_legume)),
carbon_stock_last_year_inventory_period = ifelse(field_soc>0, field_soc, 30),
time_dependence_stock_change = 20,
stock_change_factor_land_use = unnest(stock_change_para[["cropland"]], cols = c(landuse)) %>%
unnest(cols = c(factor_variables)) %>%
select(paste0(para[["cropland_system"]])) %>%
as.numeric(),
stock_change_factor_management = unnest(stock_change_para[["cropland"]], cols = c(tillage)) %>%
unnest(cols = c(factor_variables)) %>%
select(paste0(para[["cropland_tillage"]])) %>%
as.numeric(),
stock_change_factor_input = unnest(stock_change_para[["cropland"]], cols = c(input)) %>%
unnest(cols = c(factor_variables)) %>%
select(paste0(para[["cropland_orgmatter"]])) %>%
as.numeric(),
annual_change_carbon_stocks_mineral_soils = ((carbon_stock_last_year_inventory_period*stock_change_factor_land_use*stock_change_factor_management*stock_change_factor_input)-carbon_stock_last_year_inventory_period)/time_dependence_stock_change*area_last_year_inventory_period)
cropland_change_carbon_stocks_mineral_soils <- data.frame("initial_landuse" = "cropland") %>%
mutate(reporting_landuse = "cropland",
area_last_year_inventory_period = sum(land_required$area_feed)-(sum(land_required$grasses)+sum(land_required$tree_legume)),
carbon_stock_last_year_inventory_period = ifelse(field_soc>0, field_soc, 30),
time_dependence_stock_change = 20,
stock_change_factor_land_use = unnest(stock_change_para[["cropland"]], cols = c(landuse)) %>%
unnest(cols = c(factor_variables)) %>%
select(paste0(para[["cropland_system"]])) %>%
as.numeric()
)
para[["cropland_system"]]
cropland_change_carbon_stocks_mineral_soils <- data.frame("initial_landuse" = "cropland") %>%
mutate(reporting_landuse = "cropland",
area_last_year_inventory_period = sum(land_required$area_feed)-(sum(land_required$grasses)+sum(land_required$tree_legume)),
carbon_stock_last_year_inventory_period = ifelse(field_soc>0, field_soc, 30),
time_dependence_stock_change = 20
)
unnest(stock_change_para[["cropland"]], cols = c(landuse)) %>%
unnest(cols = c(factor_variables)) %>%
select(paste0(para[["cropland_system"]])) %>%
as.numeric()
unnest(stock_change_para[["cropland"]], cols = c(landuse))
unnest(stock_change_para[["cropland"]], cols = c(landuse)) %>%
unnest(cols = c(factor_variables))
unnest(stock_change_para[["cropland"]], cols = c(landuse)) %>%
unnest(cols = c(factor_variables))
view(as.data.frame(unnest(stock_change_para[["cropland"]], cols = c(landuse)) %>%
unnest(cols = c(factor_variables))))
View((structure(list(`Long term cultivated, temperate/boreal, dry` = 0.8,      `Long term cultivated, temperate/boreal, moist` = 0.69, `Long term cultivated, tropical, dry` = 0.58,      `Long term cultivated, tropical, moist/wet` = 0.48, `Long term cultivated, tropical montane, all` = 0.64,      `Paddy rice` = 1.1, `Perennial/tree crop` = 1L, `Set aside (< 20 years), temperate/boreal and tropical, dry` = 0.93,      `Set aside (< 20 years), temperate/boreal and tropical, moist/wet` = 0.82,      `Set aside (< 20 years),tropical montane, all` = 0.88, tillage = list(         structure(list(factor_variables = list(structure(list(             Full = 1L, `Reduced, temperate/boreal, dry` = 1.02,              `Reduced, temperate/boreal, moist` = 1.08, `Reduced, tropical, dry` = 1.09,              `Reduced, tropical, moist` = 1.15, `Reduced, tropical montane, all` = 1.09,              `No-till, temperate/boreal, dry` = 1.1, `No-till, temperate/boreal, moist` = 1.15,              `No-till, tropical, dry` = 1.17, `No-till, tropical, moist/wet` = 1.22,              `No-till, tropical montane, all` = 1.16), class = "data.frame", row.names = 1L))), class = "data.frame", row.names = 1L)),      input = list(structure(list(factor_variables = list(structure(list(         `Low, temperate/boreal, dry` = 0.95, `Low, temperate/boreal, moist` = 0.92,          `Low, tropical, dry` = 0.95, `Low, tropical, moist` = 0.92,          `Low, tropical montane, all` = 0.94, `Medium, all` = 1L,          `High w/OUT manure, temperate/boral and tropical, dry` = 1.04,          `High w/OUT manure, temperate/boral and tropical, moist/wet` = 1.11,          `High w/OUT manure, tropical montane` = 1.08, `High with manure, temperate/boral and tropical, dry` = 1.37,          `High with manure, temperate/boral and tropical, moist/wet` = 1.44,          `High with manure, tropical montane` = 1.41), class = "data.frame", row.names = 1L))), class = "data.frame", row.names = 1L))), row.names = c(NA,  -1L), class = "data.frame"))[[12]][[1]])
View(((structure(list(`Long term cultivated, temperate/boreal, dry` = 0.8,      `Long term cultivated, temperate/boreal, moist` = 0.69, `Long term cultivated, tropical, dry` = 0.58,      `Long term cultivated, tropical, moist/wet` = 0.48, `Long term cultivated, tropical montane, all` = 0.64,      `Paddy rice` = 1.1, `Perennial/tree crop` = 1L, `Set aside (< 20 years), temperate/boreal and tropical, dry` = 0.93,      `Set aside (< 20 years), temperate/boreal and tropical, moist/wet` = 0.82,      `Set aside (< 20 years),tropical montane, all` = 0.88, tillage = list(structure(list(factor_variables = list(structure(list(Full = 1L,          `Reduced, temperate/boreal, dry` = 1.02, `Reduced, temperate/boreal, moist` = 1.08,          `Reduced, tropical, dry` = 1.09, `Reduced, tropical, moist` = 1.15,          `Reduced, tropical montane, all` = 1.09, `No-till, temperate/boreal, dry` = 1.1,          `No-till, temperate/boreal, moist` = 1.15, `No-till, tropical, dry` = 1.17,          `No-till, tropical, moist/wet` = 1.22, `No-till, tropical montane, all` = 1.16),          class = "data.frame", row.names = 1L))), class = "data.frame",          row.names = 1L)), input = list(structure(list(factor_variables = list(structure(list(`Low, temperate/boreal, dry` = 0.95,          `Low, temperate/boreal, moist` = 0.92, `Low, tropical, dry` = 0.95,          `Low, tropical, moist` = 0.92, `Low, tropical montane, all` = 0.94,          `Medium, all` = 1L, `High w/OUT manure, temperate/boral and tropical, dry` = 1.04,          `High w/OUT manure, temperate/boral and tropical, moist/wet` = 1.11,          `High w/OUT manure, tropical montane` = 1.08, `High with manure, temperate/boral and tropical, dry` = 1.37,          `High with manure, temperate/boral and tropical, moist/wet` = 1.44,          `High with manure, tropical montane` = 1.41), class = "data.frame",          row.names = 1L))), class = "data.frame", row.names = 1L))),      row.names = c(NA, -1L), class = "data.frame"))[[12]][[1]])[[1]][[1]])
View((structure(list(`Long term cultivated, temperate/boreal, dry` = 0.8,      `Long term cultivated, temperate/boreal, moist` = 0.69, `Long term cultivated, tropical, dry` = 0.58,      `Long term cultivated, tropical, moist/wet` = 0.48, `Long term cultivated, tropical montane, all` = 0.64,      `Paddy rice` = 1.1, `Perennial/tree crop` = 1L, `Set aside (< 20 years), temperate/boreal and tropical, dry` = 0.93,      `Set aside (< 20 years), temperate/boreal and tropical, moist/wet` = 0.82,      `Set aside (< 20 years),tropical montane, all` = 0.88, tillage = list(         structure(list(factor_variables = list(structure(list(             Full = 1L, `Reduced, temperate/boreal, dry` = 1.02,              `Reduced, temperate/boreal, moist` = 1.08, `Reduced, tropical, dry` = 1.09,              `Reduced, tropical, moist` = 1.15, `Reduced, tropical montane, all` = 1.09,              `No-till, temperate/boreal, dry` = 1.1, `No-till, temperate/boreal, moist` = 1.15,              `No-till, tropical, dry` = 1.17, `No-till, tropical, moist/wet` = 1.22,              `No-till, tropical montane, all` = 1.16), class = "data.frame", row.names = 1L))), class = "data.frame", row.names = 1L)),      input = list(structure(list(factor_variables = list(structure(list(         `Low, temperate/boreal, dry` = 0.95, `Low, temperate/boreal, moist` = 0.92,          `Low, tropical, dry` = 0.95, `Low, tropical, moist` = 0.92,          `Low, tropical montane, all` = 0.94, `Medium, all` = 1L,          `High w/OUT manure, temperate/boral and tropical, dry` = 1.04,          `High w/OUT manure, temperate/boral and tropical, moist/wet` = 1.11,          `High w/OUT manure, tropical montane` = 1.08, `High with manure, temperate/boral and tropical, dry` = 1.37,          `High with manure, temperate/boral and tropical, moist/wet` = 1.44,          `High with manure, tropical montane` = 1.41), class = "data.frame", row.names = 1L))), class = "data.frame", row.names = 1L))), row.names = c(NA,  -1L), class = "data.frame"))[[11]][[1]])
View(((structure(list(`Long term cultivated, temperate/boreal, dry` = 0.8,      `Long term cultivated, temperate/boreal, moist` = 0.69, `Long term cultivated, tropical, dry` = 0.58,      `Long term cultivated, tropical, moist/wet` = 0.48, `Long term cultivated, tropical montane, all` = 0.64,      `Paddy rice` = 1.1, `Perennial/tree crop` = 1L, `Set aside (< 20 years), temperate/boreal and tropical, dry` = 0.93,      `Set aside (< 20 years), temperate/boreal and tropical, moist/wet` = 0.82,      `Set aside (< 20 years),tropical montane, all` = 0.88, tillage = list(structure(list(factor_variables = list(structure(list(Full = 1L,          `Reduced, temperate/boreal, dry` = 1.02, `Reduced, temperate/boreal, moist` = 1.08,          `Reduced, tropical, dry` = 1.09, `Reduced, tropical, moist` = 1.15,          `Reduced, tropical montane, all` = 1.09, `No-till, temperate/boreal, dry` = 1.1,          `No-till, temperate/boreal, moist` = 1.15, `No-till, tropical, dry` = 1.17,          `No-till, tropical, moist/wet` = 1.22, `No-till, tropical montane, all` = 1.16),          class = "data.frame", row.names = 1L))), class = "data.frame",          row.names = 1L)), input = list(structure(list(factor_variables = list(structure(list(`Low, temperate/boreal, dry` = 0.95,          `Low, temperate/boreal, moist` = 0.92, `Low, tropical, dry` = 0.95,          `Low, tropical, moist` = 0.92, `Low, tropical montane, all` = 0.94,          `Medium, all` = 1L, `High w/OUT manure, temperate/boral and tropical, dry` = 1.04,          `High w/OUT manure, temperate/boral and tropical, moist/wet` = 1.11,          `High w/OUT manure, tropical montane` = 1.08, `High with manure, temperate/boral and tropical, dry` = 1.37,          `High with manure, temperate/boral and tropical, moist/wet` = 1.44,          `High with manure, tropical montane` = 1.41), class = "data.frame",          row.names = 1L))), class = "data.frame", row.names = 1L))),      row.names = c(NA, -1L), class = "data.frame"))[[11]][[1]])[[1]][[1]])
cropland_change_carbon_stocks_mineral_soils <- data.frame("initial_landuse" = "cropland")
View(cropland_change_carbon_stocks_mineral_soils)
feed_basket_quality <- feed_quality(para)
energy_required <- energy_requirement(para,feed_basket_quality,energy_parameters)
land_required <- land_requirement(feed_basket_quality, energy_required, para)
soil_erosion <- soil_health(para, land_required)
water_required <- water_requirement(para, land_required)
nitrogen_balance <- n_balance(para, land_required, soil_erosion)
livestock_productivity <- land_productivity(para)
economics <- economics_payback(para, energy_required, livestock_productivity)
biomass <- biomass_calculation(para, land_required)
soil_carbon <- soil_organic_carbon(para, stock_change_para, land_required, biomass)
cropland_change_carbon_stocks_mineral_soils <- data.frame("initial_landuse" = "cropland") %>%
mutate(reporting_landuse = "cropland",
area_last_year_inventory_period = sum(land_required$area_feed)-(sum(land_required$grasses)+sum(land_required$tree_legume)),
carbon_stock_last_year_inventory_period = ifelse(field_soc>0, field_soc, 30),
time_dependence_stock_change = 20,
stock_change_factor_land_use = unnest(stock_change_para[["cropland"]], cols = c(landuse)) %>%
unnest(cols = c(factor_variables)) %>%
select(paste0(para[["cropland_system"]])) %>%
as.numeric(),
stock_change_factor_management = unnest(stock_change_para[["cropland"]], cols = c(tillage)) %>%
unnest(cols = c(factor_variables)) %>%
select(paste0(para[["cropland_tillage"]])) %>%
as.numeric(),
stock_change_factor_input = unnest(stock_change_para[["cropland"]], cols = c(input)) %>%
unnest(cols = c(factor_variables)) %>%
select(paste0(para[["cropland_orgmatter"]])) %>%
as.numeric(),
annual_change_carbon_stocks_mineral_soils = ((carbon_stock_last_year_inventory_period*stock_change_factor_land_use*stock_change_factor_management*stock_change_factor_input)-carbon_stock_last_year_inventory_period)/time_dependence_stock_change*area_last_year_inventory_period)
View(stock_change_parameters)
view(as.data.frame(unnest(stock_change_para[["cropland"]], cols = c(landuse)) %>%
unnest(cols = c(factor_variables))))
para <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/gui_test/steve_test_2.json",
flatten = TRUE, simplifyDataFrame = TRUE)
feed_basket_quality <- feed_quality(para)
energy_required <- energy_requirement(para,feed_basket_quality,energy_parameters)
land_required <- land_requirement(feed_basket_quality, energy_required, para)
soil_erosion <- soil_health(para, land_required)
water_required <- water_requirement(para, land_required)
nitrogen_balance <- n_balance(para, land_required, soil_erosion)
livestock_productivity <- land_productivity(para)
economics <- economics_payback(para, energy_required, livestock_productivity)
biomass <- biomass_calculation(para, land_required)
soil_carbon <- soil_organic_carbon(para, stock_change_para, land_required, biomass)
feed_basket_quality <- feed_quality(para)
energy_required <- energy_requirement(para,feed_basket_quality,energy_parameters)
land_required <- land_requirement(feed_basket_quality, energy_required, para)
soil_erosion <- soil_health(para, land_required)
water_required <- water_requirement(para, land_required)
nitrogen_balance <- n_balance(para, land_required, soil_erosion)
livestock_productivity <- land_productivity(para)
economics <- economics_payback(para, energy_required, livestock_productivity)
biomass <- biomass_calculation(para, land_required)
soil_carbon <- soil_organic_carbon(para, stock_change_para, land_required, biomass)
ghg_emissions <- ghg_emission(para,energy_required,ghg_ipcc_data,land_required,nitrogen_balance)
cleaned_output <- combineOutputs(feed_basket_quality,energy_required,land_required,soil_erosion,water_required,
nitrogen_balance,livestock_productivity,economics,biomass,soil_carbon,ghg_emissions)
View(ghg_emissions)
x <- t(ghg_emissions)
View(x)
row.names(ghg_emissions)
row.names(ghg_emissions) <- ghg_emissions$GHG_balance
x <- t(ghg_emissions)
x <- t(ghg_emissions[,2])
ghg_emissions[,2]
ghg_emissions[,2]
return (X)
x <- t(ghg_emissions[,-1])
ghg_emissions[,-1]
name <- row.names(ghg_emissions)
colnames(x) <- name
modelRun <- function (my.data) {
return(mapply(oneRun, my.data[,1], my.data[,2], my.data[,3]))
}
name
# Model
oneRun <- function (herd, angrowth, anmilk) {
para <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/gui_test/steve_test_2.json",
flatten = TRUE, simplifyDataFrame = TRUE)
ghg_ipcc_data <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/cleaned_tool/cleaned/inst/extdata/ghg_parameters.json",
flatten = TRUE, simplifyDataFrame = TRUE)
energy_parameters <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/cleaned_tool/cleaned/inst/extdata/energy_parameters.json",
flatten = TRUE, simplifyDataFrame = TRUE)
stock_change_parameters <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/cleaned_tool/cleaned/inst/extdata/stock_change_parameters.json",
flatten = TRUE, simplifyDataFrame = TRUE)
# Update the simulated data
para$livestock$herd_composition=herdsize
para$livestock$annual_growth=angrowth
para$livestock$annual_milk=anmilk
# Run cleaned
feed_basket_quality <- feed_quality(para)
energy_required <- energy_requirement(para,feed_basket_quality,energy_parameters)
land_required <- land_requirement(feed_basket_quality, energy_required, para)
soil_erosion <- soil_health(para, land_required)
water_required <- water_requirement(para, land_required)
nitrogen_balance <- n_balance(para, land_required, soil_erosion)
livestock_productivity <- land_productivity(para)
economics <- economics_payback(para, energy_required, livestock_productivity)
biomass <- biomass_calculation(para, land_required)
soil_carbon <- soil_organic_carbon(para, stock_change_para, land_required, biomass)
ghg_emissions <- ghg_emission(para,energy_required,ghg_ipcc_data,land_required,nitrogen_balance)
cleaned_output <- combineOutputs(feed_basket_quality,energy_required,land_required,soil_erosion,water_required,
nitrogen_balance,livestock_productivity,economics,biomass,soil_carbon,ghg_emissions)
name <- row.names(ghg_emissions)
x <- t(ghg_emissions[,-1])
colnames(x) <- name
return (x)
}
res.names <- c("Enteric_fermentation_Methane","Manure_Methane","Manure_Direct_N2O","Manure_Indirect_N2O","Soil_Direct_N2O","Soil_Indirect_N2O",
"OFF_Farm_Soil_Direct_N2O","OFF_Farm_Soil_Indirect_N2O","Burning","Rice_production_Methane","Off_farm_emissions")
myLHS <- LHS(modelRun, factors, 200, q, q.arg,res.names, nboot=50)
# Parameters of interest
factors <- c("herdsize", "angrowth", "anmilk")
# Parameter distribution
q <- c("qunif", "qnorm", "qnorm")
# Mean and standard deviation
q.arg <- list( list(min=1, max=200), list(mean=200, sd=50), list(mean=700, sd=250) )
# Model
oneRun <- function (herd, angrowth, anmilk) {
para <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/gui_test/steve_test_2.json",
flatten = TRUE, simplifyDataFrame = TRUE)
ghg_ipcc_data <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/cleaned_tool/cleaned/inst/extdata/ghg_parameters.json",
flatten = TRUE, simplifyDataFrame = TRUE)
energy_parameters <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/cleaned_tool/cleaned/inst/extdata/energy_parameters.json",
flatten = TRUE, simplifyDataFrame = TRUE)
stock_change_parameters <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/cleaned_tool/cleaned/inst/extdata/stock_change_parameters.json",
flatten = TRUE, simplifyDataFrame = TRUE)
# Update the simulated data
para$livestock$herd_composition=herdsize
para$livestock$annual_growth=angrowth
para$livestock$annual_milk=anmilk
# Run cleaned
feed_basket_quality <- feed_quality(para)
energy_required <- energy_requirement(para,feed_basket_quality,energy_parameters)
land_required <- land_requirement(feed_basket_quality, energy_required, para)
soil_erosion <- soil_health(para, land_required)
water_required <- water_requirement(para, land_required)
nitrogen_balance <- n_balance(para, land_required, soil_erosion)
livestock_productivity <- land_productivity(para)
economics <- economics_payback(para, energy_required, livestock_productivity)
biomass <- biomass_calculation(para, land_required)
soil_carbon <- soil_organic_carbon(para, stock_change_para, land_required, biomass)
ghg_emissions <- ghg_emission(para,energy_required,ghg_ipcc_data,land_required,nitrogen_balance)
cleaned_output <- combineOutputs(feed_basket_quality,energy_required,land_required,soil_erosion,water_required,
nitrogen_balance,livestock_productivity,economics,biomass,soil_carbon,ghg_emissions)
name <- row.names(ghg_emissions)
x <- t(ghg_emissions[,-1])
colnames(x) <- name
return (x)
}
factors <- c("herdsize", "angrowth", "anmilk")
# Parameter distribution
q <- c("qunif", "qnorm", "qnorm")
# Mean and standard deviation
q.arg <- list( list(min=1, max=200), list(mean=200, sd=50), list(mean=700, sd=250) )
# Model
oneRun <- function (herdsize, angrowth, anmilk) {
para <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/gui_test/steve_test_2.json",
flatten = TRUE, simplifyDataFrame = TRUE)
ghg_ipcc_data <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/cleaned_tool/cleaned/inst/extdata/ghg_parameters.json",
flatten = TRUE, simplifyDataFrame = TRUE)
energy_parameters <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/cleaned_tool/cleaned/inst/extdata/energy_parameters.json",
flatten = TRUE, simplifyDataFrame = TRUE)
stock_change_parameters <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/cleaned_tool/cleaned/inst/extdata/stock_change_parameters.json",
flatten = TRUE, simplifyDataFrame = TRUE)
# Update the simulated data
para$livestock$herd_composition=herdsize
para$livestock$annual_growth=angrowth
para$livestock$annual_milk=anmilk
# Run cleaned
feed_basket_quality <- feed_quality(para)
energy_required <- energy_requirement(para,feed_basket_quality,energy_parameters)
land_required <- land_requirement(feed_basket_quality, energy_required, para)
soil_erosion <- soil_health(para, land_required)
water_required <- water_requirement(para, land_required)
nitrogen_balance <- n_balance(para, land_required, soil_erosion)
livestock_productivity <- land_productivity(para)
economics <- economics_payback(para, energy_required, livestock_productivity)
biomass <- biomass_calculation(para, land_required)
soil_carbon <- soil_organic_carbon(para, stock_change_para, land_required, biomass)
ghg_emissions <- ghg_emission(para,energy_required,ghg_ipcc_data,land_required,nitrogen_balance)
cleaned_output <- combineOutputs(feed_basket_quality,energy_required,land_required,soil_erosion,water_required,
nitrogen_balance,livestock_productivity,economics,biomass,soil_carbon,ghg_emissions)
name <- row.names(ghg_emissions)
x <- t(ghg_emissions[,-1])
colnames(x) <- name
return (x)
}
modelRun <- function (my.data) {
return(mapply(oneRun, my.data[,1], my.data[,2], my.data[,3]))
}
res.names <- c("Enteric_fermentation_Methane","Manure_Methane","Manure_Direct_N2O","Manure_Indirect_N2O","Soil_Direct_N2O","Soil_Indirect_N2O",
"OFF_Farm_Soil_Direct_N2O","OFF_Farm_Soil_Indirect_N2O","Burning","Rice_production_Methane","Off_farm_emissions")
myLHS <- LHS(modelRun, factors, 200, q, q.arg,res.names, nboot=50)
# See data used
get.data(myLHS)
# See the results
get.results(myLHS)
plotprcc(myLHS)
library(cleaned)
library(jsonlite)
library(tidyverse)
para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
ghg_ipcc_data <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
energy_parameters <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
stock_change_para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
feed_basket_quality <- feed_quality(para)
energy_required <- energy_requirement(para,feed_basket_quality,energy_parameters)
land_required <- land_requirement(feed_basket_quality, energy_required, para)
soil_erosion <- soil_health(para, land_required)
water_required <- water_requirement(para, land_required)
nitrogen_balance <- n_balance(para, land_required, soil_erosion)
livestock_productivity <- land_productivity(para)
economics <- economics_payback(para, energy_required, livestock_productivity)
biomass <- biomass_calculation(para, land_required)
soil_carbon <- soil_organic_carbon(para, stock_change_para, land_required, biomass)
