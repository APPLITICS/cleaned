# Feed quality calculation
# Load required packages
.packages = c("jsonlite","tidyverse", "lubridate")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/example.json"),  flatten = TRUE)
seasons <- para[["seasons"]]
# Compute feeding season ratio
seasons <- seasons %>% mutate(feeding_ratio = season_length/sum(seasons$season_length))
i <- 1
feed_production <- unnest(para[["feed_production"]], cols = c(feed_type_name))
feed_types <- unique(feed_production$feed_type_name)
j <- 1
feed <- feed_production %>% filter(feed_type_name %in% feed_production$feed_type_name[j])
feed_item <- as.data.frame(feed[["feed_items"]])
temp <- feed_item %>% select(feed_item_name, cp_content, me_content,
dm_content)
# Convert columns of interest to numeric
temp <- temp %>%
mutate_at(c("cp_content", "me_content", "dm_content"), as.numeric) %>%
mutate(de_content = me_content*0.066) # calculate de content
# Extracting allocation
feeding_seasons <- unnest(para[["livestock_feeding_seasons"]],
cols = c(livestock_categories)) %>% filter(season_name %in%
seasons$season_name[i])
livestock <- unnest(para[["livestock"]], cols = c(livestock)) %>%
filter(season_name %in% seasons$season_name[i])
livestock
View(livestock)
# Feed quality calculation
# Load required packages
.packages = c("jsonlite","tidyverse", "lubridate")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/example.json"),  flatten = TRUE)
# Feed quality calculation
# Load required packages
.packages = c("jsonlite","tidyverse", "lubridate")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/example.json"),  flatten = TRUE)
seasons <- para[["seasons"]]
# Compute feeding season ratio
seasons <- seasons %>% mutate(feeding_ratio = season_length/sum(seasons$season_length))
i <- 1
feed_production <- unnest(para[["feed_production"]], cols = c(feed_type_name))
feed_types <- unique(feed_production$feed_type_name)
j <- 1
feed <- feed_production %>% filter(feed_type_name %in% feed_production$feed_type_name[j])
feed_item <- as.data.frame(feed[["feed_items"]])
temp <- feed_item %>% select(feed_item_name, cp_content, me_content,
dm_content)
# Convert columns of interest to numeric
temp <- temp %>%
mutate_at(c("cp_content", "me_content", "dm_content"), as.numeric) %>%
mutate(de_content = me_content*0.066) # calculate de content
# Extracting allocation
feeding_seasons <- unnest(para[["livestock_feeding_seasons"]],
cols = c(livestock_categories)) %>% filter(season_name %in%
seasons$season_name[i])
livestock <- unnest(para[["livestock"]], cols = c(livestock)) %>%
filter(season_name %in% seasons$season_name[i])
livestock
feed_types
View(livestock)
View(feed_production)
View(feed)
livestock <- unnest(para[["livestock"]], cols = c(livestock))
View(livestock)
# Feed quality calculation
# Load required packages
.packages = c("jsonlite","tidyverse", "lubridate")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/example1.json"),  flatten = TRUE)
# Feed quality calculation
# Load required packages
.packages = c("jsonlite","tidyverse", "lubridate")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/example1.json"),  flatten = TRUE)
seasons <- para[["seasons"]]
# Compute feeding season ratio
seasons <- seasons %>% mutate(feeding_ratio = season_length/sum(seasons$season_length))
i <- 1
feed_production <- unnest(para[["feed_production"]], cols = c(feed_type_name))
feed_types <- unique(feed_production$feed_type_name)
j <- 1
feed <- feed_production %>% filter(feed_type_name %in% feed_production$feed_type_name[j])
feed_item <- as.data.frame(feed[["feed_items"]])
temp <- feed_item %>% select(feed_item_name, cp_content, me_content,
dm_content)
# Convert columns of interest to numeric
temp <- temp %>%
mutate_at(c("cp_content", "me_content", "dm_content"), as.numeric) %>%
mutate(de_content = me_content*0.066) # calculate de content
# Extracting allocation
feeding_seasons <- unnest(para[["livestock_feeding_seasons"]],
cols = c(livestock_categories)) %>% filter(season_name %in%
seasons$season_name[i])
livestock <- unnest(para[["livestock"]], cols = c(livestock)) %>%
filter(season_name %in% seasons$season_name[i])
feeding_seasons
livestock <- unnest(para[["livestock"]], cols = c(livestock))
names(para)
livestock <- unnest(para[["livestock"]], cols = c(livestock))
para[["livestock"]]
# Feed quality calculation
# Load required packages
.packages = c("jsonlite","tidyverse", "lubridate")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/example1.json"),  flatten = TRUE)
seasons <- para[["seasons"]]
# Compute feeding season ratio
seasons <- seasons %>% mutate(feeding_ratio = season_length/sum(seasons$season_length))
i <- 1
feed_production <- unnest(para[["feed_production"]], cols = c(feed_type_name))
feed_types <- unique(feed_production$feed_type_name)
j <- 1
feed <- feed_production %>% filter(feed_type_name %in% feed_production$feed_type_name[j])
feed_item <- as.data.frame(feed[["feed_items"]])
temp <- feed_item %>% select(feed_item_name, cp_content, me_content,
dm_content)
# Convert columns of interest to numeric
temp <- temp %>%
mutate_at(c("cp_content", "me_content", "dm_content"), as.numeric) %>%
mutate(de_content = me_content*0.066) # calculate de content
# Extracting allocation
feeding_seasons <- unnest(para[["livestock_feeding_seasons"]],
cols = c(livestock_categories)) %>% filter(season_name %in%
seasons$season_name[i])
feeding_seasons
livestock <- unnest(para[["livestock"]], cols = c(livestock))
names(para)
test <- para$livestock$livestock_category_name
livestock <- unnest(para[["livestock"]], cols = c(livestock_category_name))
View(livestock)
# Loading data
para <- fromJSON(paste0(path,"/data/example1.json"),  flatten = TRUE)
livestock <- unnest(para[["livestock"]], cols = c(livestock_category_name))
View(livestock)
# Feed quality calculation
# Load required packages
.packages = c("jsonlite","tidyverse", "lubridate")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/example1.json"),  flatten = TRUE)
livestock <- unnest(para[["livestock"]], cols = c(livestock_category_name))
View(livestock)
View(livestock)
livestock
names(para)
# Extracting allocation
feeding_seasons <- unnest(para[["livestock_feeding_seasons"]],
cols = c(livestock_categories)) %>% filter(season_name %in%
seasons$season_name[i])
feeding_seasons
View(feeding_seasons)
View(feeding_seasons[[3]][[1]])
# Extracting allocation
feeding_seasons <- unnest(para[["livestock_feeding_seasons"]],
cols = c(allocation)) %>% filter(season_name %in%
seasons$season_name[i])
View(feeding_seasons)
View(feeding_seasons[[3]][[1]])
View(livestock)
k <- 1
names(livestock)
feed_production <- unnest(para[["feed_production"]], cols = c(feed_type_name))
feed_production
View(feed_production)
feed_types <- unique(feed_production$feed_type_name)
feed_types
feed_production <- unnest(para[["feed_production"]], cols = c(feed_type_name))
View(feed_production)
View(feed_production[[20]][[1]])
livestock
View(livestock)
livestock <- unnest(para[["livestock"]], cols = c(livestock_feeding_seasons))
livestock <- unnest(para[["livestock"]], cols = c(livestock_feeding_seasons))
para[["livestock"]]
livestock <- unnest(para[["livestock"]], cols = c(livestock_category_name))
View(livestock)
livestock <- unnest(para[["livestock_feeding_seasons"]], cols = c(livestock_category_name))
para[["livestock_feeding_seasons"]]
# Extracting allocation
feeding_seasons <- unnest(para[["livestock_feeding_seasons"]],
cols = c(allocation)) %>% filter(season_name %in%
seasons$season_name[i])
para[["livestock_feeding_seasons"]]
names(para[["livestock_feeding_seasons"]])
# Extracting allocation
feeding_seasons <- unnest(para[["livestock_feeding_seasons"]],
cols = c(livestock_categories)) %>% filter(season_name %in%
seasons$season_name[i])
View(feeding_seasons)
View(feeding_seasons)
1:nrow(feeding_seasons)
names(feeding_seasons)
livestock_category_code <- feeding_seasons %>%
filter(livestock_category_code %in% feed_seasons$livestock_category_code[k])
livestock_category_code <- feeding_seasons %>%
filter(livestock_category_code %in% feeding_seasons$livestock_category_code[k])
View(livestock_category_code)
View(livestock_category_code[[3]][[1]])
names(para)
names(para$livestock)
test
feeding_seasons <- feeding_seasons %>%
mutate(livestock_category_name =
ifelse(livestock_category_code %in% "1", "Cows (local)",
ifelse(livestock_category_code %in% "2", "Cows (improved)",
ifelse(livestock_category_code %in% "3", "Adult cattle - male", "Error"))))
View(feeding_seasons)
feeding_seasons <- feeding_seasons %>%
mutate(livestock_category_name =
ifelse(livestock_category_code %in% "01", "Cows (local)",
ifelse(livestock_category_code %in% "02", "Cows (improved)",
ifelse(livestock_category_code %in% "03", "Adult cattle - male", "Error"))))
View(feeding_seasons)
View(feeding_seasons[[3]][[1]])
feeding_seasons <- feeding_seasons %>%
mutate(livestock_category_name =
ifelse(livestock_category_code %in% "01", "Cows (local)",
ifelse(livestock_category_code %in% "02", "Cows (improved)",
ifelse(livestock_category_code %in% "03", "Adult cattle - male",
ifelse(livestock_category_code %in% "04", "Calves",
ifelse(livestock_category_code %in% "05", "Buffalo (dairy)",
ifelse(livestock_category_code %in% "06", "Sheep/Goats - Ewes/Does",
ifelse(livestock_category_code %in% "07", "Pigs - lactating/pregnant sows",
ifelse(livestock_category_code %in% "08", "Calves",
ifelse(livestock_category_code %in% "09", "Cows (high productive)", "Error"))))))))))
View(feeding_seasons)
# Extracting allocation
feeding_seasons <- unnest(para[["livestock_feeding_seasons"]],
cols = c(livestock_categories)) %>% filter(season_name %in%
seasons$season_name[i])
View(feeding_seasons)
# Extracting allocation
feeding_seasons <- unnest(para[["livestock_feeding_seasons"]],
cols = c(livestock_categories)) %>% filter(season_name %in%
seasons$season_name[i])
feeding_seasons <- feeding_seasons %>%
mutate(livestock_category_name =
ifelse(livestock_category_code %in% "01", "Cows (local)",
ifelse(livestock_category_code %in% "02", "Cows (improved)",
ifelse(livestock_category_code %in% "03", "Adult cattle - male",
ifelse(livestock_category_code %in% "04", "Calves",
ifelse(livestock_category_code %in% "05", "Buffalo (dairy)",
ifelse(livestock_category_code %in% "06", "Sheep/Goats - Ewes/Does",
ifelse(livestock_category_code %in% "07", "Pigs - lactating/pregnant sows",
ifelse(livestock_category_code %in% "08", "Calves",
ifelse(livestock_category_code %in% "09", "Cows (high productive)", "Error"))))))))))
View(feeding_seasons)
livestock_category_code <- feeding_seasons %>%
filter(livestock_category_code %in% feeding_seasons$livestock_category_code[k])
View(livestock_category_code)
# Extracting allocation
feeding_seasons <- unnest(para[["livestock_feeding_seasons"]],
cols = c(livestock_categories)) %>% filter(season_name %in%
seasons$season_name[i])
feeding_seasons
feeding_seasons <- feeding_seasons %>%
mutate(livestock_category_name =
ifelse(livestock_category_code %in% "01", "Cows (local)",
ifelse(livestock_category_code %in% "02", "Cows (improved)",
ifelse(livestock_category_code %in% "03", "Adult cattle - male",
ifelse(livestock_category_code %in% "04", "Calves",
ifelse(livestock_category_code %in% "05", "Buffalo (dairy)",
ifelse(livestock_category_code %in% "06", "Sheep/Goats - Ewes/Does",
ifelse(livestock_category_code %in% "07", "Pigs - lactating/pregnant sows",
ifelse(livestock_category_code %in% "08", "Calves",
ifelse(livestock_category_code %in% "09", "Cows (high productive)", "Error"))))))))))
View(feeding_seasons)
livestock_category_code <- feeding_seasons %>%
filter(livestock_category_code %in% feeding_seasons$livestock_category_code[k])
View(livestock_category_code)
View(livestock_category_code[[3]][[1]])
View(feed_item)
View(livestock_category_code)
View(livestock_category_code[[3]][[1]])
temp$fraction_as_fed <-
temp <- livestock %>% select(season_name, livestock_category_code,
livestock_category_name)
View(temp)
livestock_category_code <- feeding_seasons %>%
filter(livestock_category_code %in% feeding_seasons$livestock_category_code[k])
View(livestock_category_code)
names(livestock_category_code)
allocation <- unnest(livestock_category_code[["allocation"]],
cols = c(feed_item))
View(livestock_category_code)
View(livestock_category_code[[3]][[1]])
allocation <- unnest(livestock_category_code[["allocation"]],
cols = c(feed_item_code))
livestock_category_code <- feeding_seasons %>%
filter(livestock_category_code %in% feeding_seasons$livestock_category_code[k])
View(livestock_category_code)
View(temp)
feed <- feed_production %>% filter(feed_type_name %in% feed_production$feed_type_name[j])
feed
feed_item <- as.data.frame(feed[["feed_items"]])
feed_item
temp <- feed_item %>% select(feed_item_code, feed_item_name, cp_content, me_content,
dm_content)
# Convert columns of interest to numeric
temp <- temp %>%
mutate_at(c("cp_content", "me_content", "dm_content"), as.numeric) %>%
mutate(de_content = me_content*0.066) # calculate de content
View(temp)
# Extracting allocation
feeding_seasons <- unnest(para[["livestock_feeding_seasons"]],
cols = c(livestock_categories)) %>% filter(season_name %in%
seasons$season_name[i])
View(feeding_seasons)
feeding_seasons <- feeding_seasons %>%
mutate(livestock_category_name =
ifelse(livestock_category_code %in% "01", "Cows (local)",
ifelse(livestock_category_code %in% "02", "Cows (improved)",
ifelse(livestock_category_code %in% "03", "Adult cattle - male",
ifelse(livestock_category_code %in% "04", "Calves",
ifelse(livestock_category_code %in% "05", "Buffalo (dairy)",
ifelse(livestock_category_code %in% "06", "Sheep/Goats - Ewes/Does",
ifelse(livestock_category_code %in% "07", "Pigs - lactating/pregnant sows",
ifelse(livestock_category_code %in% "08", "Calves",
ifelse(livestock_category_code %in% "09", "Cows (high productive)", "Error"))))))))))
k <- 1
View(temp)
livestock_category_code <- feeding_seasons %>%
filter(livestock_category_code %in% feeding_seasons$livestock_category_code[k])
View(livestock_category_code)
# Extracting allocation
feeding_seasons <- unnest(para[["livestock_feeding_seasons"]],
cols = c(livestock_categories)) %>% filter(season_name %in%
seasons$season_name[i])
View(feeding_seasons)
# Extracting allocation
feeding_seasons <- unnest(para[["livestock_feeding_seasons"]],
cols = c(allocation)) %>% filter(season_name %in%
seasons$season_name[i])
names(para[["livestock_feeding_seasons"]])
names(feeding_seasons)
allocation <- as.data.frame(feeding_seasons[["allocation"]])
View(allocation)
feeding_seasons[["allocation"]]
allocation <- as.data.frame(feeding_seasons[["allocation:"]])
View(allocation)
temp
allocation
View(allocation)
names(feeding_seasons)
allocation <- as.data.frame(feeding_seasons[["livestock_category_code"]])
View(allocation)
View(feeding_seasons)
feeding_seasons <- feeding_seasons %>%
mutate(livestock_category_name =
ifelse(livestock_category_code %in% "01", "Cows (local)",
ifelse(livestock_category_code %in% "02", "Cows (improved)",
ifelse(livestock_category_code %in% "03", "Adult cattle - male",
ifelse(livestock_category_code %in% "04", "Calves",
ifelse(livestock_category_code %in% "05", "Buffalo (dairy)",
ifelse(livestock_category_code %in% "06", "Sheep/Goats - Ewes/Does",
ifelse(livestock_category_code %in% "07", "Pigs - lactating/pregnant sows",
ifelse(livestock_category_code %in% "08", "Calves",
ifelse(livestock_category_code %in% "09", "Cows (high productive)", "Error"))))))))))
View(feeding_seasons)
k <- 1
livestock_category_code <- feeding_seasons %>%
filter(livestock_category_code %in% feeding_seasons$livestock_category_code[k])
View(livestock_category_code)
View(livestock_category_code[[3]][[1]])
View(feed_item)
View(feed_item)
test <- feed_item$feed_item_code
feed_item_code <- feed_item$feed_item_code
View(livestock_category_code)
names(livestock_category_code)
test <- livestock_category_code %>%
filter(`allocation:`%in%feed_item_code[feed_item_code])
View(test)
View(livestock_category_code)
View(livestock_category_code)
View(livestock_category_code[[3]][[1]])
class(livestock_category_code)
feed_production <- unnest(para[["feed_production"]], cols = c(feed_type_name))
feed_production
View(feed_production)
View(feed_production)
View(feed)
feed_item <- as.data.frame(feed[[`allocation:`]])
test <- as.data.frame(livestock_category_code[["allocation:"]])
View(test)
feed_item_select <- as.data.frame(livestock_category_code[["allocation:"]])
View(feed_item_select)
test <- feed_item_select[feed_item_code]
View(feed_item_select)
feed_item_code
feed_item_select <- subset(feed_item_select, feed_item_select$feed_item_code==feed_item_code)
View(feed_item_select)
feed_item_code <- feed_item$feed_item_code
feed_item_select <- as.data.frame(livestock_category_code[["allocation:"]])
View(feed_item_select)
feed_item_select <- subset(feed_item_select, feed_item_select$feed_item_code==feed_item_code)
View(feed_item_select)
feed_item_select <- feed_item_select[feed_item_select$feed_item_code==feed_item_code,]
View(feed_item_select)
temp <- fraction_as_fed %>%
mutate(fraction_as_fed = feed_item_select$allocation) # ad fraction as fed
temp <- temp %>%
mutate(fraction_as_fed = feed_item_select$allocation) # ad fraction as fed
View(temp)
temp <- temp %>%
mutate(fraction_as_fed = feed_item_select$allocation/100) # ad fraction as fed
feed_item_select$allocation
feed_item_select$allocation/100
temp <- temp %>%
mutate(fraction_as_fed = as.numeric(feed_item_select$allocation)/100) # ad fraction as fed
View(temp)
# Feed quality calculation
# Load required packages
.packages = c("jsonlite","tidyverse", "lubridate")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/example1.json"),  flatten = TRUE)
seasons <- para[["seasons"]]
# Compute feeding season ratio
seasons <- seasons %>% mutate(feeding_ratio = season_length/sum(seasons$season_length))
i <- 1
feed_production <- unnest(para[["feed_production"]], cols = c(feed_type_name))
feed_types <- unique(feed_production$feed_type_name)
j <- 1
feed <- feed_production %>% filter(feed_type_name %in% feed_production$feed_type_name[j])
feed_item <- as.data.frame(feed[["feed_items"]])
temp <- feed_item %>% select(feed_item_code, feed_item_name, cp_content, me_content,
dm_content)
# Convert columns of interest to numeric
temp <- temp %>%
mutate_at(c("cp_content", "me_content", "dm_content"), as.numeric) %>%
mutate(de_content = me_content*0.066) # calculate de content
# Extracting allocation
feeding_seasons <- unnest(para[["livestock_feeding_seasons"]],
cols = c(livestock_categories)) %>% filter(season_name %in%
seasons$season_name[i])
feeding_seasons <- feeding_seasons %>%
mutate(livestock_category_name =
ifelse(livestock_category_code %in% "01", "Cows (local)",
ifelse(livestock_category_code %in% "02", "Cows (improved)",
ifelse(livestock_category_code %in% "03", "Adult cattle - male",
ifelse(livestock_category_code %in% "04", "Calves",
ifelse(livestock_category_code %in% "05", "Buffalo (dairy)",
ifelse(livestock_category_code %in% "06", "Sheep/Goats - Ewes/Does",
ifelse(livestock_category_code %in% "07", "Pigs - lactating/pregnant sows",
ifelse(livestock_category_code %in% "08", "Calves",
ifelse(livestock_category_code %in% "09", "Cows (high productive)", "Error"))))))))))
k <- 1
livestock_category_code <- feeding_seasons %>%
filter(livestock_category_code %in% feeding_seasons$livestock_category_code[k])
feed_item_code <- feed_item$feed_item_code
feed_item_select <- as.data.frame(livestock_category_code[["allocation:"]])
feed_item_select <- feed_item_select[feed_item_select$feed_item_code==feed_item_code,]
temp <- temp %>%
mutate(fraction_as_fed = as.numeric(feed_item_select$allocation)/100) # ad fraction as fed
View(temp)
