.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/example_JM_Test_1_1.json"),  flatten = TRUE)
# Feed quality calculation
feed_basket_quality <- feed_quality(para)
# Energy requirement
energy_required <- energy_requirement(para,feed_basket_quality)
# Land requirement
land_required <- land_requirement(feed_basket_quality, energy_required, para)
#soil health status
soil_erosion <- soil_health(para, land_required)
#water requirement
water_requirements <- water_requirement(para,land_required)
#Nitrogen balance
nitrogen_balance <- nitrogen_balance(para, land_required, soil_erosion)
# clear your work space
rm(list = ls(all = TRUE))
# Load required packages
.packages = c("jsonlite","tidyverse", "lubridate", "data.table", "tidyr", "dplyr")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/example_JM_Test_1_1.json"),  flatten = TRUE)
# Feed quality calculation
feed_basket_quality <- feed_quality(para)
# Energy requirement
energy_required <- energy_requirement(para,feed_basket_quality)
# Land requirement
land_required <- land_requirement(feed_basket_quality, energy_required, para)
#soil health status
soil_erosion <- soil_health(para, land_required)
#water requirement
water_requirements <- water_requirement(para,land_required)
#Nitrogen balance
nitrogen_balance <- nitrogen_balance(para, land_required, soil_erosion)
# clear your work space
rm(list = ls(all = TRUE))
# Load required packages
.packages = c("jsonlite","tidyverse", "lubridate", "data.table", "tidyr", "dplyr")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/example_JM_Test_1_1.json"),  flatten = TRUE)
# Feed quality calculation
feed_basket_quality <- feed_quality(para)
# Energy requirement
energy_required <- energy_requirement(para,feed_basket_quality)
# Land requirement
land_required <- land_requirement(feed_basket_quality, energy_required, para)
#soil health status
soil_erosion <- soil_health(para, land_required)
#water requirement
water_requirements <- water_requirement(para,land_required)
#Nitrogen balance
nitrogen_balance <- nitrogen_balance(para, land_required, soil_erosion)
View(nitrogen_balance)
# clear your work space
rm(list = ls(all = TRUE))
# Load required packages
.packages = c("jsonlite","tidyverse", "lubridate", "data.table", "tidyr", "dplyr")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/example_JM_Test_1_1.json"),  flatten = TRUE)
# Feed quality calculation
feed_basket_quality <- feed_quality(para)
# Energy requirement
energy_required <- energy_requirement(para,feed_basket_quality)
# Land requirement
land_required <- land_requirement(feed_basket_quality, energy_required, para)
#soil health status
soil_erosion <- soil_health(para, land_required)
#water requirement
water_requirements <- water_requirement(para,land_required)
#Nitrogen balance
nitrogen_balance <- nitrogen_balance(para, land_required, soil_erosion)
View(nitrogen_balance)
# clear your work space
rm(list = ls(all = TRUE))
# Load required packages
.packages = c("jsonlite","tidyverse", "lubridate", "data.table", "tidyr", "dplyr")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/example_JM_Test_1_1.json"),  flatten = TRUE)
# Feed quality calculation
feed_basket_quality <- feed_quality(para)
# Energy requirement
energy_required <- energy_requirement(para,feed_basket_quality)
# Land requirement
land_required <- land_requirement(feed_basket_quality, energy_required, para)
#soil health status
soil_erosion <- soil_health(para, land_required)
#water requirement
water_requirements <- water_requirement(para,land_required)
#Nitrogen balance
nitrogen_balance <- nitrogen_balance(para, land_required, soil_erosion)
View(nitrogen_balance)
# clear your work space
rm(list = ls(all = TRUE))
# Load required packages
.packages = c("jsonlite","tidyverse", "lubridate", "data.table", "tidyr", "dplyr")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/example_JM_Test_1_1.json"),  flatten = TRUE)
# Feed quality calculation
feed_basket_quality <- feed_quality(para)
# Energy requirement
energy_required <- energy_requirement(para,feed_basket_quality)
# Land requirement
land_required <- land_requirement(feed_basket_quality, energy_required, para)
#soil health status
soil_erosion <- soil_health(para, land_required)
#water requirement
water_requirements <- water_requirement(para,land_required)
#Nitrogen balance
nitrogen_balance <- nitrogen_balance(para, land_required, soil_erosion)
# clear your work space
rm(list = ls(all = TRUE))
# Load required packages
.packages = c("jsonlite","tidyverse", "lubridate", "data.table", "tidyr", "dplyr")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/example_JM_Test_1_1.json"),  flatten = TRUE)
# Feed quality calculation
feed_basket_quality <- feed_quality(para)
# Energy requirement
energy_required <- energy_requirement(para,feed_basket_quality)
# Land requirement
land_required <- land_requirement(feed_basket_quality, energy_required, para)
#soil health status
soil_erosion <- soil_health(para, land_required)
#water requirement
water_requirements <- water_requirement(para,land_required)
#Nitrogen balance
nitrogen_balance <- nitrogen_balance(para, land_required, soil_erosion)
View(nitrogen_balance)
# clear your work space
rm(list = ls(all = TRUE))
# Load required packages
.packages = c("jsonlite","tidyverse", "lubridate", "data.table", "tidyr", "dplyr")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/example_JM_Test_1_1.json"),  flatten = TRUE)
# Feed quality calculation
feed_basket_quality <- feed_quality(para)
# Energy requirement
energy_required <- energy_requirement(para,feed_basket_quality)
# Land requirement
land_required <- land_requirement(feed_basket_quality, energy_required, para)
#soil health status
soil_erosion <- soil_health(para, land_required)
#water requirement
water_requirements <- water_requirement(para,land_required)
#Nitrogen balance
nitrogen_balance <- nitrogen_balance(para, land_required, soil_erosion)
View(nitrogen_balance)
View(nitrogen_balance)
livestock_df <- para[["livestock"]]
View(livestock_df)
numbers <- sum(as.numeric(livestock_df$herd_composition))
livestock_category_names <- c(livestock_df$livestock_category_code)
livestock_allocation <- list()
livestock <- livestock_category_names[1]
livestock
View(livestock_df)
livestock_category_names <- c(livestock_df$livestock_category_name)
livestock_allocation <- list()
livestock <- livestock_category_name
namaes(livestock_df)
names(livestock_df)
livestock_category_names <- c(livestock_df$livestock_category_name)
livestock_allocation <- list()
livestock <- livestock_category_name[1]
livestock <- livestock_category_names[1]
livestock
livestock_selected <- filter(livestock_df, livestock_category_name == livestock_df$livestock_category_name[livestock]
}
Average annual growth per animal (kg)
}
livestock_selected <- filter(livestock_df, livestock_category_name == livestock_df$livestock_category_name[livestock])
livestock_df$livestock_category_name[livestock]
livestock
livestock_selected <- livestock_df[livestock_df$livestock_category_name == livestock,]
View(livestock_selected)
numbers <- sum(as.numeric(livestock_selected$herd_composition))
names(livestock_selected)
lwg_per_animal <- as.numeric(livestock_selected$annual_growth)
tlu <- number*as.numeric(body_weight)/250
livestock_selected <- livestock_df[livestock_df$livestock_category_name == livestock,]
number <- as.numeric(livestock_selected$herd_composition)
lwg_per_animal <- as.numeric(livestock_selected$annual_growth)
tlu <- number*as.numeric(body_weight)/250
tlu <- number*as.numeric(livestock_selected$body_weight)/250
total_lwg <- number*lwg_per_animal
meat <- total_lwg*as.numeric(livestock_selected$carcass_fraction)
total_lwg
livestock_selected$carcass_fraction
as.numeric(livestock_selected$carcass_fraction)
meat <- total_lwg*as.numeric(livestock_selected$carcass_fraction)
total_lwg
livestock_selected$carcass_fraction
meat <- total_lwg*ifelse(is.na(livestock_selected$carcass_fraction),0, total_lwg*as.numeric(livestock_selected$carcass_fraction))
View(livestock_df)
livestock_selected <- livestock_df[livestock_df$livestock_category_name == livestock,]
livestock_selected <- na_if(livestock_selected, "NA") %>%
as.data.frame()
View(livestock_selected)
number <- as.numeric(livestock_selected$herd_composition)
lwg_per_animal <- as.numeric(livestock_selected$annual_growth)
tlu <- number*as.numeric(livestock_selected$body_weight)/250
total_lwg <- number*lwg_per_animal
meat <- total_lwg*as.numeric(livestock_selected$carcass_fraction)
rm(meat)
as.numeric(livestock_selected$carcass_fraction)
meat <- total_lwg*as.numeric(livestock_selected$carcass_fraction)
livestock_selected <- livestock_df[livestock_df$livestock_category_name == livestock,]
livestock_selected <- na_if(livestock_selected, "NA") %>%
as.data.frame()
livestock_selected[is.na(livestock_selected)] <- 0
number <- as.numeric(livestock_selected$herd_composition)
lwg_per_animal <- as.numeric(livestock_selected$annual_growth)
tlu <- number*as.numeric(livestock_selected$body_weight)/250
total_lwg <- number*lwg_per_animal
meat <- total_lwg*as.numeric(livestock_selected$carcass_fraction)
energy_kcal_year <- meat*as.numeric(livestock_selected$energy_meatcontent)
protein_kg_yr <- meat*as.numeric(livestock_selected$protein_meatcontent)/100
# Average annual milk (kg)
milk_production_animal <- as.numeric(livestock_selected$annual_milk)
names(livestock_selected)
# Total milk (kg FPCM/year)
total_milk <- as.numeric(livestock_selected$annual_milk)*(0.337+(0.116*as.numeric(livestock_selected$fat_content)+(0.06*as.numeric(livestock_selected$protein_milkcontent))))
# as.numeric(livestock_selected$annual_milk)
energy_kcal_year <- total_milk*as.numeric(livestock_selected$energy_milkcontent)
# Protein (kg/yr)
protein_kg_year <- total_milk*as.numeric(livestock_selected$protein_milkcontent)/100
livestock_production <- livestock_selected %>%
mutate(number = as.numeric(herd_composition))
View(livestock_production)
View(livestock_production)
livestock_selected <- livestock_df[livestock_df$livestock_category_name == livestock,]
livestock_selected <- na_if(livestock_selected, "NA") %>%
as.data.frame()
livestock_selected[is.na(livestock_selected)] <- 0
livestock_production <- livestock_selected %>%
mutate(number = as.numeric(herd_composition))
View(livestock_production)
names(livestock_production)
livestock_selected <- livestock_df[livestock_df$livestock_category_name == livestock,]
livestock_selected <- na_if(livestock_selected, "NA") %>%
as.data.frame()
livestock_selected[is.na(livestock_selected)] <- 0
livestock_production <- livestock_selected %>%
mutate(number = as.numeric(herd_composition)) %>%
select(-c(3:50))
View(livestock_production)
livestock_production <- livestock_selected %>%
mutate(number = as.numeric(herd_composition),
lwg_per_animal = as.numeric(annual_growth)) %>%
select(-c(3:50))
View(livestock_production)
livestock_production <- livestock_selected %>%
mutate(number = as.numeric(herd_composition),
lwg_per_animal = as.numeric(annual_growth),
tlu = number*as.numeric(body_weight)/250) %>%
select(-c(3:50))
View(livestock_production)
livestock_production <- livestock_selected %>%
mutate(number = as.numeric(herd_composition),
lwg_per_animal = as.numeric(annual_growth),
tlu = number*as.numeric(body_weight)/250,
total_lwg = number*lwg_per_animal) %>%
select(-c(3:50))
View(livestock_production)
livestock_production <- livestock_selected %>%
mutate(number = as.numeric(herd_composition),
lwg_per_animal = as.numeric(annual_growth),
tlu = number*as.numeric(body_weight)/250,
total_lwg = number*lwg_per_animal,
meat = total_lwg*as.numeric(carcass_fraction)) %>%
select(-c(3:50))
View(livestock_production)
livestock_production <- livestock_selected %>%
mutate(number = as.numeric(herd_composition),
lwg_per_animal = as.numeric(annual_growth),
tlu = number*as.numeric(body_weight)/250,
total_lwg = number*lwg_per_animal,
meat = total_lwg*as.numeric(carcass_fraction),
energy_kcal_year = meat*as.numeric(energy_meatcontent)) %>%
select(-c(3:50))
View(livestock_production)
livestock_production <- livestock_selected %>%
mutate(number = as.numeric(herd_composition),
lwg_per_animal = as.numeric(annual_growth),
tlu = number*as.numeric(body_weight)/250,
total_lwg = number*lwg_per_animal,
meat = total_lwg*as.numeric(carcass_fraction),
energy_kcal_year = meat*as.numeric(energy_meatcontent),
protein_kg_yr = meat*as.numeric(protein_meatcontent)/100) %>%
select(-c(3:50))
View(livestock_production)
# Protein (kg/yr)
protein_kg_yr <- meat*as.numeric(livestock_selected$protein_meatcontent)/100
livestock_production <- livestock_selected %>%
mutate(number = as.numeric(herd_composition),
lwg_per_animal = as.numeric(annual_growth),
tlu = number*as.numeric(body_weight)/250,
total_lwg = number*lwg_per_animal,
meat = total_lwg*as.numeric(carcass_fraction),
energy_kcal_year = meat*as.numeric(energy_meatcontent),
protein_kg_yr = meat*as.numeric(protein_meatcontent)/100,
milk_production_animal = as.numeric(annual_milk)) %>%
select(-c(3:50))
View(livestock_production)
livestock_production <- livestock_selected %>%
mutate(number = as.numeric(herd_composition),
lwg_per_animal = as.numeric(annual_growth),
tlu = number*as.numeric(body_weight)/250,
total_lwg = number*lwg_per_animal,
meat = total_lwg*as.numeric(carcass_fraction),
energy_kcal_year = meat*as.numeric(energy_meatcontent),
protein_kg_yr = meat*as.numeric(protein_meatcontent)/100,
milk_production_animal = as.numeric(annual_milk),
total_milk = as.numeric(annual_milk)*(0.337+(0.116*as.numeric(fat_content)+(0.06*as.numeric(protein_milkcontent))))) %>%
select(-c(3:50))
View(livestock_production)
livestock_production <- livestock_selected %>%
mutate(number = as.numeric(herd_composition),
lwg_per_animal = as.numeric(annual_growth),
tlu = number*as.numeric(body_weight)/250,
total_lwg = number*lwg_per_animal,
meat = total_lwg*as.numeric(carcass_fraction),
energy_kcal_year = meat*as.numeric(energy_meatcontent),
protein_kg_yr = meat*as.numeric(protein_meatcontent)/100,
milk_production_animal = as.numeric(annual_milk),
total_milk = as.numeric(annual_milk)*(0.337+(0.116*as.numeric(fat_content)+(0.06*as.numeric(protein_milkcontent)))),
energy_kcal_year = total_milk*as.numeric(energy_milkcontent)) %>%
select(-c(3:50))
View(livestock_production)
livestock_production <- livestock_selected %>%
mutate(number = as.numeric(herd_composition),
lwg_per_animal = as.numeric(annual_growth),
tlu = number*as.numeric(body_weight)/250,
total_lwg = number*lwg_per_animal,
meat = total_lwg*as.numeric(carcass_fraction),
energy_kcal_year = meat*as.numeric(energy_meatcontent),
protein_kg_yr = meat*as.numeric(protein_meatcontent)/100,
milk_production_animal = as.numeric(annual_milk),
total_milk = as.numeric(annual_milk)*(0.337+(0.116*as.numeric(fat_content)+(0.06*as.numeric(protein_milkcontent)))),
energy_kcal_year = total_milk*as.numeric(energy_milkcontent)) %>%
select(-c(3:50))
View(livestock_production)
livestock_production <- livestock_selected %>%
mutate(number = as.numeric(herd_composition),
lwg_per_animal = as.numeric(annual_growth),
tlu = number*as.numeric(body_weight)/250,
total_lwg = number*lwg_per_animal,
meat = total_lwg*as.numeric(carcass_fraction),
energy_kcal_year_prod = meat*as.numeric(energy_meatcontent),
protein_kg_yr = meat*as.numeric(protein_meatcontent)/100,
milk_production_animal = as.numeric(annual_milk),
total_milk = as.numeric(annual_milk)*(0.337+(0.116*as.numeric(fat_content)+(0.06*as.numeric(protein_milkcontent)))),
energy_kcal_year = total_milk*as.numeric(energy_milkcontent)) %>%
select(-c(3:50))
View(livestock_production)
livestock_production <- livestock_selected %>%
mutate(number = as.numeric(herd_composition),
lwg_per_animal = as.numeric(annual_growth),
tlu = number*as.numeric(body_weight)/250,
total_lwg = number*lwg_per_animal,
meat = total_lwg*as.numeric(carcass_fraction),
energy_kcal_year_prod = meat*as.numeric(energy_meatcontent),
protein_kg_yr = meat*as.numeric(protein_meatcontent)/100,
milk_production_animal = as.numeric(annual_milk),
total_milk = as.numeric(annual_milk)*(0.337+(0.116*as.numeric(fat_content)+(0.06*as.numeric(protein_milkcontent)))),
energy_kcal_year = total_milk*as.numeric(energy_milkcontent),
protein_kg_year = total_milk*as.numeric(protein_milkcontent)/100) %>%
select(-c(3:50))
View(livestock_production)
livestock_df <- para[["livestock"]]
livestock_category_names <- c(livestock_df$livestock_category_name)
livestock_production <- list()
for (livestock in livestock_category_names){
livestock_selected <- livestock_df[livestock_df$livestock_category_name == livestock,]
livestock_selected <- na_if(livestock_selected, "NA") %>%
as.data.frame()
livestock_selected[is.na(livestock_selected)] <- 0
# prodution per livestock
livestock_production[[livestock]] <- livestock_selected %>%
mutate(number = as.numeric(herd_composition),
lwg_per_animal = as.numeric(annual_growth),
tlu = number*as.numeric(body_weight)/250,
parturition_interval = 0, # not available in the json file
total_lwg = number*lwg_per_animal,
meat = total_lwg*as.numeric(carcass_fraction),
energy_kcal_year_prod = meat*as.numeric(energy_meatcontent),
protein_kg_yr = meat*as.numeric(protein_meatcontent)/100,
milk_production_animal = as.numeric(annual_milk),
total_milk = as.numeric(annual_milk)*(0.337+(0.116*as.numeric(fat_content)+(0.06*as.numeric(protein_milkcontent)))),
energy_kcal_year = total_milk*as.numeric(energy_milkcontent),
protein_kg_year = total_milk*as.numeric(protein_milkcontent)/100) %>%
select(-c(3:50))
}
livestock_production_all <- livestock_production %>% bind_rows()
View(livestock_production_all)
# Compute meat and milk productivity
meat_milk_productivity <- meat_milk_productivity(para)
# clear your work space
rm(list = ls(all = TRUE))
# Load required packages
.packages = c("jsonlite","tidyverse", "lubridate", "data.table", "tidyr", "dplyr")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/example_JM_Test_1_1.json"),  flatten = TRUE)
# Feed quality calculation
feed_basket_quality <- feed_quality(para)
# Energy requirement
energy_required <- energy_requirement(para,feed_basket_quality)
# Land requirement
land_required <- land_requirement(feed_basket_quality, energy_required, para)
#soil erosion status
soil_erosion <- soil_health(para, land_required)
#water requirement
water_requirements <- water_requirement(para,land_required)
#Nitrogen balance
nitrogen_balance <- nitrogen_balance(para, land_required, soil_erosion)
# Compute meat and milk productivity
meat_milk_productivity <- meat_milk_productivity(para)
livestock_df <- para[["livestock"]]
livestock_category_names <- c(livestock_df$livestock_category_name)
livestock_production <- list()
livestock <- livestock_category_names[1]
livestock_selected <- livestock_df[livestock_df$livestock_category_name == livestock,]
livestock_selected <- na_if(livestock_selected, "NA") %>%
as.data.frame()
livestock_selected[is.na(livestock_selected)] <- 0
livestock_selected %>%
mutate(number = as.numeric(herd_composition),
lwg_per_animal = as.numeric(annual_growth),
tlu = number*as.numeric(body_weight)/250,
parturition_interval = 0, # not available in the json file
total_lwg = number*lwg_per_animal,
meat = total_lwg*as.numeric(carcass_fraction),
energy_kcal_year_prod = meat*as.numeric(energy_meatcontent),
protein_kg_yr = meat*as.numeric(protein_meatcontent)/100,
milk_production_animal = as.numeric(annual_milk)
livestock_selected %>%
mutate(number = as.numeric(herd_composition),
lwg_per_animal = as.numeric(annual_growth),
tlu = number*as.numeric(body_weight)/250,
parturition_interval = 0, # not available in the json file
total_lwg = number*lwg_per_animal,
meat = total_lwg*as.numeric(carcass_fraction),
energy_kcal_year_prod = meat*as.numeric(energy_meatcontent),
protein_kg_yr = meat*as.numeric(protein_meatcontent)/100,
milk_production_animal = as.numeric(annual_milk),
total_milk = as.numeric(annual_milk)*(0.337+(0.116*as.numeric(fat_content)+(0.06*as.numeric(protein_milkcontent)))),
energy_kcal_year = total_milk*as.numeric(energy_milkcontent)
livestock_selected %>%
mutate(number = as.numeric(herd_composition)
livestock_selected %>%
mutate(number = as.numeric(herd_composition)
