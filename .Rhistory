rename(ef3_non_roofed_enclosure=direct_nitrous_oxide_factor)%>%
left_join(table_10.21[,c(1,3)],by = c("manureman_offfarm_grazing"="system"))%>%
mutate(direct_nitrous_oxide_factor = ifelse(is.na(direct_nitrous_oxide_factor),0,direct_nitrous_oxide_factor))%>%
rename(ef3_offfarm_grazing=direct_nitrous_oxide_factor)%>%
left_join(table_10.21[,c(1,3)],by = c("manureman_onfarm_grazing"="system"))%>%
mutate(direct_nitrous_oxide_factor = ifelse(is.na(direct_nitrous_oxide_factor),0,direct_nitrous_oxide_factor))%>%
rename(ef3_onfarm_grazing=direct_nitrous_oxide_factor)%>%
mutate(direct_N2O_emission = ((n_excretion_rate*time_in_stable*ef3_stable)+(n_excretion_rate*time_in_non_roofed_enclosure*ef3_non_roofed_enclosure)+(n_excretion_rate*time_in_offfarm_grazing*ef3_offfarm_grazing)+(n_excretion_rate*time_in_onfarm_grazing*ef3_onfarm_grazing))*(44/28))#Equation 10.25
#################################################################################################################################
#Indirect N2O emissions
#Selecting FracGasMS and n2o emissions from managed soils EF4
table_10.22 <- ghg_ipcc_data[["Table 10.22"]]
FracGasMS <- direct_N2O%>%
mutate(indirect_n20_animal = ifelse(livetype_desc %in% dairy_cattle,"Dairy Cow",
ifelse(livetype_desc %in% non_dairy_cattle,"Other Cattle",
ifelse(grepl("Pigs",livetype_desc),"Swine","Other animals"))),
ef4 = ghg_ipcc_data[["table_11.1_&_table_11.3"]][ghg_ipcc_data[["table_11.1_&_table_11.3"]]$emission_factors=="EF4",4])%>%
left_join(table_10.22[,1:5],by = c("indirect_n20_animal"="livestock_category","manureman_stable"="system"))%>%
rename(FracGasMS_stable = FracGas_MS,
Frac_leach_MS_stable = Frac_leach_MS,
FracGas_MS_range_stable = FracGas_MS_range)%>%
left_join(table_10.22[,1:5],by = c("indirect_n20_animal"="livestock_category","manureman_non_roofed_enclosure"="system"))%>%
rename(FracGasMS_non_roofed_enclosure = FracGas_MS,
Frac_leach_MS_non_roofed_enclosure = Frac_leach_MS,
FracGas_MS_range_non_roofed_enclosure = FracGas_MS_range)%>%
left_join(table_10.22[,1:5],by = c("indirect_n20_animal"="livestock_category","manureman_offfarm_grazing"="system"))%>%
rename(FracGasMS_offfarm_grazing = FracGas_MS,
Frac_leach_MS_offfarm_grazing = Frac_leach_MS,
FracGas_MS_range_offfarm_grazing = FracGas_MS_range)%>%
left_join(table_10.22[,1:5],by = c("indirect_n20_animal"="livestock_category","manureman_onfarm_grazing"="system"))%>%
rename(FracGasMS_onfarm_grazing = FracGas_MS,
Frac_leach_MS_onfarm_grazing = Frac_leach_MS,
FracGas_MS_range_onfarm_grazing = FracGas_MS_range)%>%
mutate(FracGasMS_stable = ifelse(is.na(FracGasMS_stable),0,FracGasMS_stable),
Frac_leach_MS_stable = ifelse(is.na(Frac_leach_MS_stable),0,Frac_leach_MS_stable),
FracGasMS_non_roofed_enclosure = ifelse(is.na(FracGasMS_non_roofed_enclosure),0,FracGasMS_non_roofed_enclosure),
Frac_leach_MS_non_roofed_enclosure = ifelse(is.na(Frac_leach_MS_non_roofed_enclosure),0,Frac_leach_MS_non_roofed_enclosure),
FracGasMS_offfarm_grazing = ifelse(is.na(FracGasMS_offfarm_grazing),0,FracGasMS_offfarm_grazing),
Frac_leach_MS_offfarm_grazing = ifelse(is.na(Frac_leach_MS_offfarm_grazing),0,Frac_leach_MS_offfarm_grazing),
FracGasMS_onfarm_grazing = ifelse(is.na(FracGasMS_onfarm_grazing),0,FracGasMS_onfarm_grazing),
Frac_leach_MS_onfarm_grazing = ifelse(is.na(Frac_leach_MS_onfarm_grazing),0,Frac_leach_MS_onfarm_grazing))
#computing indirect N2O emissions
indirect_N2O <- FracGasMS%>%
mutate(n_volatilisation = ((n_excretion_rate*time_in_stable*FracGasMS_stable)+(n_excretion_rate*time_in_non_roofed_enclosure*FracGasMS_non_roofed_enclosure)+(n_excretion_rate*time_in_offfarm_grazing*FracGasMS_offfarm_grazing)+(n_excretion_rate*time_in_onfarm_grazing*FracGasMS_onfarm_grazing)), #equation 10.26
indirect_N2O_emission = n_volatilisation*ef4*44/28)#equation 10.28
#################################################################################################################################
#N flow calculations of total available N from manure for application to  fields
#Manure used as fertilizer
total_n_from_manure_mgmt <- indirect_N2O%>%
mutate(FracN2MS_stable = 3*ef3_stable, #equation 10.34B
FracN2MS_non_roofed_enclosure = 3*ef3_non_roofed_enclosure, #equation 10.34B
FracN2MS_offfarm_grazing = 3*ef3_offfarm_grazing, #equation 10.34B
FracN2MS_onfarm_grazing = 3*ef3_onfarm_grazing, #equation 10.34B
Frac_LOSS_MS_stable = FracGasMS_stable+Frac_leach_MS_stable+FracN2MS_stable+ef3_stable,  #equation 10.34A
Frac_LOSS_MS_non_roofed_enclosure = FracGasMS_non_roofed_enclosure+Frac_leach_MS_non_roofed_enclosure+FracN2MS_non_roofed_enclosure+ef3_non_roofed_enclosure, #equation 10.34A
Frac_LOSS_MS_offfarm_grazing = FracGasMS_offfarm_grazing+Frac_leach_MS_offfarm_grazing+FracN2MS_offfarm_grazing+ef3_offfarm_grazing, #equation 10.34A
Frac_LOSS_MS_onfarm_grazing = FracGasMS_onfarm_grazing+Frac_leach_MS_onfarm_grazing+FracN2MS_onfarm_grazing+ef3_onfarm_grazing, #equation 10.34A
total_n_from_manure_mgmt = ((n_excretion_rate*time_in_stable)*(1-Frac_LOSS_MS_stable))+((n_excretion_rate*time_in_non_roofed_enclosure)*(1-Frac_LOSS_MS_non_roofed_enclosure))+((n_excretion_rate*time_in_offfarm_grazing)*(1-Frac_LOSS_MS_offfarm_grazing))+((n_excretion_rate*time_in_onfarm_grazing)*(1-Frac_LOSS_MS_onfarm_grazing)))  #equation 10.34
###############################################################################################################################
#last calc in manure sheet
cattle_pig_poultry <- c("Cattle - Cows (local)","Cattle - Cows (improved)","Cattle - Cows (high productive)",
"Cattle - Adult male","Cattle - Steers/heifers","Cattle - Steers/heifers (improved)",
"Cattle - Calves","Cattle - Calves (improved)", "Buffalo - Cows","Buffalo - Steers/heifers",
"Buffalo - Steers/heifers","Buffalo - Calves","Pigs - lactating/pregnant sows",
"Pigs - dry sows/boars","Pigs - growers")
sheep_and_other <- c("Sheep - Ewes","Goats - Does","Sheep - Breeding Rams","Goats - Breeding Bucks","Sheep - Fattening Rams",
"Goats - Fattening Bucks","Sheep - Lambs","Goats - Kids")
cattle_pig_poultry_n_pasture <- dplyr::filter(total_n_from_manure_mgmt,livetype_desc%in%cattle_pig_poultry)%>%
mutate(onfarm = n_excretion_rate*time_in_onfarm_grazing,
off_farm = n_excretion_rate*time_in_offfarm_grazing)%>%
select(livestock_category_code,livetype_desc,onfarm,off_farm)
sheep_and_other_n_pasture <- dplyr::filter(total_n_from_manure_mgmt,livetype_desc%in%sheep_and_other)%>%
mutate(onfarm = n_excretion_rate*time_in_onfarm_grazing,
off_farm = n_excretion_rate*time_in_offfarm_grazing)%>%
select(livestock_category_code,livetype_desc,onfarm,off_farm)
#################################################################################################################################
#Crop parameters
#feed_items <- para[["feed_items"]]
feed_items <- land_required[["feed_items_frac"]] %>%
as.data.frame()
land_used <- land_required[["land_requirements_all"]]%>%
group_by(feed)%>%
summarise(area_total = sum(area_total, na.rm = T))
crop_parameters <- left_join(feed_items,land_used, by = c("feed_item_name"="feed"))
#################################################################################################################################
#GHG Soil
purchased_manure <- as.numeric(para[["purchased_manure"]])
purchased_compost <- as.numeric(para[["purchased_compost"]])
purchased_organic_n <-  as.numeric(para[["purchased_organic_n"]])
purchased_bedding <-  as.numeric(para[["purchased_bedding"]])
manure_produced <-  as.numeric(para[["manure_produced"]])
n_synthetic_fertilizer_managed_soil <- sum(nitrogen_balance$in1,na.rm = TRUE)
sum_total_n_from_manure_mgmt <- sum(total_n_from_manure_mgmt$total_n_from_manure_mgmt,na.rm = TRUE)
###############################################################################################################################
## Direct N emission
### Anthropogenic N input types to estimate annual direct N2O-N emissions produced from managed soils
n_organic_manure_managed_soil <- (purchased_manure+purchased_compost+purchased_organic_n+purchased_bedding+sum_total_n_from_manure_mgmt)-manure_produced
n_from_crop_residues <- crop_parameters%>%
mutate(fraction_crop_residue = 1-(residue_removal+residue_burnt),
dm_per_ha = fresh_yield*dm_content,
crop_residue_n_per_area = dm_per_ha*residue_n*1000,
n_from_crop_residue = area_total*fraction_crop_residue*crop_residue_n_per_area)
n_from_crop_residue_managed_soil <- sum(n_from_crop_residues$crop_residue_n_per_area,na.rm = TRUE)
emission_factor_managed_soil <- "EF1"
n_managed_soil <- data.frame(rbind(n_synthetic_fertilizer_managed_soil, n_organic_manure_managed_soil, n_from_crop_residue_managed_soil))%>%
tibble::rownames_to_column()%>%
mutate(emission_factor_managed_soil)
names(n_managed_soil) <- c("anthropogenic_N_input","amount_of_N_applied","emission_factors")
###############################################################################################################################
### Anthropogenic N input types to estimate annual direct N2O-N emissions produced from flooded rice
#N from rice
rice <- dplyr::filter(crop_parameters,grepl('Rice', feed_item_name))
if(nrow(rice)>0){
if (rice$source_type!="Purchased"){
rice_2 <- rice%>%
mutate(n_synthetic_fertilizer = fertilizer_rate*area_total)
n_synthetic_fertilizer_flooded_rice <- sum(rice_2$n_synthetic_fertilizer,na.rm = TRUE)
}else{n_synthetic_fertilizer_flooded_rice <- 0}
}else{n_synthetic_fertilizer_flooded_rice <- 0}
n_organic_manure_flooded_rice <- NA
n_from_crop_residue_flooded_rice <- NA
emission_factor_flooded_rice <- "EF1R"
n_flooded_rice <- data.frame(rbind(n_synthetic_fertilizer_flooded_rice, n_organic_manure_flooded_rice, n_from_crop_residue_flooded_rice))%>%
tibble::rownames_to_column()%>%
mutate(emission_factor_flooded_rice)
names(n_flooded_rice) <- c("anthropogenic_N_input","amount_of_N_applied","emission_factors")
###############################################################################################################################
### Anthropogenic N input type from Urine and dung inputs to grazed soils
cattle_pig_poultry_n_pasture_onfarm <-sum(cattle_pig_poultry_n_pasture$onfarm,na.rm = TRUE)
sheep_and_other_n_pasture_onfarm <- sum(sheep_and_other_n_pasture$onfarm,na.rm = TRUE)
emission_factor_grazed_soils <- c("EF3PRP-CPP","EF3PRP-SO")
n_grazed_soils <- data.frame(rbind(cattle_pig_poultry_n_pasture_onfarm, sheep_and_other_n_pasture_onfarm))%>%
tibble::rownames_to_column()%>%
mutate(emission_factor_grazed_soils)
names(n_grazed_soils) <- c("anthropogenic_N_input","amount_of_N_applied","emission_factors")
annual_N20N_onfarm_direct_emission <- data.frame(rbind(n_managed_soil,n_flooded_rice,n_grazed_soils))%>%
left_join(ghg_ipcc_data[["table_11.1_&_table_11.3"]],by="emission_factors")%>%
mutate(annual_N20N_direct_emission_from_managed_soil = amount_of_N_applied*n2o_emissions_from_managed_soils*(44/28))
###############################################################################################################################
## Indirect N emission
organic_n <- sum(n_organic_manure_managed_soil,n_from_crop_residue_managed_soil,n_organic_manure_flooded_rice,n_from_crop_residue_flooded_rice,na.rm = TRUE)
n_pasture_onfarm <- sum(cattle_pig_poultry_n_pasture_onfarm,sheep_and_other_n_pasture_onfarm,na.rm = TRUE)
N20_indirect_emission <- as.data.frame(cbind(n_synthetic_fertilizer_managed_soil,
organic_n,
n_pasture_onfarm))
names(N20_indirect_emission) <- c("n_synthetic_fertilizer_managed_soil","n_organic","n_pasture_onfarm")
FracGASF <- dplyr::filter(ghg_ipcc_data[["table_11.1_&_table_11.3"]],emission_factors == "FracGASF")
FracGASM <- dplyr::filter(ghg_ipcc_data[["table_11.1_&_table_11.3"]],emission_factors == "FracGASM")
EF4 <- dplyr::filter(ghg_ipcc_data[["table_11.1_&_table_11.3"]],emission_factors == "EF4")
EF3PRP_CPP <- dplyr::filter(ghg_ipcc_data[["table_11.1_&_table_11.3"]],emission_factors == "EF3PRP-CPP")
EF3PRP_SO <- dplyr::filter(ghg_ipcc_data[["table_11.1_&_table_11.3"]],emission_factors == "EF3PRP-SO")
N20_onfarm_indirect_emission <- N20_indirect_emission%>%
mutate(FracGASF = FracGASF$n2o_emissions_from_managed_soils,
FracGASM = FracGASM$n2o_emissions_from_managed_soils,
EF4 = EF4$n2o_emissions_from_managed_soils,
annual_N20N_from_atmospheric_deposition = ((n_synthetic_fertilizer_managed_soil*FracGASF)+((n_organic+n_pasture_onfarm)*FracGASM))*EF4*(44/28))
###############################################################################################################################
## Off-farm soil
cattle_pig_poultry_n_pasture_off_farm <-sum(cattle_pig_poultry_n_pasture$off_farm,na.rm = TRUE)
sheep_and_other_n_pasture_off_farm <- sum(sheep_and_other_n_pasture$off_farm,na.rm = TRUE)
N20N_off_farm <- data.frame(rbind(cattle_pig_poultry_n_pasture_off_farm,sheep_and_other_n_pasture_off_farm))%>%
tibble::rownames_to_column()%>%
rename(category = rowname,n_off_farm_pasture = rbind.cattle_pig_poultry_n_pasture_off_farm..sheep_and_other_n_pasture_off_farm.)%>%
mutate(EF3PRP = ifelse(grepl("cattle",category),EF3PRP_CPP$n2o_emissions_from_managed_soils,EF3PRP_SO$n2o_emissions_from_managed_soils),
annual_N20N_off_farm_direct_emission =n_off_farm_pasture*EF3PRP,
FracGASM = FracGASM$n2o_emissions_from_managed_soils,
EF4 = EF4$n2o_emissions_from_managed_soils,
annual_N20N_from_atmospheric_deposition =annual_N20N_off_farm_direct_emission*FracGASM*EF4*(44/28))
ghg_soil <- list(annual_N20N_onfarm_direct_emission = annual_N20N_onfarm_direct_emission,
N20_onfarm_indirect_emission = N20_onfarm_indirect_emission,
N20N_off_farm = N20N_off_farm)
################################################################################################################################################################################################################################
#GHG Burning
residue_burn <- crop_parameters%>%
mutate(amnt_crop_residue_burnt = residue_dry_yield*residue_burnt*area_total)
mass_residue_burn <- sum(residue_burn$amnt_crop_residue_burnt,na.rm = TRUE)
combusion_factor <- 0.80
ghg_burn <- ghg_ipcc_data[["table_2.5"]]%>%
mutate(mass_residue_burn,
combusion_factor,
amount_of_ghg_emission_from_fire = mass_residue_burn*combusion_factor*burnt_emission_factor)#equation 2.27
################################################################################################################################################################################################################################
#GHG off-farm
if(length(para[["fertilizer"]]) == 0) {
fertlizer_ghg_emissions_per_ha <- 0
}else{
fertlizer_parameters <- para[["fertilizer"]]%>%
left_join(ghg_ipcc_data[["fertilizer_table"]], by=c("fertilizer_desc"="fertilizer_type"))%>%
mutate(fertlizer_ghg_emissions = quantity*emissions_factor_kg_CO2_eq_per_kg_fertilizer)
fertlizer_ghg_emissions_per_ha <- sum(fertlizer_parameters$fertlizer_ghg_emissions,na.rm = TRUE)/sum(land_used$area_total,na.rm = TRUE)
fetilizer_ghg <- list(fertlizer_parameters=fertlizer_parameters,
fertlizer_ghg_emissions_per_ha = fertlizer_ghg_emissions_per_ha)
}
################################################################################################################################################################################################################################
#GHG Rice
#filter rice feed
rice <- dplyr::filter(crop_parameters,grepl('Rice', feed_type_name))
if(nrow(rice)>0) {
if (rice$source_type!="Purchased") {
baseline_emission_factor <- ghg_ipcc_data[["table_5.11"]]$baseline_emission_factor
soil_type_scaling_factor <- ghg_ipcc_data[["table_5.11"]]$soil_type_scaling_factor
ghg_rice <- left_join(rice,land_used, by=c("feed_type_name"="feed"))%>%
left_join(ghg_ipcc_data[["table_5.12"]],by="ecosystem_type")%>%
left_join(ghg_ipcc_data[["table_5.13"]],by="water_regime")%>%
left_join(ghg_ipcc_data[["table_5.14"]],by="organic_amendment")%>%
mutate(baseline_emission_factor,
soil_type_scaling_factor,
Scaling_factor_for_both_types = (1+(fertilizer_rate*conversion_factor))^0.59,#equation 5.3
daily_emission = baseline_emission_factor*disaggregated_scaling_factor_w*disaggregated_scaling_factor_p*Scaling_factor_for_both_types*soil_type_scaling_factor,#equation 5.3
annual_methane_emission = area_total*cultivation_period*daily_emission)%>%
select(-residue_dry_yield,-residue_burnt)
}else{ghg_rice <- data.frame(annual_methane_emission = 0,message=c("rice is purchased"))}
}else{ghg_rice <- data.frame(annual_methane_emission = 0,message=c("no rice in feed basket"))}
################################################################################################################################################################################################################################
#GHG data merge
Methane	<- 28
N2O	<- 265
Enteric_fermentation_Methane <- sum(ef$enteric_methane_emissions,na.rm = T)/sum(land_used$area_total,na.rm = T)
Manure_Methane <- sum(eft$emission_factor,na.rm = T)/sum(land_used$area_total,na.rm = T)
Manure_Direct_N2O <- sum(direct_N2O$direct_N2O_emission,na.rm = T)/sum(land_used$area_total,na.rm = T)
Manure_Indirect_N2O <- sum(indirect_N2O$indirect_N2O_emission,na.rm = T)/sum(land_used$area_total,na.rm = T)
Soil_Direct_N2O <- sum(annual_N20N_onfarm_direct_emission$annual_N20N_direct_emission_from_managed_soil,na.rm = T)/sum(land_used$area_total,na.rm = T)
Soil_Indirect_N2O <- sum(N20_onfarm_indirect_emission$annual_N20N_from_atmospheric_deposition,na.rm = T)/sum(land_used$area_total,na.rm = T)
OFF_Farm_Soil_Direct_N2O <- sum(N20N_off_farm$annual_N20N_off_farm_direct_emission,na.rm = T)/sum(land_used$area_total,na.rm = T)
OFF_Farm_Soil_Indirect_N2O <- sum(N20N_off_farm$annual_N20N_from_atmospheric_deposition,na.rm = T)/sum(land_used$area_total,na.rm = T)
Burning <- ((ghg_burn[ghg_burn$ghg_gas=="CO2",5])+(ghg_burn[ghg_burn$ghg_gas=="CH4",5]*Methane)+(ghg_burn[ghg_burn$ghg_gas=="Nox",5]*N2O))/sum(land_used$area_total,na.rm = T)
Rice_production_Methane <- sum(ghg_rice$annual_methane_emission,na.rm = T)
Off_farm_emissions <- fertlizer_ghg_emissions_per_ha
ghg_emissions <- data.frame(rbind(Enteric_fermentation_Methane,
Manure_Methane,
Manure_Direct_N2O,
Manure_Indirect_N2O,
Soil_Direct_N2O,
Soil_Indirect_N2O,
OFF_Farm_Soil_Direct_N2O,
OFF_Farm_Soil_Indirect_N2O,
Burning,
Rice_production_Methane,
Off_farm_emissions))%>%
tibble::rownames_to_column()%>%
rename(GHG_balance = rowname,kg_per_ha = rbind.Enteric_fermentation_Methane..Manure_Methane..Manure_Direct_N2O..)
return(ghg_emissions)
} #end of ghg function
View(ghg_emissions)
View(land_required)
View(land_required[[1]])
View(land_required[[2]])
View(water_required)
View(water_required[[1]])
livestock_category_code <- unique(feed_basket_quality$livestock_category_code)
livestock_requirements <- list()
livestock_category_code
livestock = "20"
livestock_selected <- feed_basket_quality %>%
dplyr::filter(livestock_category_code == livestock)
seasons <- unique(feed_basket_quality$season_name)
seasonal_requirements <- list()
seasons
season = "Season 1"
# select feed and transpose the data
season_feeds <- livestock_selected %>%
dplyr::filter(season_name == season) %>%
gather(feed,value,-season_name,-livestock_category_code,-livestock_category_name,-feed_variables)%>%
spread(feed_variables,value)
# select form energy requirment sheet
season_selected_energy <- energy_required[["seasonal_results"]] %>%
as.data.frame() %>%
dplyr::filter(livestock_category_code == livestock, season_name == season)
# replace NAs, Inf etc
season_selected_energy <- season_selected_energy %>%
dplyr::mutate_if(is.numeric, list(~na_if(.,Inf))) %>%
replace(is.na(.), 0)
feed_items <- unique(season_feeds$feed)
land_requirements <- list()
feed_items_frac <- list()
feed_items
i = "Banana leaves"
# select feed item
feed_item_selected <- unnest(para[["feed_items"]], cols = c(feed_type_name)) %>%
dplyr::filter(feed_item_name == i)
# selected feed from season feeds above
selected_feed <- season_feeds[season_feeds$feed == i,]
feed_items_frac[[i]] <- feed_item_selected
land_requirements[[
land_requirements[[i]] <- selected_feed %>%
mutate(feed_item_dm = selected_feed$fraction_dry_matter*season_selected_energy$dmi_s,
crop_yield = as.numeric(feed_item_selected$dry_yield)*1000,
crop_removal = as.numeric(feed_item_selected$main_product_removal),
cr_yield = as.numeric(feed_item_selected$residue_dry_yield)*1000,
crop_residue_removal = ifelse(feed_item_selected$source_type == "Residue",
as.numeric(feed_item_selected$residue_removal), 0),
area_total = ifelse(feed_item_selected$source_type == "Main",
feed_item_dm/(crop_yield*crop_removal)-feed_item_selected$intercrop*(feed_item_selected$intercrop_fraction)*feed_item_dm/(crop_yield*crop_removal),
ifelse(feed_item_dm/(cr_yield*crop_residue_removal)-feed_item_selected$intercrop*(feed_item_selected$intercrop_fraction)*feed_item_dm/(cr_yield*crop_residue_removal), 0)),
area_non_feed = ifelse(crop_residue_removal > 0,
area_total*(crop_yield*crop_removal)/(crop_yield*crop_removal+cr_yield*crop_residue_removal), 0),
area_feed = ifelse(crop_residue_removal > 0,
area_total*(cr_yield*crop_residue_removal)/(crop_yield*crop_removal+cr_yield*crop_residue_removal),
area_total*(crop_yield*crop_removal+cr_yield*crop_residue_removal)/(crop_yield*crop_removal+cr_yield*crop_residue_removal)),
rough_of = ifelse(stringr::str_detect(selected_feed$feed, "OFR"), area_feed, 0),
conc_of = ifelse(stringr::str_detect(selected_feed$feed, "OFC"), area_feed, 0),
conc_ip = ifelse(stringr::str_detect(selected_feed$feed, "IP"), area_feed, 0),
farm = sum(area_feed, rough_of, conc_of, conc_ip),
grasses = ifelse(feed_item_selected$category == "grass", area_feed, 0),
tree_legume = ifelse(feed_item_selected$category == "tree crop" | feed_item_selected$category == "tree legume", area_feed, 0)) %>%
dplyr::mutate_if(is.numeric, list(~na_if(.,Inf))) %>%
replace(is.na(.), 0)
View(land_requirements)
View(land_requirements[[1]])
feed_item_dm = selected_feed$fraction_dry_matter*season_selected_energy$dmi_s
feed_item_dm
feed_item_selected$dry_yield
feed_item_selected$main_product_removal
feed_item_selected$residue_dry_yield
feed_item_selected$source_type
feed_item_selected$residue_removal
feed_item_selected$intercrop*(feed_item_selected$intercrop_fraction)
feed_item_dm = selected_feed$fraction_dry_matter*season_selected_energy$dmi_s
crop_yield = as.numeric(feed_item_selected$dry_yield)*1000
crop_removal = as.numeric(feed_item_selected$main_product_removal)
cr_yield = as.numeric(feed_item_selected$residue_dry_yield)*1000
crop_residue_removal = ifelse(feed_item_selected$source_type == "Residue",
as.numeric(feed_item_selected$residue_removal), 0)
area_total = ifelse(feed_item_selected$source_type == "Main",
feed_item_dm/(crop_yield*crop_removal)-feed_item_selected$intercrop*(feed_item_selected$intercrop_fraction)*feed_item_dm/(crop_yield*crop_removal),
ifelse(feed_item_dm/(cr_yield*crop_residue_removal)-feed_item_selected$intercrop*(feed_item_selected$intercrop_fraction)*feed_item_dm/(cr_yield*crop_residue_removal), 0))
area_total
feed_item_dm/(crop_yield*crop_removal)-feed_item_selected$intercrop*(feed_item_selected$intercrop_fraction)*feed_item_dm/(crop_yield*crop_removal)
feed_item_dm/(cr_yield*crop_residue_removal)-feed_item_selected$intercrop*(feed_item_selected$intercrop_fraction)*feed_item_dm/(cr_yield*crop_residue_removal)
land_requirements[[i]] <- selected_feed %>%
mutate(feed_item_dm = selected_feed$fraction_dry_matter*season_selected_energy$dmi_s,
crop_yield = as.numeric(feed_item_selected$dry_yield)*1000,
crop_removal = as.numeric(feed_item_selected$main_product_removal),
cr_yield = as.numeric(feed_item_selected$residue_dry_yield)*1000,
crop_residue_removal = ifelse(feed_item_selected$source_type == "Residue",
as.numeric(feed_item_selected$residue_removal), 0),
area_total = ifelse(feed_item_selected$source_type == "Main",
feed_item_dm/(crop_yield*crop_removal)-feed_item_selected$intercrop*(feed_item_selected$intercrop_fraction)*feed_item_dm/(crop_yield*crop_removal),
ifelse(feed_item_selected$source_type == "Residue",
feed_item_dm/(cr_yield*crop_residue_removal)-feed_item_selected$intercrop*(feed_item_selected$intercrop_fraction)*feed_item_dm/(cr_yield*crop_residue_removal), 0)),
area_non_feed = ifelse(crop_residue_removal > 0,
area_total*(crop_yield*crop_removal)/(crop_yield*crop_removal+cr_yield*crop_residue_removal), 0),
area_feed = ifelse(crop_residue_removal > 0,
area_total*(cr_yield*crop_residue_removal)/(crop_yield*crop_removal+cr_yield*crop_residue_removal),
area_total*(crop_yield*crop_removal+cr_yield*crop_residue_removal)/(crop_yield*crop_removal+cr_yield*crop_residue_removal)),
rough_of = ifelse(stringr::str_detect(selected_feed$feed, "OFR"), area_feed, 0),
conc_of = ifelse(stringr::str_detect(selected_feed$feed, "OFC"), area_feed, 0),
conc_ip = ifelse(stringr::str_detect(selected_feed$feed, "IP"), area_feed, 0),
farm = sum(area_feed, rough_of, conc_of, conc_ip),
grasses = ifelse(feed_item_selected$category == "grass", area_feed, 0),
tree_legume = ifelse(feed_item_selected$category == "tree crop" | feed_item_selected$category == "tree legume", area_feed, 0)) %>%
dplyr::mutate_if(is.numeric, list(~na_if(.,Inf))) %>%
replace(is.na(.), 0)
View(land_requirements)
View(land_requirements[[1]])
season
seasons
season = "Season 2"
# select feed and transpose the data
season_feeds <- livestock_selected %>%
dplyr::filter(season_name == season) %>%
gather(feed,value,-season_name,-livestock_category_code,-livestock_category_name,-feed_variables)%>%
spread(feed_variables,value)
# select form energy requirment sheet
season_selected_energy <- energy_required[["seasonal_results"]] %>%
as.data.frame() %>%
dplyr::filter(livestock_category_code == livestock, season_name == season)
# replace NAs, Inf etc
season_selected_energy <- season_selected_energy %>%
dplyr::mutate_if(is.numeric, list(~na_if(.,Inf))) %>%
replace(is.na(.), 0)
feed_items <- unique(season_feeds$feed)
land_requirements <- list()
feed_items_frac <- list()
i
# select feed item
feed_item_selected <- unnest(para[["feed_items"]], cols = c(feed_type_name)) %>%
dplyr::filter(feed_item_name == i)
# selected feed from season feeds above
selected_feed <- season_feeds[season_feeds$feed == i,]
feed_items_frac[[i]] <- feed_item_selected
land_requirements[[i]] <- selected_feed %>%
mutate(feed_item_dm = selected_feed$fraction_dry_matter*season_selected_energy$dmi_s,
crop_yield = as.numeric(feed_item_selected$dry_yield)*1000,
crop_removal = as.numeric(feed_item_selected$main_product_removal),
cr_yield = as.numeric(feed_item_selected$residue_dry_yield)*1000,
crop_residue_removal = ifelse(feed_item_selected$source_type == "Residue",
as.numeric(feed_item_selected$residue_removal), 0),
area_total = ifelse(feed_item_selected$source_type == "Main",
feed_item_dm/(crop_yield*crop_removal)-feed_item_selected$intercrop*(feed_item_selected$intercrop_fraction)*feed_item_dm/(crop_yield*crop_removal),
ifelse(feed_item_selected$source_type == "Residue",
feed_item_dm/(cr_yield*crop_residue_removal)-feed_item_selected$intercrop*(feed_item_selected$intercrop_fraction)*feed_item_dm/(cr_yield*crop_residue_removal), 0)),
area_non_feed = ifelse(crop_residue_removal > 0,
area_total*(crop_yield*crop_removal)/(crop_yield*crop_removal+cr_yield*crop_residue_removal), 0),
area_feed = ifelse(crop_residue_removal > 0,
area_total*(cr_yield*crop_residue_removal)/(crop_yield*crop_removal+cr_yield*crop_residue_removal),
area_total*(crop_yield*crop_removal+cr_yield*crop_residue_removal)/(crop_yield*crop_removal+cr_yield*crop_residue_removal)),
rough_of = ifelse(stringr::str_detect(selected_feed$feed, "OFR"), area_feed, 0),
conc_of = ifelse(stringr::str_detect(selected_feed$feed, "OFC"), area_feed, 0),
conc_ip = ifelse(stringr::str_detect(selected_feed$feed, "IP"), area_feed, 0),
farm = sum(area_feed, rough_of, conc_of, conc_ip),
grasses = ifelse(feed_item_selected$category == "grass", area_feed, 0),
tree_legume = ifelse(feed_item_selected$category == "tree crop" | feed_item_selected$category == "tree legume", area_feed, 0)) %>%
dplyr::mutate_if(is.numeric, list(~na_if(.,Inf))) %>%
replace(is.na(.), 0)
View(land_requirements)
View(land_requirements)
View(land_requirements[[1]])
feed_items
selected_feed
View(selected_feed)
library(cleaned)
rm(list = ls())
para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
ghg_ipcc_data <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
energy_parameters <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
stock_change_para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
feed_basket_quality <- feed_quality(para)
energy_required <- energy_requirement(para,feed_basket_quality,energy_parameters)
land_required <- land_requirement(feed_basket_quality, energy_required, para)
soil_erosion <- soil_health(para, land_required)
water_required <- water_requirement(para, land_required)
nitrogen_balance <- n_balance(para, land_required, soil_erosion)
livestock_productivity <- land_productivity(para)
economics <- economics_payback(para, energy_required, livestock_productivity)
biomass <- biomass_calculation(para, land_required)
soil_carbon <- soil_organic_carbon(para, stock_change_para, land_required, biomass)
ghg_emissions <- ghg_emission(para,energy_required,ghg_ipcc_data,land_required,nitrogen_balance)
lb <-  combineOutputs(feed_basket_quality,energy_required,land_required,soil_erosion,water_required,
nitrogen_balance,livestock_productivity,economics,biomass,soil_carbon,ghg_emissions)
para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
feed_basket_quality <- feed_quality(para)
energy_required <- energy_requirement(para,feed_basket_quality,energy_parameters)
land_required <- land_requirement(feed_basket_quality, energy_required, para)
soil_erosion <- soil_health(para, land_required)
water_required <- water_requirement(para, land_required)
nitrogen_balance <- n_balance(para, land_required, soil_erosion)
livestock_productivity <- land_productivity(para)
economics <- economics_payback(para, energy_required, livestock_productivity)
biomass <- biomass_calculation(para, land_required)
soil_carbon <- soil_organic_carbon(para, stock_change_para, land_required, biomass)
ghg_emissions <- ghg_emission(para,energy_required,ghg_ipcc_data,land_required,nitrogen_balance)
bp <-  combineOutputs(feed_basket_quality,energy_required,land_required,soil_erosion,water_required,
nitrogen_balance,livestock_productivity,economics,biomass,soil_carbon,ghg_emissions)
diff <- calculate_differences(lb,bp)
View(diff)
calculate_differences <- function(...){
outputList <- list(...)
if (length(outputList)==0) {
stop("No files in source directory")
} else {
scenarioList <- list()
for (i in 1:length(outputList)){
scenario <- i
output <- jsonlite::fromJSON(outputList[[i]], flatten = TRUE)
nitrogen_balance <- output[["nitrogen_balance"]]
soil_mining_perc <- sum(nitrogen_balance[nitrogen_balance$area_total > 0.9,]$area_total)*100/sum(nitrogen_balance$area_total)
soil_leaching_perc <- sum(nitrogen_balance[nitrogen_balance$area_total < 0.5,]$area_total)*100/sum(nitrogen_balance$area_total)
erosion_tyr <- sum(as.numeric(output[["soil_erosion"]]$soil_loss_plot))
land_required <- output[["land_required"]] %>%
dplyr::bind_rows()
erosion_thayr <- sum(land_required$area_feed)/erosion_tyr
average_annual_milk_kg_yr <- sum(output[["livestock_productivity"]]$total_milk)
erosion_kgsoil_kg_fpcm <- ifelse(is.na(erosion_tyr/sum(output[["livestock_productivity"]]$total_milk)), 0, erosion_tyr/sum(output[["livestock_productivity"]]$total_milk))*1000
land_requirement_ha <- sum(land_required$area_feed)
total_land_required_ha_mt_fpcm <- ifelse(is.na(land_requirement_ha/sum(output[["livestock_productivity"]]$total_milk)), 0, land_requirement_ha/sum(output[["livestock_productivity"]]$total_milk))*1000
ghg_emission <- output[["ghg_emission"]]
ghgtot_t_co2eq_yr <- (sum(ghg_emission$kg_per_ha,na.rm = T)/1000)*land_requirement_ha
ghgtot_t_co2eq_ha_yr <- sum(ghg_emission$kg_per_ha,na.rm = T)/1000
ghgmeat_kg_co2eq_kg <- ifelse(is.na(ghgtot_t_co2eq_yr/sum(output[["livestock_productivity"]]$meat_production_animal)), 0, ghgtot_t_co2eq_yr/sum(output[["livestock_productivity"]]$meat_production_animal))
ghgmilk_kg_co2eq_kg <- ifelse(is.na(ghgtot_t_co2eq_yr/sum(output[["livestock_productivity"]]$total_milk)), 0, ghgtot_t_co2eq_yr/sum(output[["livestock_productivity"]]$total_milk))
tot_protein_kg_year_meat <- sum(output[["livestock_productivity"]]$protein_kg_year_meat)
tot_protein_kg_year_milk <- sum(output[["livestock_productivity"]]$protein_kg_year_milk)
ghgprotein_kg_co2eq_kg <- ifelse(tot_protein_kg_year_meat==0 & tot_protein_kg_year_milk == 0,0,
ifelse(tot_protein_kg_year_meat==0 & tot_protein_kg_year_milk != 0, ghgtot_t_co2eq_yr/tot_protein_kg_year_milk,
ifelse(tot_protein_kg_year_meat!=0 & tot_protein_kg_year_milk == 0,ghgtot_t_co2eq_yr/tot_protein_kg_year_meat,
(ghgtot_t_co2eq_yr/tot_protein_kg_year_milk)+(ghgtot_t_co2eq_yr/tot_protein_kg_year_meat))))
water_requirement <- output[["water_required"]]
percent_of_precipitation_used_for_feed_production <- water_requirement[["water_use_for_production"]][which(water_requirement[["water_use_for_production"]]$Names=="fraction_of_precipitation_used_for_feed_production"),2]*100
water_m3_yr <- water_requirement[["water_use_for_production"]][which(water_requirement[["water_use_for_production"]]$Names=="total_water_use"),2]
waterha_m3_ha <- water_m3_yr/sum(land_required$area_feed)
water_use_perkg_fpcm <- water_requirement[["water_use_for_production"]][which(water_requirement[["water_use_for_production"]]$Names=="water_use_fpcm"),2]
water_use_perkg_meat <- water_requirement[["water_use_for_production"]][which(water_requirement[["water_use_for_production"]]$Names=="water_use_meat"),2]
water_use_perkg_protein <- water_requirement[["water_use_for_production"]][which(water_requirement[["water_use_for_production"]]$Names=="water_use_protein"),2]
scenarioList[[i]] <- data.frame(scenario,
average_annual_milk_kg_yr,
soil_mining_perc,
soil_leaching_perc,
erosion_tyr,
erosion_thayr,
erosion_kgsoil_kg_fpcm,
land_requirement_ha,
total_land_required_ha_mt_fpcm,
ghgtot_t_co2eq_yr,
ghgtot_t_co2eq_ha_yr,
ghgmilk_kg_co2eq_kg,
ghgmeat_kg_co2eq_kg,
ghgprotein_kg_co2eq_kg,
percent_of_precipitation_used_for_feed_production,
water_m3_yr,
waterha_m3_ha,
water_use_perkg_fpcm,
water_use_perkg_meat,
water_use_perkg_protein)
}
}
results <- scenarioList %>% dplyr::bind_rows()
return(jsonlite::toJSON(results, pretty = TRUE))
}
diff <- calculate_differences(lb,bp)
library(cleaned)
exp(0.54)
