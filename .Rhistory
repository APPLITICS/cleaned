select(-feed_item_code)
View(feed_allocation_all_feed_types)
feed_allocation <- list()
for (i in 1:length(feed_types)){
feed_selected <- feed_production %>% filter(feed_type_name %in% feed_production$feed_type_name[i])
feed_item <- as.data.frame(feed_selected[["feed_items"]])
feed_item <- feed_item %>% select(feed_item_code, feed_item_name, cp_content, me_content,
dm_content)
# Convert columns of interest to numeric
feed_item <- feed_item %>%
mutate_at(c("cp_content", "me_content", "dm_content"), as.numeric) %>%
mutate(de_fraction = me_content*0.066) # calculate de content
# Extracting allocation
feeding_seasons <- unnest(para[["livestock_feeding_seasons"]],
cols = c(livestock_categories)) %>% filter(season_name %in%
seasons$season_name[season])
feeding_seasons <- feeding_seasons %>%
mutate(livestock_category_name =
ifelse(livestock_category_code %in% "01", "Cows (local)",
ifelse(livestock_category_code %in% "02", "Cows (improved)",
ifelse(livestock_category_code %in% "03", "Adult cattle - male",
ifelse(livestock_category_code %in% "04", "Calves",
ifelse(livestock_category_code %in% "05", "Buffalo (dairy)",
ifelse(livestock_category_code %in% "06", "Sheep/Goats - Ewes/Does",
ifelse(livestock_category_code %in% "07", "Pigs - lactating/pregnant sows",
ifelse(livestock_category_code %in% "08", "Calves",
ifelse(livestock_category_code %in% "09", "Cows (high productive)", "Error"))))))))))
livestock_selected <- feeding_seasons[feeding_seasons$livestock_category_code==livestock,]
feed_item_select <- as.data.frame(livestock_selected[["allocation:"]])
# select feed item
feed_item_selected <- feed_item_select[feed_item_select$feed_item_code==feed_item$feed_item_code,]
feed_allocation[[i]] <-  feed_item %>%
mutate(fraction_as_fed = as.numeric(feed_item_selected$allocation)/100)
}
# bind by rows
feed_allocation_all_feed_types <- feed_allocation %>%
bind_rows() %>%
select(-feed_item_code)
# bind by rows
feed_allocation_all <- feed_allocation %>%
bind_rows() %>%
select(-feed_item_code)
feed_allocation_all <- feed_allocation_all %>%
gather(feed_variables, value, cp_content:fraction_as_fed) %>%
spread(feed_item_name, value)
View(feed_allocation_all_feed_types)
View(feed_allocation_all)
names(feed_allocation_all)
feed_allocation_all <- cbind(season_name=rep(livestock_selected$season_name, times=nrow(feed_allocation)),
livestock_category_name=rep(livestock_selected$livestock_category_name, times=nrow(feed_allocation)), feed_allocation)
livestock_selected$season_name
livestock_selected$livestock_category_name
feed_allocation_all <- cbind(season_name=rep(livestock_selected$season_name, times=nrow(feed_allocation_all)),
livestock_category_name=rep(livestock_selected$livestock_category_name, times=nrow(feed_allocation_all)), feed_allocation_all)
View(feed_allocation_all)
season
season_allocation <- list()
for (season in 1:nrow(seasons)){
feed_production <- unnest(para[["feed_production"]], cols = c(feed_type_name))
feed_types <- unique(feed_production$feed_type_name)
feed_allocation <- list()
for (i in 1:length(feed_types)){
feed_selected <- feed_production %>% filter(feed_type_name %in% feed_production$feed_type_name[i])
feed_item <- as.data.frame(feed_selected[["feed_items"]])
feed_item <- feed_item %>% select(feed_item_code, feed_item_name, cp_content, me_content,
dm_content)
# Convert columns of interest to numeric
feed_item <- feed_item %>%
mutate_at(c("cp_content", "me_content", "dm_content"), as.numeric) %>%
mutate(de_fraction = me_content*0.066) # calculate de content
# Extracting allocation
feeding_seasons <- unnest(para[["livestock_feeding_seasons"]],
cols = c(livestock_categories)) %>% filter(season_name %in%
seasons$season_name[season])
feeding_seasons <- feeding_seasons %>%
mutate(livestock_category_name =
ifelse(livestock_category_code %in% "01", "Cows (local)",
ifelse(livestock_category_code %in% "02", "Cows (improved)",
ifelse(livestock_category_code %in% "03", "Adult cattle - male",
ifelse(livestock_category_code %in% "04", "Calves",
ifelse(livestock_category_code %in% "05", "Buffalo (dairy)",
ifelse(livestock_category_code %in% "06", "Sheep/Goats - Ewes/Does",
ifelse(livestock_category_code %in% "07", "Pigs - lactating/pregnant sows",
ifelse(livestock_category_code %in% "08", "Calves",
ifelse(livestock_category_code %in% "09", "Cows (high productive)", "Error"))))))))))
livestock_selected <- feeding_seasons[feeding_seasons$livestock_category_code==livestock,]
feed_item_select <- as.data.frame(livestock_selected[["allocation:"]])
# select feed item
feed_item_selected <- feed_item_select[feed_item_select$feed_item_code==feed_item$feed_item_code,]
feed_allocation[[i]] <-  feed_item %>%
mutate(fraction_as_fed = as.numeric(feed_item_selected$allocation)/100)
}
# Bind by rows
feed_allocation_all <- feed_allocation %>%
bind_rows() %>%
select(-feed_item_code)
# Gather
feed_allocation_all <- feed_allocation_all %>%
gather(feed_variables, value, cp_content:fraction_as_fed) %>%
spread(feed_item_name, value)
# Bind and add into the season list
season_allocation[[season]] <- cbind(season_name=rep(livestock_selected$season_name, times=nrow(feed_allocation_all)),
livestock_category_name=rep(livestock_selected$livestock_category_name, times=nrow(feed_allocation_all)), feed_allocation_all)
}
season_allocation
# Bind by rows
season_feed_allocation <- season_allocation %>%
bind_rows()
View(season_feed_allocation)
livestock_allocation <- list()
livestock_category_names <- c(livestock$livestock_category_code)
livestock <- para[["livestock"]]
livestock_category_names <- c(livestock$livestock_category_code)
livestock_allocation <- list()
for (livestock in livestock_category_names){
seasons <- para[["seasons"]]
# Compute feeding season ratio
seasons <- seasons %>%
mutate(feeding_ratio = season_length/sum(seasons$season_length))
season_allocation <- list()
for (season in 1:nrow(seasons)){
feed_production <- unnest(para[["feed_production"]], cols = c(feed_type_name))
feed_types <- unique(feed_production$feed_type_name)
feed_allocation <- list()
for (i in 1:length(feed_types)){
feed_selected <- feed_production %>% filter(feed_type_name %in% feed_production$feed_type_name[i])
feed_item <- as.data.frame(feed_selected[["feed_items"]])
feed_item <- feed_item %>% select(feed_item_code, feed_item_name, cp_content, me_content,
dm_content)
# Convert columns of interest to numeric
feed_item <- feed_item %>%
mutate_at(c("cp_content", "me_content", "dm_content"), as.numeric) %>%
mutate(de_fraction = me_content*0.066) # calculate de content
# Extracting allocation
feeding_seasons <- unnest(para[["livestock_feeding_seasons"]],
cols = c(livestock_categories)) %>% filter(season_name %in%
seasons$season_name[season])
feeding_seasons <- feeding_seasons %>%
mutate(livestock_category_name =
ifelse(livestock_category_code %in% "01", "Cows (local)",
ifelse(livestock_category_code %in% "02", "Cows (improved)",
ifelse(livestock_category_code %in% "03", "Adult cattle - male",
ifelse(livestock_category_code %in% "04", "Calves",
ifelse(livestock_category_code %in% "05", "Buffalo (dairy)",
ifelse(livestock_category_code %in% "06", "Sheep/Goats - Ewes/Does",
ifelse(livestock_category_code %in% "07", "Pigs - lactating/pregnant sows",
ifelse(livestock_category_code %in% "08", "Calves",
ifelse(livestock_category_code %in% "09", "Cows (high productive)", "Error"))))))))))
livestock_selected <- feeding_seasons[feeding_seasons$livestock_category_code==livestock,]
feed_item_select <- as.data.frame(livestock_selected[["allocation:"]])
# select feed item
feed_item_selected <- feed_item_select[feed_item_select$feed_item_code==feed_item$feed_item_code,]
feed_allocation[[i]] <-  feed_item %>%
mutate(fraction_as_fed = as.numeric(feed_item_selected$allocation)/100)
}
# Bind by rows
feed_allocation_all <- feed_allocation %>%
bind_rows() %>%
select(-feed_item_code)
# Gather
feed_allocation_all <- feed_allocation_all %>%
gather(feed_variables, value, cp_content:fraction_as_fed) %>%
spread(feed_item_name, value)
# Bind and add into the season list
season_allocation[[season]] <- cbind(season_name=rep(livestock_selected$season_name, times=nrow(feed_allocation_all)),
livestock_category_name=rep(livestock_selected$livestock_category_name, times=nrow(feed_allocation_all)), feed_allocation_all)
}
# Bind by rows
season_feed_allocation <- season_allocation %>%
bind_rows()
livestock_allocation[[livestock]] <- season_feed_allocation
}
# Bind by rows
livestock_feed_allocation <- livestock_allocation %>%
bind_rows()
View(livestock_feed_allocation)
library(formatR)
tidy_app()
# Feed quality calculation
# Load required packages
.packages = c("jsonlite","tidyverse", "lubridate", "data.table")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/example1.json"),  flatten = TRUE)
livestock <- para[["livestock"]]
livestock_category_names <- c(livestock$livestock_category_code)
livestock_allocation <- list()
livestock <- livestock_category_names[1]
seasons <- para[["seasons"]]
# Compute feeding season ratio
seasons <- seasons %>% mutate(feeding_ratio = season_length/sum(seasons$season_length))
season_allocation <- list()
season <- 1
feed_production <- unnest(para[["feed_production"]], cols = c(feed_type_name))
feed_types <- unique(feed_production$feed_type_name)
feed_allocation <- list()
i <- 1
feed_selected <- feed_production %>% filter(feed_type_name %in%
feed_production$feed_type_name[i])
feed_item <- as.data.frame(feed_selected[["feed_items"]])
feed_item <- feed_item %>% select(feed_item_code, feed_item_name,
cp_content, me_content, dm_content)
# Convert columns of interest to numeric
feed_item <- feed_item %>% mutate_at(c("cp_content", "me_content",
"dm_content"), as.numeric) %>% mutate(de_fraction = me_content *
0.066)  # calculate de content
# Extracting allocation
feeding_seasons <- unnest(para[["livestock_feeding_seasons"]],
cols = c(livestock_categories)) %>% filter(season_name %in%
seasons$season_name[season])
feeding_seasons <- feeding_seasons %>% mutate(livestock_category_name = ifelse(livestock_category_code %in%
"01", "Cows (local)", ifelse(livestock_category_code %in%
"02", "Cows (improved)", ifelse(livestock_category_code %in%
"03", "Adult cattle - male", ifelse(livestock_category_code %in%
"04", "Calves", ifelse(livestock_category_code %in% "05",
"Buffalo (dairy)", ifelse(livestock_category_code %in%
"06", "Sheep/Goats - Ewes/Does", ifelse(livestock_category_code %in%
"07", "Pigs - lactating/pregnant sows", ifelse(livestock_category_code %in%
"08", "Calves", ifelse(livestock_category_code %in%
"09", "Cows (high productive)", "Error"))))))))))
livestock_selected <- feeding_seasons[feeding_seasons$livestock_category_code ==
livestock, ]
feed_item_select <- as.data.frame(livestock_selected[["allocation:"]])
# select feed item
feed_item_selected <- feed_item_select[feed_item_select$feed_item_code ==
feed_item$feed_item_code, ]
feed_item_selected
feed_item %>% mutate(fraction_as_fed = as.numeric(feed_item_selected$allocation)/100)
for (i in 1:length(feed_types)) {
feed_selected <- feed_production %>% filter(feed_type_name %in%
feed_production$feed_type_name[i])
feed_item <- as.data.frame(feed_selected[["feed_items"]])
feed_item <- feed_item %>% select(feed_item_code, feed_item_name,
cp_content, me_content, dm_content)
# Convert columns of interest to numeric
feed_item <- feed_item %>% mutate_at(c("cp_content", "me_content",
"dm_content"), as.numeric) %>% mutate(de_fraction = me_content *
0.066)  # calculate de content
# Extracting allocation
feeding_seasons <- unnest(para[["livestock_feeding_seasons"]],
cols = c(livestock_categories)) %>% filter(season_name %in%
seasons$season_name[season])
feeding_seasons <- feeding_seasons %>% mutate(livestock_category_name = ifelse(livestock_category_code %in%
"01", "Cows (local)", ifelse(livestock_category_code %in%
"02", "Cows (improved)", ifelse(livestock_category_code %in%
"03", "Adult cattle - male", ifelse(livestock_category_code %in%
"04", "Calves", ifelse(livestock_category_code %in% "05",
"Buffalo (dairy)", ifelse(livestock_category_code %in%
"06", "Sheep/Goats - Ewes/Does", ifelse(livestock_category_code %in%
"07", "Pigs - lactating/pregnant sows", ifelse(livestock_category_code %in%
"08", "Calves", ifelse(livestock_category_code %in%
"09", "Cows (high productive)", "Error"))))))))))
livestock_selected <- feeding_seasons[feeding_seasons$livestock_category_code ==
livestock, ]
feed_item_select <- as.data.frame(livestock_selected[["allocation:"]])
# select feed item
feed_item_selected <- feed_item_select[feed_item_select$feed_item_code ==
feed_item$feed_item_code, ]
feed_allocation[[i]] <- feed_item %>% mutate(fraction_as_fed = as.numeric(feed_item_selected$allocation)/100)
}
# Bind by rows
feed_allocation_all <- feed_allocation %>% bind_rows() %>%
select(-feed_item_code)
# Gather
feed_allocation_all <- feed_allocation_all %>% gather(feed_variables,
value, cp_content:fraction_as_fed) %>% spread(feed_item_name,
value)
feed_allocation_all
View(feed_allocation_all)
View(feed_allocation_all)
View(feed_allocation_all)
View(feed_allocation_all)
Component <- c("A", "B", "C")
Report_Time <- c(5781, 5781, 5781)
Interval <- c(700, 1000, 1200)
End_Time <- c(8281, 8281, 8281)
Start_Time <- c(800, 298, 780)
df <- data.frame(Component, Report_Time, Interval, End_Time, Start_Time)
View(df)
library(data.table)
setDT(df)
df<-df[rep(1:.N,ceiling((End_Time-Start_Time-Report_Time)/Interval))]
View(df)
df[,Interval_Time:=ifelse(.I==1,Start_Time+Report_Time,Start_Time+cumsum(Interval)+Report_Time-Interval),by=.(Component)]
View(df)
df <- data.frame(Component, Report_Time, Interval, End_Time, Start_Time)
View(df)
df1 <- data.frame(id = 1:4, year = 1991:1994)
df1
category <- c("A", "B", "C")
a <- c(23, 45, 45)
b <- c(2, 4, 6)
c <- c(41, 10, 5)
d <- c(34, 3, 4)
df <- data.frame(category, a, b, c, d)
View(df)
category <- c("A", "B", "C")
a <- c(2, 2, 2)
b <- c(3, 3, 3)
c <- c(1, 1, 1)
d <- c(4, 4, 4)
df <- data.frame(category, a, b, c, d)
View(feed_allocation_all)
View(feed_allocation_all)
# Calculate fraction of dry matter
feed_allocation_all[fraction_dry_matter, ] <- feed_allocation_all[4,]*feed_allocation_all[3,]/sum(unlist(feed_allocation_all[3,]))
class(feed_allocation_all[4,])
feed_allocation_all[3,]
feed_allocation_all[4,]
feed_allocation_all
feed_allocation_all[4,]
View(feed_allocation_all)
feed_allocation_all[4,]*feed_allocation_all[3,]/sum(unlist(feed_allocation_all[3,]))
sum(unlist(feed_allocation_all[3,])
sum(unlist(feed_allocation_all[3,]))
View(feed_allocation_all)
# Gather
feed_allocation_all <- feed_allocation_all %>%
gather(feed_variables, value, cp_content:fraction_as_fed) %>%
spread(feed_item_name, value)
feed_allocation_all %>%
mutate_all(as.numeric)
View(feed_allocation_all)
# Calculate fraction of dry matter
feed_allocation_all[fraction_dry_matter, ] <- feed_allocation_all[4,]*feed_allocation_all[3,]/sum(unlist(feed_allocation_all[3,]))
# Bind by rows
feed_allocation_all <- feed_allocation %>% bind_rows() %>%
select(-feed_item_code)
# Gather
feed_allocation_all <- feed_allocation_all %>%
gather(feed_variables, value, cp_content:fraction_as_fed) %>%
spread(feed_item_name, value) %>%
mutate_all(as.numeric)
# Calculate fraction of dry matter
feed_allocation_all[fraction_dry_matter, ] <- feed_allocation_all[4,]*feed_allocation_all[3,]/sum(unlist(feed_allocation_all[3,]))
feed_allocation_all[4,]*feed_allocation_all[3,]/sum(unlist(feed_allocation_all[3,]))
View(feed_allocation_all)
# Bind by rows
feed_allocation_all <- feed_allocation %>% bind_rows() %>%
select(-feed_item_code)
# Gather
feed_allocation_all <- feed_allocation_all %>%
gather(feed_variables, value, cp_content:fraction_as_fed) %>%
spread(feed_item_name, value)
feed_allocation_all[4,]*feed_allocation_all[3,]/sum(unlist(feed_allocation_all[3,]))
View(feed_allocation_all_feed_types)
names(feed_allocation_all)
# Gather
feed_allocation_all <- feed_allocation_all %>%
gather(feed_variables, value, cp_content:fraction_as_fed) %>%
spread(feed_item_name, value) %>%
mutate_at(c(2,8), as.numeric)
# Bind by rows
feed_allocation_all <- feed_allocation %>% bind_rows() %>%
select(-feed_item_code)
# Gather
feed_allocation_all <- feed_allocation_all %>%
gather(feed_variables, value, cp_content:fraction_as_fed) %>%
spread(feed_item_name, value) %>%
mutate_at(c(2,8), as.numeric)
View(feed_allocation_all)
feed_allocation_all[4,]*feed_allocation_all[3,]/sum(unlist(feed_allocation_all[3,]))
feed_allocation_all[4,]
feed_allocation_all[4,]*feed_allocation_all[3,]
sum(unlist(feed_allocation_all[3,]))
feed_allocation_all[3,]
feed_allocation_all %>% slice(3)
slice(4)*slice(3)
feed_allocation_all %>%
slice_(4)*slice_(3)
# Bind by rows
feed_allocation_all <- feed_allocation %>% bind_rows() %>%
select(-feed_item_code)
# Gather
feed_allocation_all <- feed_allocation_all %>%
gather(feed_variables, value, cp_content:fraction_as_fed) %>%
spread(feed_item_name, value) %>%
mutate_at(c(2,8), as.numeric)
View(feed_allocation_all)
names(feed_allocation_all)
feed_allocation_all[1,-1]
View(feed_allocation_all)
feed_allocation_all[1,-4]
View(feed_allocation_all_feed_types)
View(feed_allocation_all)
feed_allocation_all[4,-1]
feed_allocation_all[4,]
test <- rbind(feed_allocation_all, data.frame(feed_variables = "fraction_dry_matter", feed_allocation_all[4,]*feed_allocation_all[3,]/sum(unlist(feed_allocation_all[3,]))))
feed_allocation_all[4,]
feed_allocation_all[3,]
feed_allocation_all[4,]*feed_allocation_all[3,]
class(feed_allocation_all[4,])
class(feed_allocation_all)
View(feed_allocation_all)
category <- c("A", "B", "C")
r1 <- c(2, 2, 2)
r2 <- c(3, 3, 3)
r3 <- c(1, 1, 1)
r4 <- c(4, 4, 4)
df <- data.frame(category, r1, r2, r3, r4)
View(df)
View(df)
category <- c("A", "B", "C")
r1 <- c(2, 2, 2)
r2 <- c(3, 3, 3)
r3 <- c(1, 1, 1)
r4 <- c(4, 4, 4)
df <- data.frame(category, r1, r2, r3, r4)
View(df)
category <- c("A", "B", "C")
r1 <- c(2, 2, 2)
r2 <- c(3, 3, 3)
r3 <- c(1, 1, 1)
r4 <- c(4, 4, 4)
df <- data.frame(category, r1, r2, r3, r4)
View(df)
category <- c("A", "B", "C")
a <- c(2, 2, 2)
b <- c(3, 3, 3)
c <- c(1, 1, 1)
d <- c(4, 4, 4)
df <- data.frame(category, a, b, c, d)
View(df)
library(data.table)
setDT(df)
df<-df[rep(1:.N,ceiling((End_Time-Start_Time-Report_Time)/Interval))]
df[,Interval_Time:=ifelse(.I==1,Start_Time+Report_Time,Start_Time+cumsum(Interval)+Report_Time-Interval),by=.(Component)]
test <- feed_allocation_all[, fraction_dry_matter]
# Bind by rows
feed_allocation_all <- feed_allocation %>% bind_rows() %>%
select(-feed_item_code)
# Gather
feed_allocation_all <- feed_allocation_all %>%
gather(feed_variables, value, cp_content:fraction_as_fed) %>%
spread(feed_item_name, value) %>%
mutate_at(c(2,8), as.numeric)
View(feed_allocation_all)
feed_allocation_all[4]
feed_allocation_all[4]*feed_allocation_all[3]
feed_allocation_all[4]*feed_allocation_all[3]/sum(unlist(feed_allocation_all[3]))
test <- feed_allocation_all[4]*feed_allocation_all[3]/sum(unlist(feed_allocation_all[3]))
View(test)
View(feed_allocation_all)
feed_allocation_all[4,]
feed_allocation_all$feed_variables
rbind(feed_allocation_all, c(feed_variables = "fraction_dry_matter",
feed_allocation_all[feed_allocation_all$feed_variables == "fraction_as_fed", -1] * feed_allocation_all[feed_allocation_all$feed_variables == "dm_content", -1]))
sum(unlist(feed_allocation_all[feed_allocation_all$feed_variables == "dm_content", -1])
sum(unlist(feed_allocation_all[feed_allocation_all$feed_variables == "dm_content", -1]))
rbind(feed_allocation_all, c(feed_variables = "fraction_dry_matter",
feed_allocation_all[feed_allocation_all$feed_variables == "fraction_as_fed", -1] * feed_allocation_all[feed_allocation_all$feed_variables == "dm_content", -1]/sum(unlist(feed_allocation_all[feed_allocation_all$feed_variables == "dm_content", -1]))))
View(feed_allocation_all)
test1 <- 0.37*26
test1
test1/(26+90+90+60+15+91+91.88)
# Calculate fraction of dry matter
feed_allocation_all <- rbind(feed_allocation_all, c(feed_variables = "fraction_dry_matter",
feed_allocation_all[feed_allocation_all$feed_variables == "fraction_as_fed", -1] * feed_allocation_all[feed_allocation_all$feed_variables == "dm_content", -1]/sum(unlist(feed_allocation_all[feed_allocation_all$feed_variables == "dm_content", -1]))))
View(feed_allocation_all)
# Bind and add into the season list
season_allocation[[season]] <- cbind(season_name = rep(livestock_selected$season_name,
times = nrow(feed_allocation_all)), livestock_category_name = rep(livestock_selected$livestock_category_name,
times = nrow(feed_allocation_all)), feed_allocation_all)
# Feed quality calculation
# Load required packages
.packages = c("jsonlite","tidyverse", "lubridate", "data.table")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/example1.json"),  flatten = TRUE)
feed_basket_quality <- feed_quality(para)
View(feed_basket_quality)
# Feed quality calculation
# Load required packages
.packages = c("jsonlite","tidyverse", "lubridate", "data.table")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/example1.json"),  flatten = TRUE)
livestock <- para[["livestock"]]
livestock_category_names <- c(livestock$livestock_category_code)
livestock_category_names
# Feed quality calculation
# Load required packages
.packages = c("jsonlite","tidyverse", "lubridate", "data.table")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/example.json"),  flatten = TRUE)
feed_basket_quality <- feed_quality(para)
View(feed_basket_quality)
