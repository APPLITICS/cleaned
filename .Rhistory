mutate(me_content_fresh = dm_content * me_content/100,
cp_content_fresh = dm_content * cp_content/100,
de_fraction = me_content * 0.066) %>%
select(feed_item_code, feed_item_name, cp_content_fresh, de_fraction, dm_content, me_content_fresh)
# Extracting allocation
feeding_seasons <- unnest(para[["livestock_feeding_seasons"]],
cols = c(livestock_categories)) %>% filter(season_name %in%
seasons$season_name[season])
feeding_seasons <- feeding_seasons %>%
mutate(livestock_category_name = ifelse(feeding_seasons$livestock_category_code  == livestock_df$livestock_category_code, livestock_df$livestock_category_name, NA))
# feeding_seasons <- feeding_seasons %>%
#   mutate(livestock_category_name = ifelse(livestock_category_code %in% "01", "Cows (local)",
#                                           ifelse(livestock_category_code %in% "02", "Cows (improved)",
#                                                  ifelse(livestock_category_code %in% "03", "Adult cattle - male",
#                                                         ifelse(livestock_category_code %in% "04", "Calves",
#                                                                ifelse(livestock_category_code %in% "05", "Buffalo (dairy)",
#                                                                       ifelse(livestock_category_code %in% "06", "Sheep/Goats - Ewes/Does",
#                                                                              ifelse(livestock_category_code %in% "07", "Pigs - lactating/pregnant sows",
#                                                                                     ifelse(livestock_category_code %in% "08", "Calves",
#                                                                                            ifelse(livestock_category_code %in% "09", "Cows (high productive)",
#                                                                                                   "Error"))))))))))
livestock_selected <- feeding_seasons[feeding_seasons$livestock_category_code == livestock, ]
feed_item_select <- as.data.frame(livestock_selected[["allocation:"]])
# select feed item
feed_item_selected <- feed_item_select[feed_item_select$feed_item_code == feed_item$feed_item_code, ]
feed_allocation[[i]] <- feed_item %>% mutate(fraction_as_fed = as.numeric(feed_item_selected$allocation)/100)
}
# Bind by rows
feed_allocation_all <- feed_allocation %>% bind_rows() %>%
select(-feed_item_code)
# Gather
feed_allocation_all <- feed_allocation_all %>%
gather(feed_variables, value, cp_content_fresh:fraction_as_fed) %>%
spread(feed_item_name, value) %>%
mutate_at(-1, as.numeric)
# calculate fraction of dry matter
feed_allocation_all <- rbind(feed_allocation_all, c(feed_variables = "fraction_dry_matter",
feed_allocation_all[feed_allocation_all$feed_variables == "fraction_as_fed", -1] * feed_allocation_all[feed_allocation_all$feed_variables == "dm_content", -1]/sum(unlist(feed_allocation_all[feed_allocation_all$feed_variables == "fraction_as_fed", -1] * feed_allocation_all[feed_allocation_all$feed_variables == "dm_content", -1]))))
# Bind and add into the season list
season_allocation[[season]] <- cbind(season_name = rep(livestock_selected$season_name,
times = nrow(feed_allocation_all)),
livestock_category_code = rep(livestock_selected$livestock_category_code, times = nrow(feed_allocation_all)),
livestock_category_name = rep(livestock_selected$livestock_category_name, times = nrow(feed_allocation_all)),
feed_allocation_all)
# Bind by rows
season_feed_allocation <- season_allocation %>% bind_rows()
livestock_allocation[[livestock]] <- season_feed_allocation
# Bind by rows
livestock_feed_allocation <- livestock_allocation %>% bind_rows()
# Load required packages
.packages = c("jsonlite","tidyverse", "lubridate", "data.table", "tidyr", "dplyr")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/example_JM_Test_1_1.json"),  flatten = TRUE)
# Feed quality calculation
feed_basket_quality <- feed_quality(para)
View(feed_basket_quality)
# Feed quality calculation
feed_basket_quality <- feed_quality(para)
# Energy requirement
energy_required <- energy_requirement(para,feed_basket_quality)
# Land requirement
land_required <- land_requirement(feed_basket_quality, energy_required, para)
# Load required packages
.packages = c("jsonlite","tidyverse", "lubridate", "data.table", "tidyr", "dplyr")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/example_JM_Test_1_1.json"),  flatten = TRUE)
# Feed quality calculation
feed_basket_quality <- feed_quality(para)
View(feed_basket_quality)
# Load required packages
.packages = c("jsonlite","tidyverse", "lubridate", "data.table", "tidyr", "dplyr")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/example_JM_Test_1_1.json"),  flatten = TRUE)
# Feed quality calculation
feed_basket_quality <- feed_quality(para)
View(feed_basket_quality)
# Energy requirement
energy_required <- energy_requirement(para,feed_basket_quality)
# Load required packages
.packages = c("jsonlite","tidyverse", "lubridate", "data.table", "tidyr", "dplyr")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/example_JM_Test_1_1.json"),  flatten = TRUE)
# Feed quality calculation
feed_basket_quality <- feed_quality(para)
# Energy requirement
energy_required <- energy_requirement(para,feed_basket_quality)
# Land requirement
land_required <- land_requirement(feed_basket_quality, energy_required, para)
livestock_category_code <- unique(feed_basket_quality$livestock_category_code)
livestock_requirements <- list()
livestock <- livestock_category_code[1]
livestock
livestock_selected <- feed_basket_quality %>%
filter(livestock == livestock_category_code)
seasons <- unique(feed_basket_quality$season_name)
seasonal_requirements <- list()
season - seasons[1]
season <- seasons[1]
season
# select feed and transpose the data
season_feeds <- livestock_selected %>%
filter(season == season_name) %>%
gather(feed,value,-season_name,-livestock_category_code,-livestock_category_name,-feed_variables)%>%
spread(feed_variables,value)
View(season_feeds)
# select form energy requirment sheet
season_selected_energy <- energy_required[2] %>%
as.data.frame() %>%
filter(livestock == livestock_category_code, season == season_name)
View(season_selected_energy)
feed_items <- unique(season_feeds$feed)
land_requirements <- list()
i <- feed_items[1]
i
# get crop yield
feed_production <- unnest(para[["feed_production"]], cols = c(feed_type_name))
feed_selected <- feed_production[feed_production$feed_type_name == i,]
# get main product removal
feed_item_selected <- as.data.frame(feed_selected[["feed_items"]])
# selected feed from season feeds above
selected_feed <- season_feeds[season_feeds$feed == i,]
land_requirements[[i]] <- selected_feed %>%
select(feed) %>%
mutate(feed_item_dm = selected_feed$fraction_dry_matter*season_selected_energy$dmi_s,
crop_yield = as.numeric(feed_selected$dry_yield)*1000,
crop_removal = as.numeric(feed_item_selected$main_product_removal),
cr_yield = as.numeric(feed_selected$residue_dry_yield)*1000,
crop_residue_removal = ifelse(feed_item_selected$source_type == "Residue",
crop_residue_removal <- as.numeric(feed_item_selected$residue_removal),
crop_residue_removal <- 0),
area_total = ifelse(feed_item_selected$source_type == "Main",
area_total <- feed_item_dm/(as.numeric(crop_yield)*as.numeric(crop_removal)),
ifelse(feed_item_selected$source_type != "Main",
area_total <- feed_item_dm/(as.numeric(cr_yield)*as.numeric(crop_residue_removal)),
area_total <- 0)),
area_non_feed = ifelse(crop_residue_removal > 0,
area_non_feed <- area_total*(as.numeric(crop_yield)*as.numeric(crop_removal)/(as.numeric(crop_yield)*as.numeric(crop_removal)+as.numeric(cr_yield)*as.numeric(crop_removal))),
area_non_feed <- 0),
area_feed = ifelse(crop_residue_removal > 0,
area_feed <- area_total*(as.numeric(cr_yield)*as.numeric(crop_residue_removal)/(as.numeric(crop_yield)*as.numeric(crop_removal)+as.numeric(cr_yield)*as.numeric(crop_residue_removal))),
area_feed <- area_total*(crop_yield*crop_removal+crop_yield)/(crop_yield*crop_removal+cr_yield*crop_residue_removal))) %>%
mutate_if(is.numeric, list(~na_if(.,Inf))) %>%
replace(is.na(.), 0)
land_requirements <- land_requirements %>% bind_rows()
land_requirements <- cbind(season_name = rep(selected_feed$season_name, times = nrow(land_requirements)),
livestock_category_code = rep(selected_feed$livestock_category_code, times = nrow(land_requirements)),
livestock_category_name = rep(selected_feed$livestock_category_name, times = nrow(land_requirements)),
land_requirements)
# bind by rows and add into seasonal requirement list
seasonal_requirements[[season]] <- land_requirements %>% bind_rows()
livestock_requirements[[livestock]] <- seasonal_requirements %>% bind_rows()
land_requirements_all <- livestock_requirements %>% bind_rows()
View(land_requirements_all)
selected_feed
feed_item_dm = selected_feed$fraction_dry_matter*season_selected_energy$dmi_s
feed_item_dm
crop_yield = as.numeric(feed_selected$dry_yield)*1000
feed_selected$dry_yield
crop_removal = as.numeric(feed_item_selected$main_product_removal)
crop_removal
# Land requirement
land_required <- land_requirement(feed_basket_quality, energy_required, para)
# Load required packages
.packages = c("jsonlite","tidyverse", "lubridate", "data.table", "tidyr", "dplyr")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/example_JM_Test_1_1.json"),  flatten = TRUE)
# Feed quality calculation
feed_basket_quality <- feed_quality(para)
# Energy requirement
energy_required <- energy_requirement(para,feed_basket_quality)
livestock_category_code <- unique(feed_basket_quality$livestock_category_code)
livestock_category_code
livestock_requirements <- list()
livestock <- livestock_category_code[1]
livestock
livestock
livestock_selected <- feed_basket_quality %>%
filter(livestock == livestock_category_code)
feed_basket_quality %>%
filter(livestock == livestock_category_code)
livestock_selected <- feed_basket_quality %>%
filter(livestock == livestock_category_code)
seasons <- unique(feed_basket_quality$season_name)
seasonal_requirements <- list()
season <- seasons[1]
# select feed and transpose the data
season_feeds <- livestock_selected %>%
filter(season == season_name) %>%
gather(feed,value,-season_name,-livestock_category_code,-livestock_category_name,-feed_variables)%>%
spread(feed_variables,value)
View(season_feeds)
# select form energy requirment sheet
season_selected_energy <- energy_required[2] %>%
as.data.frame() %>%
filter(livestock == livestock_category_code, season == season_name)
feed_items <- unique(season_feeds$feed)
land_requirements <- list()
i <- feed_items[1]
i
i <- feed_items[2]
i
i <- feed_items[3]
i
# get crop yield
feed_production <- unnest(para[["feed_production"]], cols = c(feed_type_name))
feed_selected <- feed_production[feed_production$feed_type_name == i,]
# get crop yield
feed_production <- unnest(para[["feed_production"]], cols = c(feed_type_name))
View(feed_production)
i
names(feed_production)
View(feed_production)
View(feed_production[[20]][[1]])
feed_production[feed_production$feed_type_name == i,]
feed_production$feed_type_name == i
View(feed_production)
feed_production$feed_type_name
i
# Load required packages
.packages = c("jsonlite","tidyverse", "lubridate", "data.table", "tidyr", "dplyr")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/example_JM_Test_1_1.json"),  flatten = TRUE)
# Feed quality calculation
feed_basket_quality <- feed_quality(para)
# Energy requirement
energy_required <- energy_requirement(para,feed_basket_quality)
livestock_category_code <- unique(feed_basket_quality$livestock_category_code)
livestock_requirements <- list()
livestock <- livestock_category_code[1]
livestock_selected <- feed_basket_quality %>%
filter(livestock == livestock_category_code)
seasons <- unique(feed_basket_quality$season_name)
seasonal_requirements <- list()
season <- seasons[1]
season
# select feed and transpose the data
season_feeds <- livestock_selected %>%
filter(season == season_name) %>%
gather(feed,value,-season_name,-livestock_category_code,-livestock_category_name,-feed_variables)%>%
spread(feed_variables,value)
# select form energy requirment sheet
season_selected_energy <- energy_required[2] %>%
as.data.frame() %>%
filter(livestock == livestock_category_code, season == season_name)
feed_items <- unique(season_feeds$feed)
land_requirements <- list()
i <- feed_items[3]
i
# get crop yield
feed_production <- unnest(para[["feed_production"]], cols = c(feed_type_name))
feed_selected <- feed_production[feed_production$feed_type_name == i,]
View(feed_selected)
# get main product removal
feed_item_selected <- as.data.frame(feed_selected[["feed_items"]])
# selected feed from season feeds above
selected_feed <- season_feeds[season_feeds$feed == i,]
selected_feed %>%
select(feed) %>%
mutate(feed_item_dm = selected_feed$fraction_dry_matter*season_selected_energy$dmi_s,
crop_yield = as.numeric(feed_selected$dry_yield)*1000,
crop_removal = as.numeric(feed_item_selected$main_product_removal),
cr_yield = as.numeric(feed_selected$residue_dry_yield)*1000,
crop_residue_removal = ifelse(feed_item_selected$source_type == "Residue",
crop_residue_removal <- as.numeric(feed_item_selected$residue_removal),
crop_residue_removal <- 0),
area_total = ifelse(feed_item_selected$source_type == "Main",
area_total <- feed_item_dm/(as.numeric(crop_yield)*as.numeric(crop_removal)),
ifelse(feed_item_selected$source_type != "Main",
area_total <- feed_item_dm/(as.numeric(cr_yield)*as.numeric(crop_residue_removal)),
area_total <- 0)),
area_non_feed = ifelse(crop_residue_removal > 0,
area_non_feed <- area_total*(as.numeric(crop_yield)*as.numeric(crop_removal)/(as.numeric(crop_yield)*as.numeric(crop_removal)+as.numeric(cr_yield)*as.numeric(crop_removal))),
area_non_feed <- 0),
area_feed = ifelse(crop_residue_removal > 0,
area_feed <- area_total*(as.numeric(cr_yield)*as.numeric(crop_residue_removal)/(as.numeric(crop_yield)*as.numeric(crop_removal)+as.numeric(cr_yield)*as.numeric(crop_residue_removal))),
area_feed <- area_total*(crop_yield*crop_removal+crop_yield)/(crop_yield*crop_removal+cr_yield*crop_residue_removal))) %>%
mutate_if(is.numeric, list(~na_if(.,Inf))) %>%
replace(is.na(.), 0)
land_requirements[[i]] <- selected_feed %>%
select(feed) %>%
mutate(feed_item_dm = selected_feed$fraction_dry_matter*season_selected_energy$dmi_s,
crop_yield = as.numeric(feed_selected$dry_yield)*1000,
crop_removal = as.numeric(feed_item_selected$main_product_removal),
cr_yield = as.numeric(feed_selected$residue_dry_yield)*1000,
crop_residue_removal = ifelse(feed_item_selected$source_type == "Residue",
crop_residue_removal <- as.numeric(feed_item_selected$residue_removal),
crop_residue_removal <- 0),
area_total = ifelse(feed_item_selected$source_type == "Main",
area_total <- feed_item_dm/(as.numeric(crop_yield)*as.numeric(crop_removal)),
ifelse(feed_item_selected$source_type != "Main",
area_total <- feed_item_dm/(as.numeric(cr_yield)*as.numeric(crop_residue_removal)),
area_total <- 0)),
area_non_feed = ifelse(crop_residue_removal > 0,
area_non_feed <- area_total*(as.numeric(crop_yield)*as.numeric(crop_removal)/(as.numeric(crop_yield)*as.numeric(crop_removal)+as.numeric(cr_yield)*as.numeric(crop_removal))),
area_non_feed <- 0),
area_feed = ifelse(crop_residue_removal > 0,
area_feed <- area_total*(as.numeric(cr_yield)*as.numeric(crop_residue_removal)/(as.numeric(crop_yield)*as.numeric(crop_removal)+as.numeric(cr_yield)*as.numeric(crop_residue_removal))),
area_feed <- area_total*(crop_yield*crop_removal+crop_yield)/(crop_yield*crop_removal+cr_yield*crop_residue_removal))) %>%
mutate_if(is.numeric, list(~na_if(.,Inf))) %>%
replace(is.na(.), 0)
land_requirements <- land_requirements %>% bind_rows()
View(land_requirements)
land_requirements <- cbind(season_name = rep(selected_feed$season_name, times = nrow(land_requirements)),
livestock_category_code = rep(selected_feed$livestock_category_code, times = nrow(land_requirements)),
livestock_category_name = rep(selected_feed$livestock_category_name, times = nrow(land_requirements)),
land_requirements)
# bind by rows and add into seasonal requirement list
seasonal_requirements[[season]] <- land_requirements %>% bind_rows()
livestock_requirements[[livestock]] <- seasonal_requirements %>% bind_rows()
land_requirements_all <- livestock_requirements %>% bind_rows()
View(land_requirements_all)
# Load required packages
.packages = c("jsonlite","tidyverse", "lubridate", "data.table", "tidyr", "dplyr")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/example_JM_Test_1_1.json"),  flatten = TRUE)
# Feed quality calculation
feed_basket_quality <- feed_quality(para)
# Energy requirement
energy_required <- energy_requirement(para,feed_basket_quality)
# Land requirement
land_required <- land_requirement(feed_basket_quality, energy_required, para)
# Load required packages
.packages = c("jsonlite","tidyverse", "lubridate", "data.table", "tidyr", "dplyr")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/example_JM_Test_1_1.json"),  flatten = TRUE)
# Feed quality calculation
feed_basket_quality <- feed_quality(para)
# Energy requirement
energy_required <- energy_requirement(para,feed_basket_quality)
# Land requirement
land_required <- land_requirement(feed_basket_quality, energy_required, para)
View(land_required)
#soil health status
soil_erosion <- soil_health(para, land_required)
View(soil_erosion)
# clear your work space
rm(list = ls(all = TRUE))
# Load required packages
.packages = c("jsonlite","tidyverse", "lubridate", "data.table", "tidyr", "dplyr")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/example_JM_Test_1_1.json"),  flatten = TRUE)
# Feed quality calculation
feed_basket_quality <- feed_quality(para)
# Energy requirement
energy_required <- energy_requirement(para,feed_basket_quality)
# Land requirement
land_required <- land_requirement(feed_basket_quality, energy_required, para)
#soil health status
soil_erosion <- soil_health(para, land_required)
# clear your work space
rm(list = ls(all = TRUE))
# Load required packages
.packages = c("jsonlite","tidyverse", "lubridate", "data.table", "tidyr", "dplyr")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/example_JM_Test_1_1.json"),  flatten = TRUE)
# Feed quality calculation
feed_basket_quality <- feed_quality(para)
# Energy requirement
energy_required <- energy_requirement(para,feed_basket_quality)
livestock_category_code <- unique(feed_basket_quality$livestock_category_code)
livestock_requirements <- list()
livestock <- livestock_category_code[1]
livestock
livestock_selected <- feed_basket_quality %>%
filter(livestock == livestock_category_code)
seasons <- unique(feed_basket_quality$season_name)
seasonal_requirements <- list()
season <- seasons[1]
season
# select feed and transpose the data
season_feeds <- livestock_selected %>%
filter(season == season_name) %>%
gather(feed,value,-season_name,-livestock_category_code,-livestock_category_name,-feed_variables)%>%
spread(feed_variables,value)
# select form energy requirment sheet
season_selected_energy <- energy_required[2] %>%
as.data.frame() %>%
filter(livestock == livestock_category_code, season == season_name)
feed_items <- unique(season_feeds$feed)
land_requirements <- list()
i <- feed_items[1]
i
# get crop yield
feed_production <- unnest(para[["feed_production"]], cols = c(feed_type_name))
feed_selected <- feed_production[feed_production$feed_type_name == i,]
i <- feed_items[3]
# get crop yield
feed_production <- unnest(para[["feed_production"]], cols = c(feed_type_name))
feed_selected <- feed_production[feed_production$feed_type_name == i,]
# get main product removal
feed_item_selected <- as.data.frame(feed_selected[["feed_items"]])
# selected feed from season feeds above
selected_feed <- season_feeds[season_feeds$feed == i,]
# selected feed from season feeds above
selected_feed
land_requirements[[i]] <- selected_feed %>%
select(feed) %>%
mutate(feed_item_dm = selected_feed$fraction_dry_matter*season_selected_energy$dmi_s,
crop_yield = as.numeric(feed_selected$dry_yield)*1000,
crop_removal = as.numeric(feed_item_selected$main_product_removal),
cr_yield = as.numeric(feed_selected$residue_dry_yield)*1000,
crop_residue_removal = ifelse(feed_item_selected$source_type == "Residue",
as.numeric(feed_item_selected$residue_removal), 0),
area_total = ifelse(feed_item_selected$source_type == "Main",
area_total <- feed_item_dm/(as.numeric(crop_yield)*as.numeric(crop_removal)),
ifelse(feed_item_selected$source_type != "Main",
area_total <- feed_item_dm/(as.numeric(cr_yield)*as.numeric(crop_residue_removal)),
area_total <- 0)),
area_non_feed = ifelse(crop_residue_removal > 0,
area_non_feed <- area_total*(as.numeric(crop_yield)*as.numeric(crop_removal)/(as.numeric(crop_yield)*as.numeric(crop_removal)+as.numeric(cr_yield)*as.numeric(crop_removal))),
area_non_feed <- 0),
area_feed = ifelse(crop_residue_removal > 0,
area_feed <- area_total*(as.numeric(cr_yield)*as.numeric(crop_residue_removal)/(as.numeric(crop_yield)*as.numeric(crop_removal)+as.numeric(cr_yield)*as.numeric(crop_residue_removal))),
area_feed <- area_total*(crop_yield*crop_removal+crop_yield)/(crop_yield*crop_removal+cr_yield*crop_residue_removal))) %>%
mutate_if(is.numeric, list(~na_if(.,Inf))) %>%
replace(is.na(.), 0)
crop_residue_removal
crop_residue_removal = ifelse(feed_item_selected$source_type == "Residue",
as.numeric(feed_item_selected$residue_removal), 0)
crop_residue_removal
# clear your work space
rm(list = ls(all = TRUE))
# Load required packages
.packages = c("jsonlite","tidyverse", "lubridate", "data.table", "tidyr", "dplyr")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/example_JM_Test_1_1.json"),  flatten = TRUE)
# Feed quality calculation
feed_basket_quality <- feed_quality(para)
# Energy requirement
energy_required <- energy_requirement(para,feed_basket_quality)
# Land requirement
land_required <- land_requirement(feed_basket_quality, energy_required, para)
#soil health status
soil_erosion <- soil_health(para, land_required)
View(soil_erosion)
