ifelse(x == "Cereals", 0.15,
ifelse(x == "Pulses", 0.15,
ifelse(x == "Dense grass", 0.01,
ifelse(x == "Degraded grass", 0.05,
ifelse(x == "Fallow hard", 0.05,
ifelse(x == "Fallow plouged", 0.6,
ifelse(x == "Ethiopian teff", 0.25,
ifelse(x == "Continuous fallow", 1, NA))))))))))))))
return(z)
}
c_factor <- landcover_c_factor_conversion(landcover_c_factor)
# calculate management factor
management_factor_conversion <- function(x){
ifelse(x == "Flat (0-5%)", 0.11,
ifelse(x == "Hilly (5-20%)", 0.13,
ifelse(x == "Steep (20-30%)", 0.22,
ifelse(x == "Extremely steep (30%+)", 0.37, 1))))
}
p_factor <- management_factor_conversion(slope_p_factor)
# calculate Soil loss (t/ha/year)
soil_loss_ha_year <- erosivity_r*erodibility_k*ls*c_factor*p_factor
# select feed from land rquired dataframe
land_required_feed_selected <- land_required[land_required$feed == i,]
# land requirement for feed production (ha)
land_required_feed_selected <- sum(land_required_feed_selected$area_feed)
# calculate Soil loss (t/plot/ season)
soil_loss_plot <- soil_loss_ha_year*land_required_feed_selected
# write data into a dataframe
soil_erosion_per_feed <- as.data.frame(cbind(feed_type, soil_type, erosivity_r, erodibility_k, ls, c_factor, p_factor, soil_loss_ha_year, soil_loss_plot))
soil_erosion_all_feed[[i]] <- soil_erosion_per_feed
}
soil_erosion_all_feed <- soil_erosion_all_feed %>% bind_rows()
}
=======
livestock_requirements[[livestock]] <- seasonal_requirements %>% bind_rows()
land_requirements_all <- livestock_requirements %>% bind_rows()
View(land_requirements_all)
# Load required packages
.packages = c("jsonlite","tidyverse", "lubridate", "data.table", "tidyr", "dplyr")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/example_JM_Test_1_1.json"),  flatten = TRUE)
# Feed quality calculation
feed_basket_quality <- feed_quality(para)
# Energy requirement
energy_required <- energy_requirement(para,feed_basket_quality)
# Land requirement
land_required <- land_requirement(feed_basket_quality, energy_required, para)
# Load required packages
.packages = c("jsonlite","tidyverse", "lubridate", "data.table", "tidyr", "dplyr")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/example_JM_Test_1_1.json"),  flatten = TRUE)
# Feed quality calculation
feed_basket_quality <- feed_quality(para)
# Energy requirement
energy_required <- energy_requirement(para,feed_basket_quality)
# Land requirement
land_required <- land_requirement(feed_basket_quality, energy_required, para)
View(land_required)
#soil health status
soil_erosion <- soil_health(para, land_required)
View(soil_erosion)
# clear your work space
rm(list = ls(all = TRUE))
>>>>>>> 1af4bd495eb27b5ae8a74614a344f95a51198bff
# Load required packages
.packages = c("jsonlite","tidyverse", "lubridate", "data.table", "tidyr", "dplyr")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
<<<<<<< HEAD
rm(list = ls())
=======
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/example_JM_Test_1_1.json"),  flatten = TRUE)
# Feed quality calculation
feed_basket_quality <- feed_quality(para)
# Energy requirement
energy_required <- energy_requirement(para,feed_basket_quality)
# Land requirement
land_required <- land_requirement(feed_basket_quality, energy_required, para)
#soil health status
soil_erosion <- soil_health(para, land_required)
# clear your work space
rm(list = ls(all = TRUE))
>>>>>>> 1af4bd495eb27b5ae8a74614a344f95a51198bff
# Load required packages
.packages = c("jsonlite","tidyverse", "lubridate", "data.table", "tidyr", "dplyr")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
<<<<<<< HEAD
#Working directory
path <- "C:/Users/S.Oloo/Documents/ILRI Work/CLEANED R vs Ex/Gitpulledcleaned/cleaned-XtRa"
#Loading data
para <- fromJSON(paste0(path,"/data/example_JM_Test_1_1.json"), flatten = TRUE)
# load functions
source("./cleanedFunctions.R")
# Feed quality calculation
feed_basket_quality <- feed_quality(para)
View(feed_basket_quality)
# Energy requirement
energy_required <- energy_requirement(para,feed_basket_quality)
view(energy_required[[1]])
#get the seasons
seasons <- para[["seasons"]]
livestock <- para[["livestock"]]
no_days <- 365
#convert columns to numeric
cols_nam <- colnames(livestock%>%select(-livestock_category_code,-livestock_category_name))
livestock[cols_nam] <- sapply(livestock[cols_nam],as.numeric)
#change NAs to 0
livestock[is.na(livestock)] <- 0
#Compute annual energy and protein required
annual_requirement <- livestock%>%select(livestock_category_code,livestock_category_name)%>%
mutate(energy_required_annually=((livestock$er_maintenance*no_days)+(livestock$er_grazing*livestock$grazing_displacement*no_days)+
ifelse(is.nan(((livestock$er_pregnancy/(no_days*livestock$birth_interval))*no_days)),0,((livestock$er_pregnancy/(no_days*livestock$birth_interval))*no_days))+
ifelse(is.nan(((livestock$er_lactation/(no_days*livestock$birth_interval))*no_days)),0,((livestock$er_lactation/(no_days*livestock$birth_interval))*no_days))+
(livestock$annual_milk*livestock$er_lactmilk)+(livestock$annual_growth*livestock$er_growth))*livestock$herd_composition,
protein_required_annually =((livestock$cp_maintenance*no_days)+(livestock$cp_grazing*livestock$grazing_displacement*no_days)+
ifelse(is.nan(((livestock$cp_pregnancy/(no_days*livestock$birth_interval))*no_days)),0,((livestock$cp_pregnancy/(no_days*livestock$birth_interval))*no_days))+
ifelse(is.nan(((livestock$cp_lactation/(no_days*livestock$birth_interval))*no_days)),0,((livestock$er_lactation/(no_days*livestock$birth_interval))*no_days))+
(livestock$annual_milk*livestock$cp_lactmilk)+(livestock$annual_growth*livestock$cp_growth))*livestock$herd_composition)
View(annual_requirement)
#get livestock energy and protein requirement per season
for (i in 1:nrow(seasons)) {
sl <- seasons$season_length[i]
#Preparing the seasonal feed quality
s_feed_basket_quality <- filter(feed_basket_quality, season_name == seasons$season_name[i])%>%
gather(feed,value,-season_name,-livestock_category_code,-livestock_category_name,-feed_variables)%>%
spread(feed_variables,value)%>%
mutate(prod_me = fraction_as_fed*me_content_fresh,
prod_dm = fraction_as_fed*dm_content,
prod_cp = fraction_as_fed*cp_content_fresh)%>%
select(livestock_category_code,prod_me,prod_dm,prod_cp)%>%
group_by(livestock_category_code)%>%
summarise(average_me = sum(prod_me),
average_dm = sum(prod_dm),
average_cp=sum(prod_cp))
#Computation of seasonal requirements
temp <- annual_requirement%>%
mutate(season_name = seasons$season_name[i],
energy_required_by_season = annual_requirement$energy_required_annually*(sl/no_days),#compute energy require by season
protein_required_by_season = annual_requirement$protein_required_annually*(sl/no_days))%>% #compute protein require by season
left_join(s_feed_basket_quality, by = "livestock_category_code")%>%
mutate(fresh_intake_required_e = energy_required_by_season/average_me,
dmi_required_e = fresh_intake_required_e*average_dm/100,
fresh_intake_required_cp = protein_required_by_season/(average_cp/100),
dmi_required_cp = fresh_intake_required_cp*average_dm/100,
dmi_s = ifelse(dmi_required_cp>dmi_required_e,dmi_required_cp,dmi_required_e),
limiting = ifelse(dmi_required_e == 0 |dmi_required_cp == 0, NA,
ifelse(dmi_required_cp>dmi_required_e,"CP","ENERGY")),
me_intake_s = dmi_s*average_me*100/average_dm)
#Binding seasonal results
if (i==1) {df <- temp}
else{df <- rbind(df,temp)}
}
View(df)
livestock$er_grazing
livestock$er_maintenance
=======
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/example_JM_Test_1_1.json"),  flatten = TRUE)
# Feed quality calculation
feed_basket_quality <- feed_quality(para)
# Energy requirement
energy_required <- energy_requirement(para,feed_basket_quality)
livestock_category_code <- unique(feed_basket_quality$livestock_category_code)
livestock_requirements <- list()
livestock <- livestock_category_code[1]
livestock
livestock_selected <- feed_basket_quality %>%
filter(livestock == livestock_category_code)
seasons <- unique(feed_basket_quality$season_name)
seasonal_requirements <- list()
season <- seasons[1]
season
# select feed and transpose the data
season_feeds <- livestock_selected %>%
filter(season == season_name) %>%
gather(feed,value,-season_name,-livestock_category_code,-livestock_category_name,-feed_variables)%>%
spread(feed_variables,value)
# select form energy requirment sheet
season_selected_energy <- energy_required[2] %>%
as.data.frame() %>%
filter(livestock == livestock_category_code, season == season_name)
feed_items <- unique(season_feeds$feed)
land_requirements <- list()
i <- feed_items[1]
i
# get crop yield
feed_production <- unnest(para[["feed_production"]], cols = c(feed_type_name))
feed_selected <- feed_production[feed_production$feed_type_name == i,]
i <- feed_items[3]
# get crop yield
feed_production <- unnest(para[["feed_production"]], cols = c(feed_type_name))
feed_selected <- feed_production[feed_production$feed_type_name == i,]
# get main product removal
feed_item_selected <- as.data.frame(feed_selected[["feed_items"]])
# selected feed from season feeds above
selected_feed <- season_feeds[season_feeds$feed == i,]
# selected feed from season feeds above
selected_feed
land_requirements[[i]] <- selected_feed %>%
select(feed) %>%
mutate(feed_item_dm = selected_feed$fraction_dry_matter*season_selected_energy$dmi_s,
crop_yield = as.numeric(feed_selected$dry_yield)*1000,
crop_removal = as.numeric(feed_item_selected$main_product_removal),
cr_yield = as.numeric(feed_selected$residue_dry_yield)*1000,
crop_residue_removal = ifelse(feed_item_selected$source_type == "Residue",
as.numeric(feed_item_selected$residue_removal), 0),
area_total = ifelse(feed_item_selected$source_type == "Main",
area_total <- feed_item_dm/(as.numeric(crop_yield)*as.numeric(crop_removal)),
ifelse(feed_item_selected$source_type != "Main",
area_total <- feed_item_dm/(as.numeric(cr_yield)*as.numeric(crop_residue_removal)),
area_total <- 0)),
area_non_feed = ifelse(crop_residue_removal > 0,
area_non_feed <- area_total*(as.numeric(crop_yield)*as.numeric(crop_removal)/(as.numeric(crop_yield)*as.numeric(crop_removal)+as.numeric(cr_yield)*as.numeric(crop_removal))),
area_non_feed <- 0),
area_feed = ifelse(crop_residue_removal > 0,
area_feed <- area_total*(as.numeric(cr_yield)*as.numeric(crop_residue_removal)/(as.numeric(crop_yield)*as.numeric(crop_removal)+as.numeric(cr_yield)*as.numeric(crop_residue_removal))),
area_feed <- area_total*(crop_yield*crop_removal+crop_yield)/(crop_yield*crop_removal+cr_yield*crop_residue_removal))) %>%
mutate_if(is.numeric, list(~na_if(.,Inf))) %>%
replace(is.na(.), 0)
crop_residue_removal
crop_residue_removal = ifelse(feed_item_selected$source_type == "Residue",
as.numeric(feed_item_selected$residue_removal), 0)
crop_residue_removal
# clear your work space
rm(list = ls(all = TRUE))
# Load required packages
.packages = c("jsonlite","tidyverse", "lubridate", "data.table", "tidyr", "dplyr")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/example_JM_Test_1_1.json"),  flatten = TRUE)
# Feed quality calculation
feed_basket_quality <- feed_quality(para)
# Energy requirement
energy_required <- energy_requirement(para,feed_basket_quality)
# Land requirement
land_required <- land_requirement(feed_basket_quality, energy_required, para)
#soil health status
soil_erosion <- soil_health(para, land_required)
View(soil_erosion)
>>>>>>> 1af4bd495eb27b5ae8a74614a344f95a51198bff
# clear your work space
rm(list = ls(all = TRUE))
# Load required packages
.packages = c("jsonlite","tidyverse", "lubridate", "data.table", "tidyr", "dplyr")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/example_JM_Test_1_1.json"),  flatten = TRUE)
# Feed quality calculation
feed_basket_quality <- feed_quality(para)
# Energy requirement
energy_required <- energy_requirement(para,feed_basket_quality)
# Land requirement
land_required <- land_requirement(feed_basket_quality, energy_required, para)
#soil health status
soil_erosion <- soil_health(para, land_required)
#water requirement
water_requirements <- water_requirement(para,land_required)
test <- water_requirements[1]
test <- as.data.frame(water_requirements[1])
View(test)
# clear your work space
rm(list = ls(all = TRUE))
# Load required packages
.packages = c("jsonlite","tidyverse", "lubridate", "data.table", "tidyr", "dplyr")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/example_JM_Test_1_1.json"),  flatten = TRUE)
# Feed quality calculation
feed_basket_quality <- feed_quality(para)
# Energy requirement
energy_required <- energy_requirement(para,feed_basket_quality)
# Land requirement
land_required <- land_requirement(feed_basket_quality, energy_required, para)
#soil health status
soil_erosion <- soil_health(para, land_required)
#water requirement
water_requirements <- water_requirement(para,land_required)
feed_types <- unique(land_required$feed)
feed <- feed_types[1]
feed
feed <- feed_types[3]
feed
feed_production <- unnest(para[["feed_production"]], cols = c(feed_type_name))
feed_production <- na_if(feed_production, "NA") %>%
as.data.frame()
feed_production[is.na(feed_production)] <- 0
feed_selected <- feed_production[feed_production$feed_type_name == feed,]
dry_yield <- feed_selected$dry_yield
residue_dry_yield <- feed_selected$residue_dry_yield
main_n <- feed_selected$main_n
residue_n <- feed_selected$residue_n
n_fixing <- ifelse(feed_selected$feed_category == "Legume", 0.5*(residue_n*residue_dry_yield+main_n*dry_yield)*1000, 0)
feed_selected_land_required <- land_required[land_required$feed == feed,]
area_total <- sum(feed_selected_land_required$area_feed)
feed_item_selected <- as.data.frame(feed_selected[["feed_items"]])
feed_item_selected <- na_if(feed_item_selected, "NA") %>%
as.data.frame()
feed_item_selected[is.na(feed_item_selected)] <- 0
manure_fraction <- as.numeric(feed_item_selected$manure_fraction)
fertilizer_rate <- as.numeric(feed_item_selected$fertilizer_rate)
main_product_removal <- as.numeric(feed_item_selected$main_product_removal)
residue_removal <- as.numeric(feed_item_selected$residue_removal)
sum_n_content_manure_grazing <- energy_required[1] %>%
as.data.frame() %>%
summarise(sum(n_content_manure_grazing)) %>%
as.numeric()
yield_dm_ha <- as.numeric(dry_yield)*1000
main_product_removed <- yield_dm_ha*main_product_removal
n_content_manure_collected <- energy_required[1] %>%
as.data.frame() %>%
summarise(sum(n_content_manure_collected)) %>%
as.numeric()
animal_manure_collected <- n_content_manure_collected*manure_fraction
organic_n_imported <- manure_fraction*(as.numeric(para$purchased_manure)+as.numeric(para$purchased_compost)+as.numeric(para$purchased_organic_n)+as.numeric(para$purchased_bedding))
crop_residue_dm_ha <- as.numeric(feed_selected$residue_dry_yield)*1000
residue_removal <- as.numeric(feed_item_selected$residue_removal)
main_product_removed_kg <- area_total*main_product_removed
residue_removed_dm_ha <- crop_residue_dm_ha*residue_removal
residue_removed_kg <- area_total*residue_removed_dm_ha
annual_precipitation <- as.numeric(para[["annual_precipitation"]])
soil_n <- as.numeric(para[["soil_n"]])
ntot_kg_ha_20cm <- soil_n*20*as.numeric(para[["soil_bulk"]])*10
n_mineralized_kg_ha_year <- ntot_kg_ha_20cm*0.03
soil_c <- as.numeric(para[["soil_c"]])
soil_clay <- as.numeric(para[["soil_clay"]])
# write data into a dataframe
n_balance <- as.data.frame(cbind(feed,
n_fixing,
area_total,
fertilizer_rate,
yield_dm_ha,
main_product_removal,
main_product_removed,
animal_manure_collected,
organic_n_imported,
crop_residue_dm_ha,
residue_removal,
main_product_removed_kg,
residue_removed_dm_ha,
residue_removed_kg,
annual_precipitation,
soil_n,
ntot_kg_ha_20cm,
n_mineralized_kg_ha_year,
soil_c,
soil_clay))
View(n_balance)
ncrop_kg_dm <- as.numeric(feed_production$main_n)
in1 <- area_total*fertilizer_rate
in1
ncrop <- as.numeric(feed_production$main_n)
nres <- as.numeric(feed_production$residue_n)
in1 <- area_total*fertilizer_rate
in1 <- area_total*fertilizer_rate
# write data into a dataframe
n_balance <- as.data.frame(cbind(feed,
n_fixing,
area_total,
fertilizer_rate,
animal_manure_collected,
organic_n_imported,
yield_dm_ha,
crop_residue_dm_ha,
residue_removal,
main_product_removal,
main_product_removed,
main_product_removed_kg,
residue_removed_dm_ha,
residue_removed_kg,
annual_precipitation,
soil_n,
ntot_kg_ha_20cm,
n_mineralized_kg_ha_year,
soil_c,
soil_clay,
ncrop,
nres,
in1))
View(n_balance)
rm(n_balance)
# write data into a dataframe
n_balance <- as.data.frame(cbind(feed,
n_fixing,
area_total,
fertilizer_rate,
animal_manure_collected,
organic_n_imported,
yield_dm_ha,
crop_residue_dm_ha,
residue_removal,
main_product_removal,
main_product_removed,
main_product_removed_kg,
residue_removed_dm_ha,
residue_removed_kg,
annual_precipitation,
soil_n,
ntot_kg_ha_20cm,
n_mineralized_kg_ha_year,
soil_c,
soil_clay,
ncrop,
nres,
in1))
View(n_balance)
rm)n_balance
rm(n_balance)
# write data into a dataframe
n_balance <- as.data.frame(cbind(feed,
n_fixing,
area_total,
fertilizer_rate,
animal_manure_collected,
organic_n_imported,
yield_dm_ha,
crop_residue_dm_ha,
residue_removal,
main_product_removal,
main_product_removed,
main_product_removed_kg,
residue_removed_dm_ha,
residue_removed_kg,
annual_precipitation,
soil_n,
ntot_kg_ha_20cm,
n_mineralized_kg_ha_year,
soil_c,
soil_clay,
ncrop,
nres,
in1))
View(n_balance)
nres
ncrop
View(feed_selected)
soil_c <- as.numeric(para[["soil_c"]])
soil_clay <- as.numeric(para[["soil_clay"]])
ncrop <- as.numeric(feed_selected$main_n)
nres <- as.numeric(feed_selected$residue_n)
in1 <- area_total*fertilizer_rate
# write data into a dataframe
n_balance <- as.data.frame(cbind(feed,
n_fixing,
area_total,
fertilizer_rate,
animal_manure_collected,
organic_n_imported,
yield_dm_ha,
crop_residue_dm_ha,
residue_removal,
main_product_removal,
main_product_removed,
main_product_removed_kg,
residue_removed_dm_ha,
residue_removed_kg,
annual_precipitation,
soil_n,
ntot_kg_ha_20cm,
n_mineralized_kg_ha_year,
soil_c,
soil_clay,
ncrop,
nres,
in1))
View(n_balance)
# Atomospheric deposition
in3 <- 0.14*sqrt(annual_precipitation)*area_total
in4 <- ifelse(area_total > 0, 2 + (annual_precipitation - 1350) * 0.005 * area_total, 0)
