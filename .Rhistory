install.packages("devtools")
install.packages("devtools")
# GHG emissions
ghg_emissions <- ghg_emission(para,energy_required,ghg_ipcc_data,land_required,nitrogen_balance)
library("devtools")
devtools::install_github("klutometis/roxygen")
library(roxygen2)
check()
usethis::use_testthat()
use_test()
install.packages("roxygen2")
install.packages("tydiverse")
install.packages("tidyverse")
library(dbplyr)
library(dplyr)
install.packages("plyr")
library("devtools")
devtools::install_github("ciat/cleaned")
install.packages(devtools)
install.packages("devtools")
library("devtools")
devtools::install_github("ciat/cleaned")
?cleaned
??cleaned
data()
data(mufindi)
data(ghg_para)
feed_basket_quality <- feed_quality(para)
library("cleaned")
feed_basket_quality <- feed_quality(para)
View(mufindi)
para<- data(mufindi)
feed_basket_quality <- feed_quality(mufindi)
energy_required <- energy_requirement(mufindi,feed_basket_quality)
land_required <- land_requirement(feed_basket_quality, energy_required, mufindi)
soil_erosion <- soil_health(mufindi, land_required)
water_requirements <- water_requirement(mufindi,land_required)
nitrogen_balance <- n_balance(mufindi, land_required, soil_erosion)
livestock_productivity <- land_productivity(mufindi)
economics <- economics_payback(mufindi, energy_required)
biomass <- biomass_calculations(mufindi, land_required)
ghg_emission <- ghg_emission(mufindi,energy_required,ghg_ipcc_data,land_required,nitrogen_balance)
output(feed_basket_quality,energy_required,land_required,soil_erosion,water_requirements,
nitrogen_balance,livestock_productivity,economics,biomass,ghg_emissions)
energy_required <- energy_requirement(mufindi,feed_basket_quality)
land_required <- land_requirement(feed_basket_quality, energy_required, mufindi)
View(energy_required)
energy_required[2]
energy_required[["seasonal_results"]]
land_requirement <- function(feed_basket_quality, energy_required, para){
livestock_category_code <- unique(feed_basket_quality$livestock_category_code)
livestock_requirements <- list()
for (livestock in livestock_category_code){
livestock_selected <- feed_basket_quality %>%
dplyr::filter(livestock == livestock_category_code)
seasons <- unique(feed_basket_quality$season_name)
seasonal_requirements <- list()
for (season in seasons){
# select feed and transpose the data
season_feeds <- livestock_selected %>%
dplyr::filter(season == season_name) %>%
gather(feed,value,-season_name,-livestock_category_code,-livestock_category_name,-feed_variables)%>%
spread(feed_variables,value)
# select form energy requirment sheet
season_selected_energy <- energy_required[["seasonal_results"]] %>%
as.data.frame() %>%
dplyr::filter(livestock == livestock_category_code, season == season_name)
feed_items <- unique(season_feeds$feed)
land_requirements <- list()
for (i in feed_items){
# get crop yield
feed_production <- unnest(para[["feed_production"]], cols = c(feed_type_name))
feed_selected <- feed_production[feed_production$feed_type_name == i,]
# get main product removal
feed_item_selected <- as.data.frame(feed_selected[["feed_items"]])
# selected feed from season feeds above
selected_feed <- season_feeds[season_feeds$feed == i,]
land_requirements[[i]] <- selected_feed %>%
select(feed) %>%
mutate(feed_item_dm = selected_feed$fraction_dry_matter*season_selected_energy$dmi_s,
crop_yield = as.numeric(feed_selected$dry_yield)*1000,
crop_removal = as.numeric(feed_item_selected$main_product_removal),
cr_yield = as.numeric(feed_selected$residue_dry_yield)*1000,
crop_residue_removal = ifelse(feed_item_selected$source_type == "Residue",
as.numeric(feed_item_selected$residue_removal), 0),
area_total = ifelse(feed_item_selected$source_type == "Main",
feed_item_dm/(crop_yield*crop_removal),
ifelse(feed_item_selected$source_type != "Main", feed_item_dm/(cr_yield*crop_residue_removal), 0)),
area_non_feed = ifelse(crop_residue_removal > 0,
area_total*(crop_yield*crop_removal)/(crop_yield*crop_removal+cr_yield*crop_residue_removal), 0),
area_feed = ifelse(crop_residue_removal > 0,
area_total*(cr_yield*crop_residue_removal)/(crop_yield*crop_removal+cr_yield*crop_residue_removal),
area_total*(crop_yield*crop_removal+cr_yield*crop_residue_removal)/(crop_yield*crop_removal+cr_yield*crop_residue_removal))) %>%
dplyr::mutate_if(is.numeric, list(~na_if(.,Inf))) %>%
replace(is.na(.), 0)
}
land_requirements <- land_requirements %>% bind_rows()
land_requirements <- cbind(season_name = rep(selected_feed$season_name, times = nrow(land_requirements)),
livestock_category_code = rep(selected_feed$livestock_category_code, times = nrow(land_requirements)),
livestock_category_name = rep(selected_feed$livestock_category_name, times = nrow(land_requirements)),
land_requirements)
# bind by rows and add into seasonal requirement list
seasonal_requirements[[season]] <- land_requirements %>% bind_rows()
}
livestock_requirements[[livestock]] <- seasonal_requirements %>% bind_rows()
}
land_requirements_all <- livestock_requirements %>% bind_rows()
}
land_required <- land_requirement(feed_basket_quality, energy_required, mufindi)
exists(feed_basket_quality)
is.nan(feed_basket_quality)
x <- c(2, 9, 5, 3)
exists("x")
View(energy_required)
exists("energy_required")
devtools::install_github("ciat/cleaned")
library(cleaned)
data(mufindi)
data(ghg_para)
feed_basket_quality <- feed_quality(mufindi)
energy_required <- energy_requirement(mufindi,feed_basket_quality)
land_required <- land_requirement(feed_basket_quality, energy_required, mufindi)
soil_erosion <- soil_health(mufindi, land_required)
water_requirements <- water_requirement(mufindi,land_required)
nitrogen_balance <- n_balance(mufindi, land_required, soil_erosion)
livestock_productivity <- land_productivity(mufindi)
economics <- economics_payback(mufindi, energy_required)
biomass <- biomass_calculations(mufindi, land_required)
ghg_emission <- ghg_emission(mufindi,energy_required,ghg_ipcc_data,land_required,nitrogen_balance)
output(feed_basket_quality,energy_required,land_required,soil_erosion,water_requirements,
nitrogen_balance,livestock_productivity,economics,biomass,ghg_emissions)
feed_basket_quality = ifelse(exists("feed_basket_quality"), feed_basket_quality,"ERROR: Feed quality was not computed")
nitrogen_balance = ifelse(exists("nitrogen_balance"),nitrogen_balance,"ERROR: Nitrogen balance was not computed")
output(feed_basket_quality,energy_required,land_required,soil_erosion,water_requirements,
nitrogen_balance,livestock_productivity,economics,biomass,ghg_emissions)
