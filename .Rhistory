purchased_manure <- as.numeric(para[["purchased_manure"]])
purchased_compost <- as.numeric(para[["purchased_compost"]])
purchased_organic_n <-  as.numeric(para[["purchased_organic_n"]])
purchased_bedding <-  as.numeric(para[["purchased_bedding"]])
manure_produced <-  as.numeric(para[["manure_produced"]])
n_synthetic_fertilizer_managed_soil <- sum(nitrogen_balance$in1,na.rm = TRUE)
sum_total_n_from_manure_mgmt <- sum(total_n_from_manure_mgmt$total_n_from_manure_mgmt,na.rm = TRUE)
n_organic_manure_managed_soil <- (purchased_manure+purchased_compost+purchased_organic_n+purchased_bedding+sum_total_n_from_manure_mgmt)-manure_produced
n_from_crop_residues <- crop_parameters%>%
mutate(fraction_crop_residue = 1-(residue_removal+residue_burnt),
dm_per_ha = fresh_yield*dm_content,
crop_residue_n_per_area = dm_per_ha*residue_n*1000,
n_from_crop_residue = area_total*fraction_crop_residue*crop_residue_n_per_area)
n_from_crop_residue_managed_soil <- sum(n_from_crop_residues$crop_residue_n_per_area,na.rm = TRUE)
emission_factor_managed_soil <- "EF1"
n_managed_soil <- data.frame(rbind(n_synthetic_fertilizer_managed_soil, n_organic_manure_managed_soil, n_from_crop_residue_managed_soil))%>%
tibble::rownames_to_column()%>%
mutate(emission_factor_managed_soil)
names(n_managed_soil) <- c("anthropogenic_N_input","amount_of_N_applied","emission_factors")
###############################################################################################################################
### Anthropogenic N input types to estimate annual direct N2O-N emissions produced from flooded rice
#N from rice
rice <- dplyr::filter(crop_parameters,grepl('Rice', feed_item_name))
if(nrow(rice)>0){
if (rice$source_type!="Purchased"){
rice_2 <- rice%>%
mutate(n_synthetic_fertilizer = fertilizer_rate*area_total)
n_synthetic_fertilizer_flooded_rice <- sum(rice_2$n_synthetic_fertilizer,na.rm = TRUE)
}else{n_synthetic_fertilizer_flooded_rice <- 0}
}else{n_synthetic_fertilizer_flooded_rice <- 0}
n_organic_manure_flooded_rice <- NA
n_from_crop_residue_flooded_rice <- NA
emission_factor_flooded_rice <- "EF1R"
n_flooded_rice <- data.frame(rbind(n_synthetic_fertilizer_flooded_rice, n_organic_manure_flooded_rice, n_from_crop_residue_flooded_rice))%>%
tibble::rownames_to_column()%>%
mutate(emission_factor_flooded_rice)
names(n_flooded_rice) <- c("anthropogenic_N_input","amount_of_N_applied","emission_factors")
###############################################################################################################################
### Anthropogenic N input type from Urine and dung inputs to grazed soils
cattle_pig_poultry_n_pasture_onfarm <-sum(cattle_pig_poultry_n_pasture$onfarm,na.rm = TRUE)
sheep_and_other_n_pasture_onfarm <- sum(sheep_and_other_n_pasture$onfarm,na.rm = TRUE)
emission_factor_grazed_soils <- c("EF3PRP-CPP","EF3PRP-SO")
n_grazed_soils <- data.frame(rbind(cattle_pig_poultry_n_pasture_onfarm, sheep_and_other_n_pasture_onfarm))%>%
tibble::rownames_to_column()%>%
mutate(emission_factor_grazed_soils)
names(n_grazed_soils) <- c("anthropogenic_N_input","amount_of_N_applied","emission_factors")
annual_N20N_onfarm_direct_emission <- data.frame(rbind(n_managed_soil,n_flooded_rice,n_grazed_soils))%>%
left_join(ghg_ipcc_data[["table_11.1_&_table_11.3"]],by="emission_factors")%>%
mutate(annual_N20N_direct_emission_from_managed_soil = amount_of_N_applied*n2o_emissions_from_managed_soils*(44/28))
organic_n <- sum(n_organic_manure_managed_soil,n_from_crop_residue_managed_soil,n_organic_manure_flooded_rice,n_from_crop_residue_flooded_rice,na.rm = TRUE)
n_pasture_onfarm <- sum(cattle_pig_poultry_n_pasture_onfarm,sheep_and_other_n_pasture_onfarm,na.rm = TRUE)
N20_indirect_emission <- as.data.frame(cbind(n_synthetic_fertilizer_managed_soil,
organic_n,
n_pasture_onfarm))
names(N20_indirect_emission) <- c("n_synthetic_fertilizer_managed_soil","n_organic","n_pasture_onfarm")
FracGASF <- dplyr::filter(ghg_ipcc_data[["table_11.1_&_table_11.3"]],emission_factors == "FracGASF")
FracGASM <- dplyr::filter(ghg_ipcc_data[["table_11.1_&_table_11.3"]],emission_factors == "FracGASM")
EF4 <- dplyr::filter(ghg_ipcc_data[["table_11.1_&_table_11.3"]],emission_factors == "EF4")
EF3PRP_CPP <- dplyr::filter(ghg_ipcc_data[["table_11.1_&_table_11.3"]],emission_factors == "EF3PRP-CPP")
EF3PRP_SO <- dplyr::filter(ghg_ipcc_data[["table_11.1_&_table_11.3"]],emission_factors == "EF3PRP-SO")
N20_onfarm_indirect_emission <- N20_indirect_emission%>%
mutate(FracGASF = FracGASF$n2o_emissions_from_managed_soils,
FracGASM = FracGASM$n2o_emissions_from_managed_soils,
EF4 = EF4$n2o_emissions_from_managed_soils,
annual_N20N_from_atmospheric_deposition = ((n_synthetic_fertilizer_managed_soil*FracGASF)+((n_organic+n_pasture_onfarm)*FracGASM))*EF4*(44/28))
###############################################################################################################################
## Off-farm soil
cattle_pig_poultry_n_pasture_off_farm <-sum(cattle_pig_poultry_n_pasture$off_farm,na.rm = TRUE)
sheep_and_other_n_pasture_off_farm <- sum(sheep_and_other_n_pasture$off_farm,na.rm = TRUE)
N20N_off_farm <- data.frame(rbind(cattle_pig_poultry_n_pasture_off_farm,sheep_and_other_n_pasture_off_farm))%>%
tibble::rownames_to_column()%>%
rename(category = rowname,n_off_farm_pasture = rbind.cattle_pig_poultry_n_pasture_off_farm..sheep_and_other_n_pasture_off_farm.)%>%
mutate(EF3PRP = ifelse(grepl("cattle",category),EF3PRP_CPP$n2o_emissions_from_managed_soils,EF3PRP_SO$n2o_emissions_from_managed_soils),
annual_N20N_off_farm_direct_emission =n_off_farm_pasture*EF3PRP,
FracGASM = FracGASM$n2o_emissions_from_managed_soils,
EF4 = EF4$n2o_emissions_from_managed_soils,
annual_N20N_from_atmospheric_deposition =annual_N20N_off_farm_direct_emission*FracGASM*EF4*(44/28))
ghg_soil <- list(annual_N20N_onfarm_direct_emission = annual_N20N_onfarm_direct_emission,
N20_onfarm_indirect_emission = N20_onfarm_indirect_emission,
N20N_off_farm = N20N_off_farm)
residue_burn <- crop_parameters%>%
mutate(amnt_crop_residue_burnt = residue_dry_yield*residue_burnt*area_total)
mass_residue_burn <- sum(residue_burn$amnt_crop_residue_burnt,na.rm = TRUE)
combusion_factor <- 0.80
ghg_burn <- ghg_ipcc_data[["table_2.5"]]%>%
mutate(mass_residue_burn,
combusion_factor,
amount_of_ghg_emission_from_fire = mass_residue_burn*combusion_factor*burnt_emission_factor)#equation 2.27
################################################################################################################################################################################################################################
#GHG off-farm
fertlizer_parameters <- para[["fertilizer"]]%>%
left_join(ghg_ipcc_data[["fertilizer_table"]], by=c("fertilizer_desc"="fertilizer_type"))%>%
mutate(fertlizer_ghg_emissions = quantity*emissions_factor_kg_CO2_eq_per_kg_fertilizer)
para[["fertilizer"]]
unnest(para[["fertilizer"]])
View(para)
para[["fertilizer"]]
length(para[["fertilizer"]])
if(length(para[["fertilizer"]]) == 0) {
fetilizer_ghg <- "No fertilizer used"
}else{
fertlizer_parameters <- para[["fertilizer"]]%>%
left_join(ghg_ipcc_data[["fertilizer_table"]], by=c("fertilizer_desc"="fertilizer_type"))%>%
mutate(fertlizer_ghg_emissions = quantity*emissions_factor_kg_CO2_eq_per_kg_fertilizer)
fertlizer_ghg_emissions_per_ha <- sum(fertlizer_parameters$fertlizer_ghg_emissions,na.rm = TRUE)/sum(land_used$area_total,na.rm = TRUE)
fetilizer_ghg <- list(fertlizer_parameters=fertlizer_parameters,
fertlizer_ghg_emissions_per_ha = fertlizer_ghg_emissions_per_ha)
}
################################################################################################################################################################################################################################
#GHG Rice
#filter rice feed
rice <- dplyr::filter(crop_parameters,grepl('Rice', feed_type_name))
if(nrow(rice)>0) {
if (rice$source_type!="Purchased") {
baseline_emission_factor <- ghg_ipcc_data[["table_5.11"]]$baseline_emission_factor
soil_type_scaling_factor <- ghg_ipcc_data[["table_5.11"]]$soil_type_scaling_factor
ghg_rice <- left_join(rice,land_used, by=c("feed_type_name"="feed"))%>%
left_join(ghg_ipcc_data[["table_5.12"]],by="ecosystem_type")%>%
left_join(ghg_ipcc_data[["table_5.13"]],by="water_regime")%>%
left_join(ghg_ipcc_data[["table_5.14"]],by="organic_amendment")%>%
mutate(baseline_emission_factor,
soil_type_scaling_factor,
Scaling_factor_for_both_types = (1+(fertilizer_rate*conversion_factor))^0.59,#equation 5.3
daily_emission = baseline_emission_factor*disaggregated_scaling_factor_w*disaggregated_scaling_factor_p*Scaling_factor_for_both_types*soil_type_scaling_factor,#equation 5.3
annual_methane_emission = area_total*cultivation_period*daily_emission)%>%
select(-residue_dry_yield,-residue_burnt)
}else{ghg_rice <- data.frame(annual_methane_emission = 0,message=c("rice is purchased"))}
}else{ghg_rice <- data.frame(annual_methane_emission = 0,message=c("no rice in feed basket"))}
################################################################################################################################################################################################################################
#GHG data merge
Methane	<- 28
N2O	<- 265
Enteric_fermentation_Methane <- sum(ef$enteric_methane_emissions,na.rm = T)/sum(land_used$area_total,na.rm = T)
Manure_Methane <- sum(eft$emission_factor,na.rm = T)/sum(land_used$area_total,na.rm = T)
Manure_Direct_N2O <- sum(direct_N2O$direct_N2O_emission,na.rm = T)/sum(land_used$area_total,na.rm = T)
Manure_Indirect_N2O <- sum(indirect_N2O$indirect_N2O_emission,na.rm = T)/sum(land_used$area_total,na.rm = T)
Soil_Direct_N2O <- sum(annual_N20N_onfarm_direct_emission$annual_N20N_direct_emission_from_managed_soil,na.rm = T)/sum(land_used$area_total,na.rm = T)
Soil_Indirect_N2O <- sum(N20_onfarm_indirect_emission$annual_N20N_from_atmospheric_deposition,na.rm = T)/sum(land_used$area_total,na.rm = T)
OFF_Farm_Soil_Direct_N2O <- sum(N20N_off_farm$annual_N20N_off_farm_direct_emission,na.rm = T)/sum(land_used$area_total,na.rm = T)
OFF_Farm_Soil_Indirect_N2O <- sum(N20N_off_farm$annual_N20N_from_atmospheric_deposition,na.rm = T)/sum(land_used$area_total,na.rm = T)
Burning <- ((ghg_burn[ghg_burn$ghg_gas=="CO2",5])+(ghg_burn[ghg_burn$ghg_gas=="CH4",5]*Methane)+(ghg_burn[ghg_burn$ghg_gas=="Nox",5]*N2O))/sum(land_used$area_total,na.rm = T)
Rice_production_Methane <- sum(ghg_rice$annual_methane_emission,na.rm = T)
Off_farm_emissions <- fertlizer_ghg_emissions_per_ha
if(length(para[["fertilizer"]]) == 0) {
fertlizer_ghg_emissions_per_ha <- "No fertilizer used"
}else{
fertlizer_parameters <- para[["fertilizer"]]%>%
left_join(ghg_ipcc_data[["fertilizer_table"]], by=c("fertilizer_desc"="fertilizer_type"))%>%
mutate(fertlizer_ghg_emissions = quantity*emissions_factor_kg_CO2_eq_per_kg_fertilizer)
fertlizer_ghg_emissions_per_ha <- sum(fertlizer_parameters$fertlizer_ghg_emissions,na.rm = TRUE)/sum(land_used$area_total,na.rm = TRUE)
fetilizer_ghg <- list(fertlizer_parameters=fertlizer_parameters,
fertlizer_ghg_emissions_per_ha = fertlizer_ghg_emissions_per_ha)
}
Off_farm_emissions <- fertlizer_ghg_emissions_per_ha
ghg_emissions <- data.frame(rbind(Enteric_fermentation_Methane,
Manure_Methane,
Manure_Direct_N2O,
Manure_Indirect_N2O,
Soil_Direct_N2O,
Soil_Indirect_N2O,
OFF_Farm_Soil_Direct_N2O,
OFF_Farm_Soil_Indirect_N2O,
Burning,
Rice_production_Methane,
Off_farm_emissions))%>%
tibble::rownames_to_column()%>%
rename(GHG_balance = rowname,kg_per_ha = rbind.Enteric_fermentation_Methane..Manure_Methane..Manure_Direct_N2O..)
library(cleaned)
# Cleaned sensitivity analysis
library(pse)
library(jsonlite)
library(tidyverse)
para <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/gui_test/VLA-Med-LB_02.json",
flatten = TRUE, simplifyDataFrame = TRUE)
ghg_ipcc_data <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/cleaned_tool/cleaned/inst/extdata/ghg_parameters.json",
flatten = TRUE, simplifyDataFrame = TRUE)
energy_parameters <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/cleaned_tool/cleaned/inst/extdata/energy_parameters.json",
flatten = TRUE, simplifyDataFrame = TRUE)
stock_change_parameters <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/cleaned_tool/cleaned/inst/extdata/stock_change_parameters.json",
flatten = TRUE, simplifyDataFrame = TRUE)
feed_basket_quality <- feed_quality(para)
energy_required <- energy_requirement(para,feed_basket_quality,energy_parameters)
land_required <- land_requirement(feed_basket_quality, energy_required, para)
soil_erosion <- soil_health(para, land_required)
water_required <- water_requirement(para, land_required)
nitrogen_balance <- n_balance(para, land_required, soil_erosion)
livestock_productivity <- land_productivity(para)
economics <- economics_payback(para, energy_required, livestock_productivity)
biomass <- biomass_calculation(para, land_required)
soil_carbon <- soil_organic_carbon(para, stock_change_para, land_required, biomass)
ghg_emissions <- ghg_emission(para,energy_required,ghg_ipcc_data,land_required,nitrogen_balance)
cleaned_output <- combineOutputs(feed_basket_quality,energy_required,land_required,soil_erosion,water_required,
nitrogen_balance,livestock_productivity,economics,biomass,soil_carbon,ghg_emissions)
rm(list = ls())
# Parameters of interest
factors <- c("herdsize", "angrowth", "anmilk")
# Parameter distribution
q <- c("qunif", "qnorm", "qnorm")
# Mean and standard deviation
q.arg <- list( list(min=1, max=200), list(mean=200, sd=50), list(mean=700, sd=250) )
# Model
oneRun <- function (herdsize, angrowth, anmilk) {
para <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/gui_test/VLA-Med-LB_02.json",
flatten = TRUE, simplifyDataFrame = TRUE)
ghg_ipcc_data <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/cleaned_tool/cleaned/inst/extdata/ghg_parameters.json",
flatten = TRUE, simplifyDataFrame = TRUE)
energy_parameters <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/cleaned_tool/cleaned/inst/extdata/energy_parameters.json",
flatten = TRUE, simplifyDataFrame = TRUE)
stock_change_parameters <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/cleaned_tool/cleaned/inst/extdata/stock_change_parameters.json",
flatten = TRUE, simplifyDataFrame = TRUE)
# Update the simulated data
para$livestock$herd_composition=herdsize
para$livestock$annual_growth=angrowth
para$livestock$annual_milk=anmilk
# Run cleaned
feed_basket_quality <- feed_quality(para)
energy_required <- energy_requirement(para,feed_basket_quality,energy_parameters)
land_required <- land_requirement(feed_basket_quality, energy_required, para)
soil_erosion <- soil_health(para, land_required)
water_required <- water_requirement(para, land_required)
nitrogen_balance <- n_balance(para, land_required, soil_erosion)
livestock_productivity <- land_productivity(para)
economics <- economics_payback(para, energy_required, livestock_productivity)
biomass <- biomass_calculation(para, land_required)
soil_carbon <- soil_organic_carbon(para, stock_change_para, land_required, biomass)
ghg_emissions <- ghg_emission(para,energy_required,ghg_ipcc_data,land_required,nitrogen_balance)
cleaned_output <- combineOutputs(feed_basket_quality,energy_required,land_required,soil_erosion,water_required,
nitrogen_balance,livestock_productivity,economics,biomass,soil_carbon,ghg_emissions)
name <- row.names(ghg_emissions)
x <- t(ghg_emissions[,-1])
colnames(x) <- name
return (x)
}
modelRun <- function (my.data) {
return(mapply(oneRun, my.data[,1], my.data[,2], my.data[,3]))
}
res.names <- c("Enteric_fermentation_Methane","Manure_Methane","Manure_Direct_N2O","Manure_Indirect_N2O","Soil_Direct_N2O","Soil_Indirect_N2O",
"OFF_Farm_Soil_Direct_N2O","OFF_Farm_Soil_Indirect_N2O","Burning","Rice_production_Methane","Off_farm_emissions")
myLHS <- LHS(modelRun, factors, 200, q, q.arg,res.names, nboot=50)
para <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/gui_test/VLA-Med-LB_02.json",
flatten = TRUE, simplifyDataFrame = TRUE)
ghg_ipcc_data <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/cleaned_tool/cleaned/inst/extdata/ghg_parameters.json",
flatten = TRUE, simplifyDataFrame = TRUE)
energy_parameters <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/cleaned_tool/cleaned/inst/extdata/energy_parameters.json",
flatten = TRUE, simplifyDataFrame = TRUE)
stock_change_parameters <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/cleaned_tool/cleaned/inst/extdata/stock_change_parameters.json",
flatten = TRUE, simplifyDataFrame = TRUE)
feed_basket_quality <- feed_quality(para)
energy_required <- energy_requirement(para,feed_basket_quality,energy_parameters)
View(energy_required)
View(energy_required[[1]])
myLHS <- LHS(modelRun, factors, 200, q, q.arg,res.names, nboot=50)
# Model
oneRun <- function (herdsize, angrowth, anmilk) {
para <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/gui_test/VLA-Med-LB_02.json",
flatten = TRUE, simplifyDataFrame = TRUE)
ghg_ipcc_data <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/cleaned_tool/cleaned/inst/extdata/ghg_parameters.json",
flatten = TRUE, simplifyDataFrame = TRUE)
energy_parameters <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/cleaned_tool/cleaned/inst/extdata/energy_parameters.json",
flatten = TRUE, simplifyDataFrame = TRUE)
stock_change_parameters <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/cleaned_tool/cleaned/inst/extdata/stock_change_parameters.json",
flatten = TRUE, simplifyDataFrame = TRUE)
# Update the simulated data
para$livestock$herd_composition=herdsize
para$livestock$annual_growth=angrowth
para$livestock$annual_milk=anmilk
# Run cleaned
feed_basket_quality <- feed_quality(para)
energy_required <- energy_requirement(para,feed_basket_quality,energy_parameters)
land_required <- land_requirement(feed_basket_quality, energy_required, para)
soil_erosion <- soil_health(para, land_required)
water_required <- water_requirement(para, land_required)
nitrogen_balance <- n_balance(para, land_required, soil_erosion)
livestock_productivity <- land_productivity(para)
economics <- economics_payback(para, energy_required, livestock_productivity)
biomass <- biomass_calculation(para, land_required)
soil_carbon <- soil_organic_carbon(para, stock_change_para, land_required, biomass)
ghg_emissions <- ghg_emission(para,energy_required,ghg_ipcc_data,land_required,nitrogen_balance)
# cleaned_output <- combineOutputs(feed_basket_quality,energy_required,land_required,soil_erosion,water_required,
#                                  nitrogen_balance,livestock_productivity,economics,biomass,soil_carbon,ghg_emissions)
name <- row.names(ghg_emissions)
x <- t(ghg_emissions[,-1])
colnames(x) <- name
return (x)
}
modelRun <- function (my.data) {
return(mapply(oneRun, my.data[,1], my.data[,2], my.data[,3]))
}
res.names <- c("Enteric_fermentation_Methane","Manure_Methane","Manure_Direct_N2O","Manure_Indirect_N2O","Soil_Direct_N2O","Soil_Indirect_N2O",
"OFF_Farm_Soil_Direct_N2O","OFF_Farm_Soil_Indirect_N2O","Burning","Rice_production_Methane","Off_farm_emissions")
rm(list = ls())
factors <- c("herdsize", "angrowth", "anmilk")
# Parameter distribution
q <- c("qunif", "qnorm", "qnorm")
# Mean and standard deviation
q.arg <- list( list(min=1, max=200), list(mean=200, sd=50), list(mean=700, sd=250) )
# Model
oneRun <- function (herdsize, angrowth, anmilk) {
para <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/gui_test/VLA-Med-LB_02.json",
flatten = TRUE, simplifyDataFrame = TRUE)
ghg_ipcc_data <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/cleaned_tool/cleaned/inst/extdata/ghg_parameters.json",
flatten = TRUE, simplifyDataFrame = TRUE)
energy_parameters <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/cleaned_tool/cleaned/inst/extdata/energy_parameters.json",
flatten = TRUE, simplifyDataFrame = TRUE)
stock_change_parameters <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/cleaned_tool/cleaned/inst/extdata/stock_change_parameters.json",
flatten = TRUE, simplifyDataFrame = TRUE)
# Update the simulated data
para$livestock$herd_composition=herdsize
para$livestock$annual_growth=angrowth
para$livestock$annual_milk=anmilk
# Run cleaned
feed_basket_quality <- feed_quality(para)
energy_required <- energy_requirement(para,feed_basket_quality,energy_parameters)
land_required <- land_requirement(feed_basket_quality, energy_required, para)
soil_erosion <- soil_health(para, land_required)
water_required <- water_requirement(para, land_required)
nitrogen_balance <- n_balance(para, land_required, soil_erosion)
livestock_productivity <- land_productivity(para)
economics <- economics_payback(para, energy_required, livestock_productivity)
biomass <- biomass_calculation(para, land_required)
soil_carbon <- soil_organic_carbon(para, stock_change_para, land_required, biomass)
ghg_emissions <- ghg_emission(para,energy_required,ghg_ipcc_data,land_required,nitrogen_balance)
# cleaned_output <- combineOutputs(feed_basket_quality,energy_required,land_required,soil_erosion,water_required,
#                                  nitrogen_balance,livestock_productivity,economics,biomass,soil_carbon,ghg_emissions)
name <- row.names(ghg_emissions)
x <- t(ghg_emissions[,-1])
colnames(x) <- name
return (x)
}
modelRun <- function (my.data) {
return(mapply(oneRun, my.data[,1], my.data[,2], my.data[,3]))
}
res.names <- c("Enteric_fermentation_Methane","Manure_Methane","Manure_Direct_N2O","Manure_Indirect_N2O","Soil_Direct_N2O","Soil_Indirect_N2O",
"OFF_Farm_Soil_Direct_N2O","OFF_Farm_Soil_Indirect_N2O","Burning","Rice_production_Methane","Off_farm_emissions")
myLHS <- LHS(modelRun, factors, 200, q, q.arg,res.names, nboot=50)
energy_required <- energy_requirement(para,feed_basket_quality,energy_parameters)
land_required <- land_requirement(feed_basket_quality, energy_required, para)
soil_erosion <- soil_health(para, land_required)
water_required <- water_requirement(para, land_required)
nitrogen_balance <- n_balance(para, land_required, soil_erosion)
livestock_productivity <- land_productivity(para)
economics <- economics_payback(para, energy_required, livestock_productivity)
biomass <- biomass_calculation(para, land_required)
soil_carbon <- soil_organic_carbon(para, stock_change_para, land_required, biomass)
para <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/gui_test/VLA-Med-LB_02.json",
flatten = TRUE, simplifyDataFrame = TRUE)
ghg_ipcc_data <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/cleaned_tool/cleaned/inst/extdata/ghg_parameters.json",
flatten = TRUE, simplifyDataFrame = TRUE)
energy_parameters <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/cleaned_tool/cleaned/inst/extdata/energy_parameters.json",
flatten = TRUE, simplifyDataFrame = TRUE)
stock_change_parameters <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/cleaned_tool/cleaned/inst/extdata/stock_change_parameters.json",
flatten = TRUE, simplifyDataFrame = TRUE)
feed_basket_quality <- feed_quality(para)
energy_required <- energy_requirement(para,feed_basket_quality,energy_parameters)
land_required <- land_requirement(feed_basket_quality, energy_required, para)
soil_erosion <- soil_health(para, land_required)
water_required <- water_requirement(para, land_required)
nitrogen_balance <- n_balance(para, land_required, soil_erosion)
livestock_productivity <- land_productivity(para)
economics <- economics_payback(para, energy_required, livestock_productivity)
biomass <- biomass_calculation(para, land_required)
soil_carbon <- soil_organic_carbon(para, stock_change_para, land_required, biomass)
ghg_emissions <- ghg_emission(para,energy_required,ghg_ipcc_data,land_required,nitrogen_balance)
myLHS <- LHS(modelRun, factors, 200, q, q.arg,res.names, nboot=50)
plotprcc(myLHS)
# See data used
get.data(myLHS)
# See the results
get.results(myLHS)
View(ghg_emissions)
library(cleaned)
# Cleaned sensitivity analysis
library(pse)
library(jsonlite)
library(tidyverse)
factors <- c("herdsize",  "anmilk")
# Parameter distribution
#q <- c("qunif", "qnorm", "qnorm")
q <- c("qunif",  "qnorm")
# Mean and standard deviation
#q.arg <- list( list(min=1, max=200), list(mean=200, sd=50), list(mean=700, sd=250) )
q.arg <- list( list(min=1, max=200), list(mean=700, sd=250) )
# Model
oneRun <- function (herdsize, angrowth, anmilk) {
para <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/gui_test/VLA-Med-LB_local_cow.json",
flatten = TRUE, simplifyDataFrame = TRUE)
ghg_ipcc_data <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/cleaned_tool/cleaned/inst/extdata/ghg_parameters.json",
flatten = TRUE, simplifyDataFrame = TRUE)
energy_parameters <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/cleaned_tool/cleaned/inst/extdata/energy_parameters.json",
flatten = TRUE, simplifyDataFrame = TRUE)
stock_change_parameters <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/cleaned_tool/cleaned/inst/extdata/stock_change_parameters.json",
flatten = TRUE, simplifyDataFrame = TRUE)
# Update the simulated data
para$livestock$herd_composition=herdsize
para$livestock$annual_growth=angrowth
para$livestock$annual_milk=anmilk
# Run cleaned
feed_basket_quality <- feed_quality(para)
energy_required <- energy_requirement(para,feed_basket_quality,energy_parameters)
land_required <- land_requirement(feed_basket_quality, energy_required, para)
soil_erosion <- soil_health(para, land_required)
water_required <- water_requirement(para, land_required)
nitrogen_balance <- n_balance(para, land_required, soil_erosion)
livestock_productivity <- land_productivity(para)
economics <- economics_payback(para, energy_required, livestock_productivity)
biomass <- biomass_calculation(para, land_required)
soil_carbon <- soil_organic_carbon(para, stock_change_para, land_required, biomass)
ghg_emissions <- ghg_emission(para,energy_required,ghg_ipcc_data,land_required,nitrogen_balance)
# cleaned_output <- combineOutputs(feed_basket_quality,energy_required,land_required,soil_erosion,water_required,
#                                  nitrogen_balance,livestock_productivity,economics,biomass,soil_carbon,ghg_emissions)
name <- row.names(ghg_emissions)
x <- t(ghg_emissions[,-1])
colnames(x) <- name
return (x)
}
modelRun <- function (my.data) {
return(mapply(oneRun, my.data[,1], my.data[,2], my.data[,3]))
}
res.names <- c("Enteric_fermentation_Methane","Manure_Methane","Manure_Direct_N2O","Manure_Indirect_N2O","Soil_Direct_N2O","Soil_Indirect_N2O",
"OFF_Farm_Soil_Direct_N2O","OFF_Farm_Soil_Indirect_N2O","Burning","Rice_production_Methane","Off_farm_emissions")
myLHS <- LHS(modelRun, factors, 20, q, q.arg,res.names, nboot=50)
# Model
oneRun <- function (herdsize, angrowth, anmilk) {
para <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/gui_test/VLA-Med-LB_local_cow.json",
flatten = TRUE, simplifyDataFrame = TRUE)
ghg_ipcc_data <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/cleaned_tool/cleaned/inst/extdata/ghg_parameters.json",
flatten = TRUE, simplifyDataFrame = TRUE)
energy_parameters <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/cleaned_tool/cleaned/inst/extdata/energy_parameters.json",
flatten = TRUE, simplifyDataFrame = TRUE)
stock_change_parameters <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/cleaned_tool/cleaned/inst/extdata/stock_change_parameters.json",
flatten = TRUE, simplifyDataFrame = TRUE)
# Update the simulated data
para$livestock$herd_composition=herdsize
#para$livestock$annual_growth=angrowth
para$livestock$annual_milk=anmilk
# Run cleaned
feed_basket_quality <- feed_quality(para)
energy_required <- energy_requirement(para,feed_basket_quality,energy_parameters)
land_required <- land_requirement(feed_basket_quality, energy_required, para)
soil_erosion <- soil_health(para, land_required)
water_required <- water_requirement(para, land_required)
nitrogen_balance <- n_balance(para, land_required, soil_erosion)
livestock_productivity <- land_productivity(para)
economics <- economics_payback(para, energy_required, livestock_productivity)
biomass <- biomass_calculation(para, land_required)
soil_carbon <- soil_organic_carbon(para, stock_change_para, land_required, biomass)
ghg_emissions <- ghg_emission(para,energy_required,ghg_ipcc_data,land_required,nitrogen_balance)
# cleaned_output <- combineOutputs(feed_basket_quality,energy_required,land_required,soil_erosion,water_required,
#                                  nitrogen_balance,livestock_productivity,economics,biomass,soil_carbon,ghg_emissions)
name <- row.names(ghg_emissions)
x <- t(ghg_emissions[,-1])
colnames(x) <- name
return (x)
}
modelRun <- function (my.data) {
return(mapply(oneRun, my.data[,1], my.data[,2], my.data[,3]))
}
res.names <- c("Enteric_fermentation_Methane","Manure_Methane","Manure_Direct_N2O","Manure_Indirect_N2O","Soil_Direct_N2O","Soil_Indirect_N2O",
"OFF_Farm_Soil_Direct_N2O","OFF_Farm_Soil_Indirect_N2O","Burning","Rice_production_Methane","Off_farm_emissions")
myLHS <- LHS(modelRun, factors, 20, q, q.arg,res.names, nboot=50)
modelRun <- function (my.data) {
#return(mapply(oneRun, my.data[,1], my.data[,2], my.data[,3]))
return(mapply(oneRun, my.data[,1], my.data[,2]))
}
res.names <- c("Enteric_fermentation_Methane","Manure_Methane","Manure_Direct_N2O","Manure_Indirect_N2O","Soil_Direct_N2O","Soil_Indirect_N2O",
"OFF_Farm_Soil_Direct_N2O","OFF_Farm_Soil_Indirect_N2O","Burning","Rice_production_Methane","Off_farm_emissions")
myLHS <- LHS(modelRun, factors, 20, q, q.arg,res.names, nboot=50)
# Model
oneRun <- function (herdsize, anmilk) {
para <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/gui_test/VLA-Med-LB_local_cow.json",
flatten = TRUE, simplifyDataFrame = TRUE)
ghg_ipcc_data <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/cleaned_tool/cleaned/inst/extdata/ghg_parameters.json",
flatten = TRUE, simplifyDataFrame = TRUE)
energy_parameters <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/cleaned_tool/cleaned/inst/extdata/energy_parameters.json",
flatten = TRUE, simplifyDataFrame = TRUE)
stock_change_parameters <- fromJSON("C:/Users/Soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/cleaned_tool/cleaned/inst/extdata/stock_change_parameters.json",
flatten = TRUE, simplifyDataFrame = TRUE)
# Update the simulated data
para$livestock$herd_composition=herdsize
#para$livestock$annual_growth=angrowth
para$livestock$annual_milk=anmilk
# Run cleaned
feed_basket_quality <- feed_quality(para)
energy_required <- energy_requirement(para,feed_basket_quality,energy_parameters)
land_required <- land_requirement(feed_basket_quality, energy_required, para)
soil_erosion <- soil_health(para, land_required)
water_required <- water_requirement(para, land_required)
nitrogen_balance <- n_balance(para, land_required, soil_erosion)
livestock_productivity <- land_productivity(para)
economics <- economics_payback(para, energy_required, livestock_productivity)
biomass <- biomass_calculation(para, land_required)
soil_carbon <- soil_organic_carbon(para, stock_change_para, land_required, biomass)
ghg_emissions <- ghg_emission(para,energy_required,ghg_ipcc_data,land_required,nitrogen_balance)
# cleaned_output <- combineOutputs(feed_basket_quality,energy_required,land_required,soil_erosion,water_required,
#                                  nitrogen_balance,livestock_productivity,economics,biomass,soil_carbon,ghg_emissions)
name <- row.names(ghg_emissions)
x <- t(ghg_emissions[,-1])
colnames(x) <- name
return (x)
}
modelRun <- function (my.data) {
#return(mapply(oneRun, my.data[,1], my.data[,2], my.data[,3]))
return(mapply(oneRun, my.data[,1], my.data[,2]))
}
res.names <- c("Enteric_fermentation_Methane","Manure_Methane","Manure_Direct_N2O","Manure_Indirect_N2O","Soil_Direct_N2O","Soil_Indirect_N2O",
"OFF_Farm_Soil_Direct_N2O","OFF_Farm_Soil_Indirect_N2O","Burning","Rice_production_Methane","Off_farm_emissions")
myLHS <- LHS(modelRun, factors, 20, q, q.arg,res.names, nboot=50)
# See data used
get.data(myLHS)
# See the results
get.results(myLHS)
plotprcc(myLHS)
