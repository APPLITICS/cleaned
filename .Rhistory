# select feed and transpose the data
season_feeds <- livestock_selected %>%
dplyr::filter(season == season_name) %>%
gather(feed,value,-season_name,-livestock_category_code,-livestock_category_name,-feed_variables)%>%
spread(feed_variables,value)
# select form energy requirment sheet
season_selected_energy <- energy_required[["seasonal_results"]] %>%
as.data.frame() %>%
dplyr::filter(livestock == livestock_category_code, season == season_name)
feed_items <- unique(season_feeds$feed)
land_requirements <- list()
for (i in feed_items){
# get crop yield
feed_production <- unnest(para[["feed_production"]], cols = c(feed_type_name))
feed_selected <- feed_production[feed_production$feed_type_name == i,]
# get main product removal
feed_item_selected <- as.data.frame(feed_selected[["feed_items"]])
# selected feed from season feeds above
selected_feed <- season_feeds[season_feeds$feed == i,]
land_requirements[[i]] <- selected_feed %>%
select(feed) %>%
mutate(feed_item_dm = selected_feed$fraction_dry_matter*season_selected_energy$dmi_s,
crop_yield = as.numeric(feed_selected$dry_yield)*1000,
crop_removal = as.numeric(feed_item_selected$main_product_removal),
cr_yield = as.numeric(feed_selected$residue_dry_yield)*1000,
crop_residue_removal = ifelse(feed_item_selected$source_type == "Residue",
as.numeric(feed_item_selected$residue_removal), 0),
area_total = ifelse(feed_item_selected$source_type == "Main",
feed_item_dm/(crop_yield*crop_removal),
ifelse(feed_item_selected$source_type != "Main", feed_item_dm/(cr_yield*crop_residue_removal), 0)),
area_non_feed = ifelse(crop_residue_removal > 0,
area_total*(crop_yield*crop_removal)/(crop_yield*crop_removal+cr_yield*crop_residue_removal), 0),
area_feed = ifelse(crop_residue_removal > 0,
area_total*(cr_yield*crop_residue_removal)/(crop_yield*crop_removal+cr_yield*crop_residue_removal),
area_total*(crop_yield*crop_removal+cr_yield*crop_residue_removal)/(crop_yield*crop_removal+cr_yield*crop_residue_removal)),
grasses = ifelse(feed_selected$feed_category == "grass", area_feed, 0),
tree_legume = ifelse(feed_selected$feed_category == "tree crop" | feed_selected$feed_category == "tree legume", area_feed, 0)) %>%
dplyr::mutate_if(is.numeric, list(~na_if(.,Inf))) %>%
replace(is.na(.), 0)
}
land_requirements <- land_requirements %>% bind_rows()
land_requirements <- cbind(season_name = rep(selected_feed$season_name, times = nrow(land_requirements)),
livestock_category_code = rep(selected_feed$livestock_category_code, times = nrow(land_requirements)),
livestock_category_name = rep(selected_feed$livestock_category_name, times = nrow(land_requirements)),
land_requirements)
# bind by rows and add into seasonal requirement list
seasonal_requirements[[season]] <- land_requirements %>% bind_rows()
}
livestock_requirements[[livestock]] <- seasonal_requirements %>% bind_rows()
}
land_requirements_all <- livestock_requirements %>% bind_rows()
land_requirement <- function(feed_basket_quality, energy_required, para){
livestock_category_code <- unique(feed_basket_quality$livestock_category_code)
livestock_requirements <- list()
for (livestock in livestock_category_code){
livestock_selected <- feed_basket_quality %>%
dplyr::filter(livestock == livestock_category_code)
seasons <- unique(feed_basket_quality$season_name)
seasonal_requirements <- list()
for (season in seasons){
# select feed and transpose the data
season_feeds <- livestock_selected %>%
dplyr::filter(season == season_name) %>%
gather(feed,value,-season_name,-livestock_category_code,-livestock_category_name,-feed_variables)%>%
spread(feed_variables,value)
# select form energy requirment sheet
season_selected_energy <- energy_required[["seasonal_results"]] %>%
as.data.frame() %>%
dplyr::filter(livestock == livestock_category_code, season == season_name)
feed_items <- unique(season_feeds$feed)
land_requirements <- list()
for (i in feed_items){
# get crop yield
feed_production <- unnest(para[["feed_production"]], cols = c(feed_type_name))
feed_selected <- feed_production[feed_production$feed_type_name == i,]
# get main product removal
feed_item_selected <- as.data.frame(feed_selected[["feed_items"]])
# selected feed from season feeds above
selected_feed <- season_feeds[season_feeds$feed == i,]
land_requirements[[i]] <- selected_feed %>%
select(feed) %>%
mutate(feed_item_dm = selected_feed$fraction_dry_matter*season_selected_energy$dmi_s,
crop_yield = as.numeric(feed_selected$dry_yield)*1000,
crop_removal = as.numeric(feed_item_selected$main_product_removal),
cr_yield = as.numeric(feed_selected$residue_dry_yield)*1000,
crop_residue_removal = ifelse(feed_item_selected$source_type == "Residue",
as.numeric(feed_item_selected$residue_removal), 0),
area_total = ifelse(feed_item_selected$source_type == "Main",
feed_item_dm/(crop_yield*crop_removal),
ifelse(feed_item_selected$source_type != "Main", feed_item_dm/(cr_yield*crop_residue_removal), 0)),
area_non_feed = ifelse(crop_residue_removal > 0,
area_total*(crop_yield*crop_removal)/(crop_yield*crop_removal+cr_yield*crop_residue_removal), 0),
area_feed = ifelse(crop_residue_removal > 0,
area_total*(cr_yield*crop_residue_removal)/(crop_yield*crop_removal+cr_yield*crop_residue_removal),
area_total*(crop_yield*crop_removal+cr_yield*crop_residue_removal)/(crop_yield*crop_removal+cr_yield*crop_residue_removal)),
grasses = ifelse(feed_selected$feed_category == "grass", area_feed, 0),
tree_legume = ifelse(feed_selected$feed_category == "tree crop" | feed_selected$feed_category == "tree legume", area_feed, 0)) %>%
dplyr::mutate_if(is.numeric, list(~na_if(.,Inf))) %>%
replace(is.na(.), 0)
}
land_requirements <- land_requirements %>% bind_rows()
land_requirements <- cbind(season_name = rep(selected_feed$season_name, times = nrow(land_requirements)),
livestock_category_code = rep(selected_feed$livestock_category_code, times = nrow(land_requirements)),
livestock_category_name = rep(selected_feed$livestock_category_name, times = nrow(land_requirements)),
land_requirements)
# bind by rows and add into seasonal requirement list
seasonal_requirements[[season]] <- land_requirements %>% bind_rows()
}
livestock_requirements[[livestock]] <- seasonal_requirements %>% bind_rows()
}
land_requirements_all <- livestock_requirements %>% bind_rows()
}
land_required <- land_requirement(feed_basket_quality, energy_required, para)
library(cleaned)
data(mufindi)
para <- mufindi #fromJSON(file.choose(),  flatten = TRUE)
data(ghg_para)
ghg_ipcc_data <- ghg_para
feed_basket_quality <- feed_quality(para)
energy_required <- energy_requirement(para,feed_basket_quality)
land_required <- land_requirement(feed_basket_quality, energy_required, para)
rm(list = ls())
para <- fromJSON(file.choose(),  flatten = TRUE)
library(raster)
library(rgdal)
setwd("~/Jasper")
lake <- raster("./IfItMayhelp-20210207T161551Z-001/IfItMayhelp/lakeAOI.tif")
image(lake)
lake_rcl <- reclassify(lake,matrix(NA,1,!NA,NA),ncol=3,byrow=T)
lake_rcl <- reclassify(lake,matrix(c(NA,1,!NA,NA),ncol=3,byrow=T))
image(lake_rcl)
lake_rcl <- reclassify(lake,matrix(c(NA,1,!NA,NA),ncol=2,byrow=T))
image(lake_rcl)
dem <- raster("./MicroCatchment-20210207T161547Z-001/MicroCatchment/Kenya/Lake3dem1kenya.tif")
dem_lk <- dem*lake_rcl
image(dem_lk)
lake_rcl
image(dem)
lake
lake_rcl <- reclassify(lake,matrix(c(NA,1,1,2,456,NA),ncol=3,byrow=T))
image(lake_rcl)
dem_lk <- dem*lake_rcl
image(dem_lk)
lake_rcl <- resample(reclassify(lake,matrix(c(NA,1,1,2,456,NA),ncol=3,byrow=T)),dem,method = "bilinear")
image(lake_rcl)
dem_lk <- dem*lake_rcl
image(dem_lk)
br851 <- raster("./MicroCatchment-20210207T161547Z-001/MicroCatchment/Lake3_KenyaEthiopia/aoiLk3br851.tif")
image(br851)
br851_lk <- br851*lake_rcl
image(br851_lk)
image(dem)
image(dem_lk)
lake_rcl2 <- resample(reclassify(lake,matrix(c(NA,1,1,2,456,NA),ncol=3,byrow=T)),dem,method = "bilinear")
image(br851)
image(lake_rcl2)
br851_lk <- br851*lake_rcl2
rm(list = ls())
lake <- raster("./IfItMayhelp-20210207T161551Z-001/IfItMayhelp/lakeAOI.tif")
dem <- raster("./MicroCatchment-20210207T161547Z-001/MicroCatchment/Kenya/Lake3dem1kenya.tif")
image(dem)
lake_rcl <- resample(reclassify(lake,matrix(c(NA,1,1,2,456,NA),ncol=3,byrow=T)),dem,method = "bilinear")
image(lake_rcl)
br851 <- raster("./MicroCatchment-20210207T161547Z-001/MicroCatchment/Lake3_KenyaEthiopia/aoiLk3br851.tif")
image(br851)
lake_rcl2 <- resample(reclassify(lake,matrix(c(NA,1,1,2,456,NA),ncol=3,byrow=T)),dem,method = "bilinear")
image(lake_rcl2)
dem_lk <- dem*lake_rcl
image(dem_lk)
br851_lk <- br851*lake_rcl2
image(br851_lk)
?writeRaster
writeRaster(dem_lk, filename=file.path(tmp, "dem.tif"), format="GTiff", overwrite=TRUE)
writeRaster(dem_lk, filename="dem.tif", format="GTiff", overwrite=TRUE)
writeRaster(br851_lk, filename="br851.tif", format="GTiff", overwrite=TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Load required packages
.packages = c("foreign", "tidyverse", "haven","sf","rstudioapi")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
setwd(dirname(getActiveDocumentContext()$path))
path <- "."
# Load required packages
.packages = c("foreign", "tidyverse", "haven","sf","rstudioapi")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
setwd(dirname(getActiveDocumentContext()$path))
path <- "."
hoousehold <- read.dta("./data/UGA_DHS_Data/household_data.dta")
View(hoousehold)
attr(hoousehold)
names(hoousehold)
summary(as.factor(hoousehold$HV007))
summary(as.factor(hoousehold$HV006))
household <- read.dta("./data/UGA_DHS_Data/household_data.dta")
write.csv(household,"./data/UGA_DHS_Data/household_data.csv")
write.csv(household,"data/UGA_DHS_Data/household_data.csv")
write.csv(household,"/data/UGA_DHS_Data/household_data.csv")
write.csv(household,"household_data.csv")
getwd()
library(cleaned)
data(mufindi)
para <- mufindi
feed_basket_quality <- feed_quality(para)
energy_required <- energy_requirement(para,feed_basket_quality)
land_required <- land_requirement(feed_basket_quality, energy_required, para)
library(cleaned)
data(mufindi)
para <- mufindi
feed_basket_quality <- feed_quality(para)
energy_required <- energy_requirement(para,feed_basket_quality)
land_required <- land_requirement(feed_basket_quality, energy_required, para)
library(cleaned)
data()
data(mufindi)
para <- mufindi
feed_basket_quality <- feed_quality(para)
library(cleaned)
data()
data(mufindi)
para <- mufindi
feed_basket_quality <- feed_quality(para)
energy_required <- energy_requirement(para,feed_basket_quality)
View(energy_required)
data(mufindi)
feed_basket_quality <- feed_quality(mufindi)
mufindi <- data(farm1)
para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
library(jsonlite)
para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
rm(mufindi)
feed_basket_quality <- feed_quality(para)
library(cleaned)
feed_basket_quality <- feed_quality(para)
energy_requirement(mufindi,feed_basket_quality)
rlang::last_error()
#get the seasons
seasons <- para[["seasons"]]
View(seasons)
livestock <- para[["livestock"]]%>%
rename(livestock_category_code=livetype_code,
livestock_category_name=livetype_desc)
livestock <- para[["livestock"]]
names(livestock)
library(tidyverse)
livestock <- para[["livestock"]]%>%
rename(livestock_category_code=livetype_code,
livestock_category_name=livetype_desc)
no_days <- 365
#Compute annual energy and protein required
annual_requirement <- livestock%>%select(livestock_category_code,livestock_category_name)%>%
mutate(energy_required_annually=((livestock$er_maintenance*no_days)+(livestock$er_grazing*livestock$grazing_displacement*no_days)+
ifelse(is.nan(((livestock$er_pregnancy/(no_days*livestock$birth_interval))*no_days)),0,((livestock$er_pregnancy/(no_days*livestock$birth_interval))*no_days))+
ifelse(is.nan(((livestock$er_lactation/(no_days*livestock$birth_interval))*no_days)),0,((livestock$er_lactation/(no_days*livestock$birth_interval))*no_days))+
(livestock$annual_milk*livestock$er_lactmilk)+(livestock$annual_growth*livestock$er_growth))*livestock$herd_composition,
protein_required_annually =((livestock$cp_maintenance*no_days)+(livestock$cp_grazing*livestock$grazing_displacement*no_days)+
ifelse(is.nan(((livestock$cp_pregnancy/(no_days*livestock$birth_interval))*no_days)),0,((livestock$cp_pregnancy/(no_days*livestock$birth_interval))*no_days))+
ifelse(is.nan(((livestock$cp_lactation/(no_days*livestock$birth_interval))*no_days)),0,((livestock$er_lactation/(no_days*livestock$birth_interval))*no_days))+
(livestock$annual_milk*livestock$cp_lactmilk)+(livestock$annual_growth*livestock$cp_growth))*livestock$herd_composition)
#get livestock energy and protein requirement per season
for (i in 1:nrow(seasons)) {
sl <- seasons$season_length[i]
#Preparing the seasonal feed quality
s_feed_basket_quality <- dplyr::filter(feed_basket_quality, season_name == seasons$season_name[i])%>%
gather(feed,value,-season_name,-livestock_category_code,-livestock_category_name,-feed_variables)%>%
spread(feed_variables,value)%>%
mutate(prod_me = fraction_as_fed*me_content_fresh,
prod_dm = fraction_as_fed*dm_content,
prod_cp = fraction_as_fed*cp_content_fresh)%>%
select(livestock_category_code,prod_me,prod_dm,prod_cp)%>%
group_by(livestock_category_code)%>%
summarise(average_me = sum(prod_me),
average_dm = sum(prod_dm),
average_cp=sum(prod_cp))
#Computation of seasonal requirements
temp <- annual_requirement%>%
mutate(season_name = seasons$season_name[i],
energy_required_by_season = annual_requirement$energy_required_annually*(sl/no_days),#compute energy require by season
protein_required_by_season = annual_requirement$protein_required_annually*(sl/no_days))%>% #compute protein require by season
left_join(s_feed_basket_quality, by = "livestock_category_code")%>%
mutate(fresh_intake_required_e = energy_required_by_season/average_me,
dmi_required_e = fresh_intake_required_e*average_dm/100,
fresh_intake_required_cp = protein_required_by_season/(average_cp/100),
dmi_required_cp = fresh_intake_required_cp*average_dm/100,
dmi_s = ifelse(dmi_required_cp>dmi_required_e,dmi_required_cp,dmi_required_e),
limiting = ifelse(dmi_required_e == 0 | dmi_required_cp == 0, NA,
ifelse(dmi_required_cp>dmi_required_e,"CP","ENERGY")),
me_intake_s = dmi_s*average_me*100/average_dm)
#Binding seasonal results
if (i==1) {df <- temp}
else{df <- rbind(df,temp)}
}
#Manure computation
manure_comp <- df%>%group_by(livestock_category_code)%>%
summarise(me_intake = sum(me_intake_s),
dmi_tot = sum(dmi_s))%>%
mutate(de_intake = me_intake/0.81,
ge_intake = dmi_tot*18.45,
annual_manure_produced = (dmi_tot*0.365),
daily_manure_produced = annual_manure_produced/365)%>%
left_join(livestock, by = "livestock_category_code")%>%
mutate(manure_onfarm_grazing = (annual_manure_produced*time_in_onfarm_grazing)-(annual_manure_produced*time_in_onfarm_grazing*manure_in_field),
n_content_manure_grazing = manure_onfarm_grazing*n_content,
manure_collected = annual_manure_produced*((time_in_stable*manure_in_stable)+
(time_in_non_roofed_enclosure*manure_in_non_roofed_enclosure)+
(time_in_onfarm_grazing*manure_in_field))*manure_as_fertilizer,
n_content_manure_collected = manure_collected*n_content,
n_content_manure_total = n_content_manure_grazing+n_content_manure_collected)%>%
select(livestock_category_code,me_intake,dmi_tot,de_intake,ge_intake,annual_manure_produced,daily_manure_produced,manure_onfarm_grazing,
n_content_manure_grazing,manure_collected,n_content_manure_collected,n_content_manure_total)
View(para)
#Manure computation
manure_comp <- df%>%group_by(livestock_category_code)%>%
summarise(me_intake = sum(me_intake_s),
dmi_tot = sum(dmi_s))%>%
mutate(de_intake = me_intake/0.81,
ge_intake = dmi_tot*18.45,
annual_manure_produced = (dmi_tot*0.365),
daily_manure_produced = annual_manure_produced/365)%>%
left_join(livestock, by = "livestock_category_code")%>%
mutate(manure_onfarm_grazing = (annual_manure_produced*time_in_onfarm_grazing)-(annual_manure_produced*time_in_onfarm_grazing*manure_in_field),
n_content_manure_grazing = manure_onfarm_grazing*n_content,
manure_collected = annual_manure_produced*((time_in_stable*manure_in_stable)+
(time_in_non_roofed_enclosure*manure_in_non_roofed_enclosure)+
(time_in_onfarm_grazing*manure_in_field))*manure_onfarm_fraction,
n_content_manure_collected = manure_collected*n_content,
n_content_manure_total = n_content_manure_grazing+n_content_manure_collected)%>%
select(livestock_category_code,me_intake,dmi_tot,de_intake,ge_intake,annual_manure_produced,daily_manure_produced,manure_onfarm_grazing,
n_content_manure_grazing,manure_collected,n_content_manure_collected,n_content_manure_total)
para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
feed_basket_quality <- feed_quality(para)
#get the seasons
seasons <- para[["seasons"]]
livestock <- para[["livestock"]]%>%
rename(livestock_category_code=livetype_code,
livestock_category_name=livetype_desc)
no_days <- 365
#Compute annual energy and protein required
annual_requirement <- livestock%>%select(livestock_category_code,livestock_category_name)%>%
mutate(energy_required_annually=((livestock$er_maintenance*no_days)+(livestock$er_grazing*livestock$grazing_displacement*no_days)+
ifelse(is.nan(((livestock$er_pregnancy/(no_days*livestock$birth_interval))*no_days)),0,((livestock$er_pregnancy/(no_days*livestock$birth_interval))*no_days))+
ifelse(is.nan(((livestock$er_lactation/(no_days*livestock$birth_interval))*no_days)),0,((livestock$er_lactation/(no_days*livestock$birth_interval))*no_days))+
(livestock$annual_milk*livestock$er_lactmilk)+(livestock$annual_growth*livestock$er_growth))*livestock$herd_composition,
protein_required_annually =((livestock$cp_maintenance*no_days)+(livestock$cp_grazing*livestock$grazing_displacement*no_days)+
ifelse(is.nan(((livestock$cp_pregnancy/(no_days*livestock$birth_interval))*no_days)),0,((livestock$cp_pregnancy/(no_days*livestock$birth_interval))*no_days))+
ifelse(is.nan(((livestock$cp_lactation/(no_days*livestock$birth_interval))*no_days)),0,((livestock$er_lactation/(no_days*livestock$birth_interval))*no_days))+
(livestock$annual_milk*livestock$cp_lactmilk)+(livestock$annual_growth*livestock$cp_growth))*livestock$herd_composition)
#get livestock energy and protein requirement per season
for (i in 1:nrow(seasons)) {
sl <- seasons$season_length[i]
#Preparing the seasonal feed quality
s_feed_basket_quality <- dplyr::filter(feed_basket_quality, season_name == seasons$season_name[i])%>%
gather(feed,value,-season_name,-livestock_category_code,-livestock_category_name,-feed_variables)%>%
spread(feed_variables,value)%>%
mutate(prod_me = fraction_as_fed*me_content_fresh,
prod_dm = fraction_as_fed*dm_content,
prod_cp = fraction_as_fed*cp_content_fresh)%>%
select(livestock_category_code,prod_me,prod_dm,prod_cp)%>%
group_by(livestock_category_code)%>%
summarise(average_me = sum(prod_me),
average_dm = sum(prod_dm),
average_cp=sum(prod_cp))
#Computation of seasonal requirements
temp <- annual_requirement%>%
mutate(season_name = seasons$season_name[i],
energy_required_by_season = annual_requirement$energy_required_annually*(sl/no_days),#compute energy require by season
protein_required_by_season = annual_requirement$protein_required_annually*(sl/no_days))%>% #compute protein require by season
left_join(s_feed_basket_quality, by = "livestock_category_code")%>%
mutate(fresh_intake_required_e = energy_required_by_season/average_me,
dmi_required_e = fresh_intake_required_e*average_dm/100,
fresh_intake_required_cp = protein_required_by_season/(average_cp/100),
dmi_required_cp = fresh_intake_required_cp*average_dm/100,
dmi_s = ifelse(dmi_required_cp>dmi_required_e,dmi_required_cp,dmi_required_e),
limiting = ifelse(dmi_required_e == 0 | dmi_required_cp == 0, NA,
ifelse(dmi_required_cp>dmi_required_e,"CP","ENERGY")),
me_intake_s = dmi_s*average_me*100/average_dm)
#Binding seasonal results
if (i==1) {df <- temp}
else{df <- rbind(df,temp)}
}
#Manure computation
manure_comp <- df%>%group_by(livestock_category_code)%>%
summarise(me_intake = sum(me_intake_s),
dmi_tot = sum(dmi_s))%>%
mutate(de_intake = me_intake/0.81,
ge_intake = dmi_tot*18.45,
annual_manure_produced = (dmi_tot*0.365),
daily_manure_produced = annual_manure_produced/365)%>%
left_join(livestock, by = "livestock_category_code")%>%
mutate(manure_onfarm_grazing = (annual_manure_produced*time_in_onfarm_grazing)-(annual_manure_produced*time_in_onfarm_grazing*manure_in_field),
n_content_manure_grazing = manure_onfarm_grazing*n_content,
manure_collected = annual_manure_produced*((time_in_stable*manure_in_stable)+
(time_in_non_roofed_enclosure*manure_in_non_roofed_enclosure)+
(time_in_onfarm_grazing*manure_in_field))*manure_onfarm_fraction,
n_content_manure_collected = manure_collected*n_content,
n_content_manure_total = n_content_manure_grazing+n_content_manure_collected)%>%
select(livestock_category_code,me_intake,dmi_tot,de_intake,ge_intake,annual_manure_produced,daily_manure_produced,manure_onfarm_grazing,
n_content_manure_grazing,manure_collected,n_content_manure_collected,n_content_manure_total)
annual_results <- annual_requirement #left_join(annual_requirement,manure_comp)
seasonal_results <- select(df,season_name,livestock_category_code,livestock_category_name,energy_required_by_season,protein_required_by_season,
fresh_intake_required_e,dmi_required_e,fresh_intake_required_cp,dmi_required_cp,dmi_s,limiting,me_intake_s)
#return results
results <- list(annual_results = annual_results,
seasonal_results = seasonal_results)
return(results)
View(results)
View(annual_results)
# clear your work space
rm(list = ls(all = TRUE))
para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
feed_basket_quality <- feed_quality(para)
para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
feed_basket_quality <- feed_quality(para)
View(feed_basket_quality)
energy_requirement(para,feed_basket_quality)
energy <- energy_requirement(para,feed_basket_quality)
names(energy)
view(energy["annual_results"])
view(energy["seasonal_results"])
library(cleaned)
# clear your work space
rm(list = ls(all = TRUE))
para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
feed_basket_quality <- feed_quality(para)
energy <- energy_requirement(para,feed_basket_quality)
library(cleaned)
# clear your work space
rm(list = ls(all = TRUE))
para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
feed_basket_quality <- feed_quality(para)
energy <- energy_requirement(para,feed_basket_quality)
seasons <- para[["seasons"]]
livestock <- para[["livestock"]]%>%
rename(livestock_category_code=livetype_code,
livestock_category_name=livetype_desc)
no_days <- 365
#Compute annual energy and protein required
annual_requirement <- livestock%>%select(livestock_category_code,livestock_category_name)%>%
mutate(energy_required_annually=((livestock$er_maintenance*no_days)+(livestock$er_grazing*livestock$grazing_displacement*no_days)+
ifelse(is.nan(((livestock$er_pregnancy/(no_days*livestock$birth_interval))*no_days)),0,((livestock$er_pregnancy/(no_days*livestock$birth_interval))*no_days))+
ifelse(is.nan(((livestock$er_lactation/(no_days*livestock$birth_interval))*no_days)),0,((livestock$er_lactation/(no_days*livestock$birth_interval))*no_days))+
(livestock$annual_milk*livestock$er_lactmilk)+(livestock$annual_growth*livestock$er_growth))*livestock$herd_composition,
protein_required_annually =((livestock$cp_maintenance*no_days)+(livestock$cp_grazing*livestock$grazing_displacement*no_days)+
ifelse(is.nan(((livestock$cp_pregnancy/(no_days*livestock$birth_interval))*no_days)),0,((livestock$cp_pregnancy/(no_days*livestock$birth_interval))*no_days))+
ifelse(is.nan(((livestock$cp_lactation/(no_days*livestock$birth_interval))*no_days)),0,((livestock$er_lactation/(no_days*livestock$birth_interval))*no_days))+
(livestock$annual_milk*livestock$cp_lactmilk)+(livestock$annual_growth*livestock$cp_growth))*livestock$herd_composition)
#get livestock energy and protein requirement per season
for (i in 1:nrow(seasons)) {
sl <- seasons$season_length[i]
#Preparing the seasonal feed quality
s_feed_basket_quality <- dplyr::filter(feed_basket_quality, season_name == seasons$season_name[i])%>%
gather(feed,value,-season_name,-livestock_category_code,-livestock_category_name,-feed_variables)%>%
spread(feed_variables,value)%>%
mutate(prod_me = fraction_as_fed*me_content_fresh,
prod_dm = fraction_as_fed*dm_content,
prod_cp = fraction_as_fed*cp_content_fresh)%>%
select(livestock_category_code,prod_me,prod_dm,prod_cp)%>%
group_by(livestock_category_code)%>%
summarise(average_me = sum(prod_me),
average_dm = sum(prod_dm),
average_cp=sum(prod_cp))
#Computation of seasonal requirements
temp <- annual_requirement%>%
mutate(season_name = seasons$season_name[i],
energy_required_by_season = annual_requirement$energy_required_annually*(sl/no_days),#compute energy require by season
protein_required_by_season = annual_requirement$protein_required_annually*(sl/no_days))%>% #compute protein require by season
left_join(s_feed_basket_quality, by = "livestock_category_code")%>%
mutate(fresh_intake_required_e = energy_required_by_season/average_me,
dmi_required_e = fresh_intake_required_e*average_dm/100,
fresh_intake_required_cp = protein_required_by_season/(average_cp/100),
dmi_required_cp = fresh_intake_required_cp*average_dm/100,
dmi_s = ifelse(dmi_required_cp>dmi_required_e,dmi_required_cp,dmi_required_e),
limiting = ifelse(dmi_required_e == 0 | dmi_required_cp == 0, NA,
ifelse(dmi_required_cp>dmi_required_e,"CP","ENERGY")),
me_intake_s = dmi_s*average_me*100/average_dm)
#Binding seasonal results
if (i==1) {df <- temp}
else{df <- rbind(df,temp)}
}
#Manure computation
manure_comp <- df%>%group_by(livestock_category_code)%>%
summarise(me_intake = sum(me_intake_s),
dmi_tot = sum(dmi_s))%>%
mutate(de_intake = me_intake/0.81,
ge_intake = dmi_tot*18.45,
annual_manure_produced = (dmi_tot*0.365),
daily_manure_produced = annual_manure_produced/365)%>%
left_join(livestock, by = "livestock_category_code")%>%
mutate(manure_onfarm_grazing = (annual_manure_produced*time_in_onfarm_grazing)-(annual_manure_produced*time_in_onfarm_grazing*manure_in_field),
n_content_manure_grazing = manure_onfarm_grazing*n_content,
manure_collected = annual_manure_produced*((time_in_stable*manure_in_stable)+
(time_in_non_roofed_enclosure*manure_in_non_roofed_enclosure)+
(time_in_onfarm_grazing*manure_in_field))*manure_onfarm_fraction,
n_content_manure_collected = manure_collected*n_content,
n_content_manure_total = n_content_manure_grazing+n_content_manure_collected)%>%
select(livestock_category_code,me_intake,dmi_tot,de_intake,ge_intake,annual_manure_produced,daily_manure_produced,manure_onfarm_grazing,
n_content_manure_grazing,manure_collected,n_content_manure_collected,n_content_manure_total)
View(annual_requirement)
View(manure_comp)
?left_join
# clear your work space
rm(list = ls(all = TRUE))
library(cleaned)
para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
feed_basket_quality <- feed_quality(para)
energy <- energy_requirement(para,feed_basket_quality)
view(energy["seasonal_results"])
view(energy["annual_results"])
