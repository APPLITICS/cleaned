livestock <- livestock_category_names[1]
livetsock
livestock
seasons <- para[["seasons"]]
# Compute feeding season ratio
seasons <- seasons %>% mutate(feeding_ratio = season_length/sum(seasons$season_length))
season_allocation <- list()
season <- 1
feed_production <- unnest(para[["feed_production"]], cols = c(feed_type_name))
feed_types <- unique(feed_production$feed_type_name)
feed_allocation <- list()
i <- 1
feed_selected <- feed_production %>% filter(feed_type_name %in%
feed_production$feed_type_name[i])
feed_item <- as.data.frame(feed_selected[["feed_items"]])
# calculate me and dm fresh
feed_item <- feed_item %>%
mutate_at(c("cp_content","me_content", "dm_content"), as.numeric) %>%
select(feed_item_code, feed_item_name, cp_content, me_content, dm_content) %>%
mutate(me_content_fresh = dm_content * me_content/100,
cp_content_fresh = dm_content * cp_content/100,
de_fraction = me_content * 0.066) %>%
select(feed_item_code, feed_item_name, cp_content_fresh, de_fraction, dm_content, me_content_fresh)
# Extracting allocation
feeding_seasons <- unnest(para[["livestock_feeding_seasons"]],
cols = c(livestock_categories)) %>% filter(season_name %in%
seasons$season_name[season])
feeding_seasons <- feeding_seasons %>% mutate(livestock_category_name = ifelse(livestock_category_code %in%
"01", "Cows (local)", ifelse(livestock_category_code %in%
"02", "Cows (improved)", ifelse(livestock_category_code %in%
"03", "Adult cattle - male", ifelse(livestock_category_code %in%
"04", "Calves", ifelse(livestock_category_code %in% "05",
"Buffalo (dairy)", ifelse(livestock_category_code %in%
"06", "Sheep/Goats - Ewes/Does", ifelse(livestock_category_code %in%
"07", "Pigs - lactating/pregnant sows", ifelse(livestock_category_code %in%
"08", "Calves", ifelse(livestock_category_code %in%
"09", "Cows (high productive)", "Error"))))))))))
livestock_selected <- feeding_seasons[feeding_seasons$livestock_category_code ==
livestock, ]
feed_item_select <- as.data.frame(livestock_selected[["allocation:"]])
# select feed item
feed_item_selected <- feed_item_select[feed_item_select$feed_item_code ==
feed_item$feed_item_code, ]
livestock_selected <- feeding_seasons[feeding_seasons$livestock_category_code ==
livestock, ]
livestock <- para[["livestock"]]
livestock
livestock_category_names <- c(livestock$livestock_category_code)
livestock_category_names
livestock_allocation <- list()
livestock <- 1
livestock <- livestock_category_names[1]
livestock
seasons <- para[["seasons"]]
seasons
# Compute feeding season ratio
seasons <- seasons %>% mutate(feeding_ratio = season_length/sum(seasons$season_length))
seasons
season_allocation <- list()
season <- 1
feed_production <- unnest(para[["feed_production"]], cols = c(feed_type_name))
feed_production
feed_types <- unique(feed_production$feed_type_name)
feed_types
feed_types <- unique(feed_production$feed_type_name)
feed_allocation <- list()
i <- 1
feed_selected <- feed_production %>% filter(feed_type_name %in%
feed_production$feed_type_name[i])
feed_selected
feed_item <- as.data.frame(feed_selected[["feed_items"]])
feed_item
View(feed_item)
feed_item %>%
mutate_at(c("cp_content","me_content", "dm_content"), as.numeric)
feed_item %>%
mutate_at(c("cp_content","me_content", "dm_content"), as.numeric) %>%
select(feed_item_code, feed_item_name, cp_content, me_content, dm_content) %>%
mutate(me_content_fresh = dm_content * me_content/100,
cp_content_fresh = dm_content * cp_content/100,
de_fraction = me_content * 0.066)
# calculate me and dm fresh
feed_item <- feed_item %>%
mutate_at(c("cp_content","me_content", "dm_content"), as.numeric) %>%
select(feed_item_code, feed_item_name, cp_content, me_content, dm_content) %>%
mutate(me_content_fresh = dm_content * me_content/100,
cp_content_fresh = dm_content * cp_content/100,
de_fraction = me_content * 0.066) %>%
select(feed_item_code, feed_item_name, cp_content_fresh, de_fraction, dm_content, me_content_fresh)
View(feed_item)
# Extracting allocation
feeding_seasons <- unnest(para[["livestock_feeding_seasons"]],
cols = c(livestock_categories)) %>% filter(season_name %in%
seasons$season_name[season])
feeding_seasons
# Extracting allocation
feeding_seasons <- unnest(para[["livestock_feeding_seasons"]],
cols = c(livestock_categories)) %>% filter(season_name %in%
seasons$season_name[season])
unnest(para[["livestock_feeding_seasons"]],
cols = c(livestock_categories))
test <- unnest(para[["livestock_feeding_seasons"]],
cols = c(livestock_categories))
test
# Load required packages
.packages = c("jsonlite","tidyverse", "lubridate", "data.table", "tidyr", "dplyr")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/examplemufindiT23.json"),  flatten = TRUE)
livestock <- para[["livestock"]]
livestock_category_names <- c(livestock$livestock_category_code)
livestock_allocation <- list()
livestock <- livestock_category_names[1]
livestock
seasons <- para[["seasons"]]
# Compute feeding season ratio
seasons <- seasons %>% mutate(feeding_ratio = season_length/sum(seasons$season_length))
season_allocation <- list()
season <- 1
feed_production <- unnest(para[["feed_production"]], cols = c(feed_type_name))
feed_types <- unique(feed_production$feed_type_name)
feed_allocation <- list()
i <- 1
feed_selected <- feed_production %>% filter(feed_type_name %in%
feed_production$feed_type_name[i])
feed_item <- as.data.frame(feed_selected[["feed_items"]])
feed_item
# calculate me and dm fresh
feed_item <- feed_item %>%
mutate_at(c("cp_content","me_content", "dm_content"), as.numeric) %>%
select(feed_item_code, feed_item_name, cp_content, me_content, dm_content) %>%
mutate(me_content_fresh = dm_content * me_content/100,
cp_content_fresh = dm_content * cp_content/100,
de_fraction = me_content * 0.066) %>%
select(feed_item_code, feed_item_name, cp_content_fresh, de_fraction, dm_content, me_content_fresh)
# Extracting allocation
feeding_seasons <- unnest(para[["livestock_feeding_seasons"]],
cols = c(livestock_categories)) %>% filter(season_name %in%
seasons$season_name[season])
feeding_seasons
unnest(para[["livestock_feeding_seasons"]],
cols = c(livestock_categories))
# Load required packages
.packages = c("jsonlite","tidyverse", "lubridate", "data.table", "tidyr", "dplyr")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/examplemufindiT23.json"),  flatten = TRUE)
# Feed quality calculation
feed_basket_quality <- feed_quality(para)
# Load required packages
.packages = c("jsonlite","tidyverse", "lubridate", "data.table", "tidyr", "dplyr")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/example.json"),  flatten = TRUE)
# Feed quality calculation
feed_basket_quality <- feed_quality(para)
# Energy requirement
energy_required <- energy_requirement(para,feed_basket_quality)
# Land requirement
land_required <- land_requirement(feed_basket_quality, energy_required, para)
View(land_required)
View(feed_basket_quality)
View(feed_production)
View(feed_basket_quality)
View(feed_production)
View(land_required)
no_days <- 365
names(para)
soil_type <- para[["soil_description"]]
# Loading data
para <- fromJSON(paste0(path,"/data/example.json"),  flatten = TRUE)
names(para)
erositivity_r <- 0.55*(para[["annual_precipitation"]]/para[["rain_length"]]/30)-4.7
para[["rain_length"]]
erositivity_r <- 0.55*(as.numeric(para[["annual_precipitation"]])/as.numeric(para[["rain_length"]])/30)-4.7
erositivity_r
as.numeric(para[["annual_precipitation"]])
as.numeric(para[["rain_length"]])
as.numeric(para[["rain_length"]])/30
as.numeric(para[["rain_length"]])/30
as.numeric(para[["annual_precipitation"]])/as.numeric(para[["rain_length"]])/30
as.numeric(para[["annual_precipitation"]])
as.numeric(para[["rain_length"]])/30
as.numeric(para[["annual_precipitation"]])/as.numeric(para[["rain_length"]])/30
as.numeric(para[["annual_precipitation"]])/as.numeric(para[["rain_length"]])/30
as.numeric(para[["rain_length"]])
as.numeric(para[["rain_length"]])/30
erositivity_r <- 0.55*(as.numeric(para[["annual_precipitation"]])/(as.numeric(para[["rain_length"]])/30))-4.7
erositivity_r
erodibility_k <- as.numeric(para[["soil_k_value"]])
feed_production <- unnest(para[["feed_production"]], cols = c(feed_type_name))
feed_production
View(feed_production)
feed_items <- unique(season_feeds$feed)
feed_items
# Load required packages
.packages = c("jsonlite","tidyverse", "lubridate", "data.table", "tidyr", "dplyr")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst])
lapply(.packages, require, character.only=TRUE)
# Working directory
path <- "."
# load functions
source("./cleanedFunctions.R")
# Loading data
para <- fromJSON(paste0(path,"/data/example.json"),  flatten = TRUE)
# Feed quality calculation
feed_basket_quality <- feed_quality(para)
# Energy requirement
energy_required <- energy_requirement(para,feed_basket_quality)
# Land requirement
land_required <- land_requirement(feed_basket_quality, energy_required, para)
i <- feed_types[1]
feed_selected <- feed_production[feed_production$feed_type_name == i,]
feed_selected
feed_production <- unnest(para[["feed_production"]], cols = c(feed_type_name))
feed_selected <- feed_production[feed_production$feed_type_name == i,]
feed_production
i
feed_types
feed_production[feed_production$feed_type_name == i,]
feed_production$feed_type_name
i
feed_types
View(feed_production)
View(feed_production[[20]][[1]])
feed_production <- unnest(para[["feed_production"]], cols = c(feed_type_name))
feed_types <- unique(feed_production$feed_type_name)
feed_types
i <- feed_types[1]
i
feed_selected <- feed_production[feed_production$feed_type_name == i,]
feed_selected
View(feed_selected)
feed_item_selected <- as.data.frame(feed_selected[["feed_items"]])
View(feed_item_selected)
names(feed_item_selected)
slope_p_factor <- feed_item_selected$slope_p_factor
slope_length <- feed_item_selected$slope_length
slope_p_factor <- feed_item_selected$slope_p_factor
slope_length <- feed_item_selected$slope_length
slope_p_factor
slope_stepness_length <- function(x, y){
z <- ifelse(x == "Flat (0-5%)" & y == "1", 0.3,
ifelse(x == "Hilly (5-20%)" & y == "1", 0.52,
ifelse(x == "Steep (20-30%)" & y == "1", 0.59,
ifelse(x == "Extremely steep (30%+)" & y == "1", 0.65))))
return(z)
}
slope_stepness_length <- slope_stepness_length(slope_p_factor, slope_length)
slope_stepness_length <- function(x, y){
z <- ifelse(x == "Flat (0-5%)" & y == "1", 0.3,
ifelse(x == "Hilly (5-20%)" & y == "1", 0.52,
ifelse(x == "Steep (20-30%)" & y == "1", 0.59,
ifelse(x == "Extremely steep (30%+)" & y == "1", 0.65, NA))))
return(z)
}
slope_stepness_length <- slope_stepness_length(slope_p_factor, slope_length)
slope_stepness_length
slope_p_factor <- feed_item_selected$slope_p_factor
slope_length <- feed_item_selected$slope_length
slope_stepness_length <- function(x, y){
z <- ifelse(x == "Flat (0-5%)" & y == "1", 0.3,
ifelse(x == "Hilly (5-20%)" & y == "1", 0.52,
ifelse(x == "Steep (20-30%)" & y == "1", 0.59,
ifelse(x == "Extremely steep (30%+)" & y == "1", 0.65,
ifelse(x == "Flat (0-5%)" & y == "3", 0.3,
ifelse(x == "Hilly (5-20%)" & y == "3", 0.85,
ifelse(x == "Steep (20-30%)" & y == "3", 1.13,
ifelse(x == "Extremely steep (30%+)" & y == "3", 1.36,
ifelse(x == "Flat (0-5%)" & y == "5", 0.3,
ifelse(x == "Hilly (5-20%)" & y == "5", 1.06,
ifelse(x == "Steep (20-30%)" & y == "5", 1.53,
ifelse(x == "Extremely steep (30%+)" & y == "5", 1.95,
ifelse(x == "Flat (0-5%)" & y == "15", 0.49,
ifelse(x == "Hilly (5-20%)" & y == "15", 2.22,
ifelse(x == "Steep (20-30%)" & y == "15", 3.39,
ifelse(x == "Extremely steep (30%+)" & y == "15", 4.45, NA))))))))))))))))
return(z)
}
slope_steepness_length <- slope_steepness_length(slope_p_factor, slope_length)
slope_p_factor <- feed_item_selected$slope_p_factor
slope_length <- feed_item_selected$slope_length
slope_steepness_length <- function(x, y){
z <- ifelse(x == "Flat (0-5%)" & y == "1", 0.3,
ifelse(x == "Hilly (5-20%)" & y == "1", 0.52,
ifelse(x == "Steep (20-30%)" & y == "1", 0.59,
ifelse(x == "Extremely steep (30%+)" & y == "1", 0.65,
ifelse(x == "Flat (0-5%)" & y == "3", 0.3,
ifelse(x == "Hilly (5-20%)" & y == "3", 0.85,
ifelse(x == "Steep (20-30%)" & y == "3", 1.13,
ifelse(x == "Extremely steep (30%+)" & y == "3", 1.36,
ifelse(x == "Flat (0-5%)" & y == "5", 0.3,
ifelse(x == "Hilly (5-20%)" & y == "5", 1.06,
ifelse(x == "Steep (20-30%)" & y == "5", 1.53,
ifelse(x == "Extremely steep (30%+)" & y == "5", 1.95,
ifelse(x == "Flat (0-5%)" & y == "15", 0.49,
ifelse(x == "Hilly (5-20%)" & y == "15", 2.22,
ifelse(x == "Steep (20-30%)" & y == "15", 3.39,
ifelse(x == "Extremely steep (30%+)" & y == "15", 4.45, NA))))))))))))))))
return(z)
}
slope_steepness_length <- slope_steepness_length(slope_p_factor, slope_length)
slope_p_factor <- feed_item_selected$slope_p_factor
slope_length <- feed_item_selected$slope_length
slope_steepness_length <- function(x, y){
z <- ifelse(x == "Flat (0-5%)" & y == "1", 0.3,
ifelse(x == "Hilly (5-20%)" & y == "1", 0.52,
ifelse(x == "Steep (20-30%)" & y == "1", 0.59,
ifelse(x == "Extremely steep (30%+)" & y == "1", 0.65,
ifelse(x == "Flat (0-5%)" & y == "3", 0.3,
ifelse(x == "Hilly (5-20%)" & y == "3", 0.85,
ifelse(x == "Steep (20-30%)" & y == "3", 1.13,
ifelse(x == "Extremely steep (30%+)" & y == "3", 1.36,
ifelse(x == "Flat (0-5%)" & y == "5", 0.3,
ifelse(x == "Hilly (5-20%)" & y == "5", 1.06,
ifelse(x == "Steep (20-30%)" & y == "5", 1.53,
ifelse(x == "Extremely steep (30%+)" & y == "5", 1.95,
ifelse(x == "Flat (0-5%)" & y == "15", 0.49,
ifelse(x == "Hilly (5-20%)" & y == "15", 2.22,
ifelse(x == "Steep (20-30%)" & y == "15", 3.39,
ifelse(x == "Extremely steep (30%+)" & y == "15", 4.45,
ifelse(x == "Flat (0-5%)" & y == "30", 0.65,
ifelse(x == "Hilly (5-20%)" & y == "30", 3.4,
ifelse(x == "Steep (20-30%)" & y == "30", 5.34,
ifelse(x == "Extremely steep (30%+)" & y == "30", 7.14,
ifelse(x == "Flat (0-5%)" & y == "90", 1.01,
ifelse(x == "Hilly (5-20%)" & y == "90", 6.68,
ifelse(x == "Steep (20-30%)" & y == "90", 11.01,
ifelse(x == "Extremely steep (30%+)" & y == "90", 15.14, NA))))))))))))))))))))))))
return(z)
}
slope_steepness_length <- slope_steepness_length(slope_p_factor, slope_length)
landcover_c_factor <- feed_item_selected$landcover_c_factor
slope_steepness_length_conversion <- function(x, y){
z <- ifelse(x == "Flat (0-5%)" & y == "1", 0.3,
ifelse(x == "Hilly (5-20%)" & y == "1", 0.52,
ifelse(x == "Steep (20-30%)" & y == "1", 0.59,
ifelse(x == "Extremely steep (30%+)" & y == "1", 0.65,
ifelse(x == "Flat (0-5%)" & y == "3", 0.3,
ifelse(x == "Hilly (5-20%)" & y == "3", 0.85,
ifelse(x == "Steep (20-30%)" & y == "3", 1.13,
ifelse(x == "Extremely steep (30%+)" & y == "3", 1.36,
ifelse(x == "Flat (0-5%)" & y == "5", 0.3,
ifelse(x == "Hilly (5-20%)" & y == "5", 1.06,
ifelse(x == "Steep (20-30%)" & y == "5", 1.53,
ifelse(x == "Extremely steep (30%+)" & y == "5", 1.95,
ifelse(x == "Flat (0-5%)" & y == "15", 0.49,
ifelse(x == "Hilly (5-20%)" & y == "15", 2.22,
ifelse(x == "Steep (20-30%)" & y == "15", 3.39,
ifelse(x == "Extremely steep (30%+)" & y == "15", 4.45,
ifelse(x == "Flat (0-5%)" & y == "30", 0.65,
ifelse(x == "Hilly (5-20%)" & y == "30", 3.4,
ifelse(x == "Steep (20-30%)" & y == "30", 5.34,
ifelse(x == "Extremely steep (30%+)" & y == "30", 7.14,
ifelse(x == "Flat (0-5%)" & y == "90", 1.01,
ifelse(x == "Hilly (5-20%)" & y == "90", 6.68,
ifelse(x == "Steep (20-30%)" & y == "90", 11.01,
ifelse(x == "Extremely steep (30%+)" & y == "90", 15.14, NA))))))))))))))))))))))))
return(z)
}
slope_steepness_length <- slope_steepness_length_conversion(slope_p_factor, slope_length)
landcover_c_factor <- feed_item_selected$landcover_c_factor
landcover_c_factor
cover_factor <- landcover_c_factor_conversion(landcover_c_factor)
landcover_c_factor_conversion <- function(x){
z <- ifelse(x == "Dense forest", 0.001,
ifelse(x == "Other forest", 0.05,
ifelse(x == "Badlands hard", 0.05,
ifelse(x == "Badlands soft", 0.4,
ifelse(x == "Sorghum", 0.1,
ifelse(x == "Maize", 0.1,
ifelse(x == "Cereals", 0.15,
ifelse(x == "Pulses", 0.15,
ifelse(x == "Dense grass", 0.01,
ifelse(x == "Degraded grass", 0.05,
ifelse(x == "Fallow hard", 0.05,
ifelse(x == "Fallow plouged", 0.6,
ifelse(x == "Ethiopian teff", 0.25,
ifelse(x == "Continuous fallow", 1, NA))))))))))))))
return(z)
}
cover_factor <- landcover_c_factor_conversion(landcover_c_factor)
erosivity_r <- 0.55*(as.numeric(para[["annual_precipitation"]])/(as.numeric(para[["rain_length"]])/30))-4.7
landcover_c_factor <- feed_item_selected$landcover_c_factor
landcover_c_factor
slope_p_factor <- feed_item_selected$slope_p_factor
slope_p_factor
p_factor <- management_factor_conversion(slope_p_factor)
management_factor_conversion <- function(x){
ifelse(x == "Flat (0-5%)", 0.11,
ifelse(x == "Hilly (5-20%)", 0.13,
ifelse(x == "Steep (20-30%)", 0.22,
ifelse(x == "Extremely steep (30%+)", 0.37, 1))))
}
p_factor <- management_factor_conversion(slope_p_factor)
p_factor <- landcover_c_factor_conversion(landcover_c_factor)
management_factor_conversion <- function(x){
ifelse(x == "Flat (0-5%)", 0.11,
ifelse(x == "Hilly (5-20%)", 0.13,
ifelse(x == "Steep (20-30%)", 0.22,
ifelse(x == "Extremely steep (30%+)", 0.37, 1))))
}
p_factor <- management_factor_conversion(slope_p_factor)
c_factor <- landcover_c_factor_conversion(landcover_c_factor)
# calculate management factor
management_factor_conversion <- function(x){
ifelse(x == "Flat (0-5%)", 0.11,
ifelse(x == "Hilly (5-20%)", 0.13,
ifelse(x == "Steep (20-30%)", 0.22,
ifelse(x == "Extremely steep (30%+)", 0.37, 1))))
}
p_factor <- management_factor_conversion(slope_p_factor)
# calculate Soil loss (t/ha/year)
soil_loss_year <- erosivity_r*erodibility_k*slope_steepness_length*c_factor*p_factor
soil_loss_year
erosivity_r
erodibility_k
slope_steepness_length
c_factor
p_factor
View(land_required)
names(land_required)
View(land_required)
land_required %>%
group_by(feed) %>% summarise(area_feed = sum(area_feed))
names(land_required)
land_required %>%
group_by(season_name, feed) %>% summarise(area_feed = sum(area_feed))
land_required %>%
group_by(season_name, feed) %>% summarise(area_feed = sum(area_feed))
# land requirement for feed production per associated crop (ha)
land_required_per_feed <- land_required %>%
group_by(feed) %>% summarise(area_feed = sum(area_feed))
# land requirement for feed production per associated crop (ha), per season
land_required_per_feed <- land_required %>%
group_by(season_name, feed) %>% summarise(area_feed = sum(area_feed))
# land requirement for feed production per associated crop (ha)
land_required_per_feed <- land_required %>%
group_by(feed) %>% summarise(area_feed = sum(area_feed))
# land requirement for feed production per associated crop (ha), per season
land_required_per_feed_season <- land_required %>%
group_by(season_name, feed) %>% summarise(area_feed = sum(area_feed))
land_required_per_feed
land_required_per_feed_season
i
land_required
View(land_required)
names(land_required)
i
# select feed from land rquired dataframe
land_required_feed_selected <- land_required[land_required$feed == i,]
View(land_required_feed_selected)
land_required_feed_selected
# land requirement for feed production (ha)
land_required_feed_selected <- land_required_feed_selected %>%
summarise(area_feed = sum(area_feed))
land_required_feed_selected
# land requirement for feed production (ha)
land_required_feed_selected <- land_required_feed_selected %>%
summarise(sum(area_feed))
land_required_feed_selected
# land requirement for feed production (ha)
land_required_feed_selected <- land_required_feed_selected %>%
summarise(area_feed = sum(area_feed))
# select feed from land rquired dataframe
land_required_feed_selected <- land_required[land_required$feed == i,]
# land requirement for feed production (ha)
land_required_feed_selected <- land_required_feed_selected %>%
summarise(area_feed = sum(area_feed))
land_required_feed_selected
# land requirement for feed production (ha)
land_required_feed_selected <- land_required_feed_selected %>%
summarise(as.numeric(sum(area_feed)))
land_required_feed_selected
# select feed from land rquired dataframe
land_required_feed_selected <- land_required[land_required$feed == i,]
View(land_required_feed_selected)
# land requirement for feed production (ha)
land_required_feed_selected <- sum(land_required_feed_selected$area_feed)
# calculate Soil loss (t/ha/year)
soil_loss_plot <- soil_loss_year*land_required_feed_selected
soil_loss_plot
soil_loss_year
View(land_required)
i
cbind(feed_item = rep(i, times = nrow(i)),
soil_type = rep(soil_type, times = nrow(i)), i)
feed_item
i
cbind(feed = rep(i, times = nrow(i)),
soil_type = rep(soil_type, times = nrow(i)), i)
i
View(livestock_selected)
