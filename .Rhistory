feed_basket_quality <- feed_quality(para)
library(cleaned)
data()
data(mufindi)
para <- mufindi
feed_basket_quality <- feed_quality(para)
energy_required <- energy_requirement(para,feed_basket_quality)
View(energy_required)
data(mufindi)
feed_basket_quality <- feed_quality(mufindi)
mufindi <- data(farm1)
para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
library(jsonlite)
para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
rm(mufindi)
feed_basket_quality <- feed_quality(para)
library(cleaned)
feed_basket_quality <- feed_quality(para)
energy_requirement(mufindi,feed_basket_quality)
rlang::last_error()
#get the seasons
seasons <- para[["seasons"]]
View(seasons)
livestock <- para[["livestock"]]%>%
rename(livestock_category_code=livetype_code,
livestock_category_name=livetype_desc)
livestock <- para[["livestock"]]
names(livestock)
library(tidyverse)
livestock <- para[["livestock"]]%>%
rename(livestock_category_code=livetype_code,
livestock_category_name=livetype_desc)
no_days <- 365
#Compute annual energy and protein required
annual_requirement <- livestock%>%select(livestock_category_code,livestock_category_name)%>%
mutate(energy_required_annually=((livestock$er_maintenance*no_days)+(livestock$er_grazing*livestock$grazing_displacement*no_days)+
ifelse(is.nan(((livestock$er_pregnancy/(no_days*livestock$birth_interval))*no_days)),0,((livestock$er_pregnancy/(no_days*livestock$birth_interval))*no_days))+
ifelse(is.nan(((livestock$er_lactation/(no_days*livestock$birth_interval))*no_days)),0,((livestock$er_lactation/(no_days*livestock$birth_interval))*no_days))+
(livestock$annual_milk*livestock$er_lactmilk)+(livestock$annual_growth*livestock$er_growth))*livestock$herd_composition,
protein_required_annually =((livestock$cp_maintenance*no_days)+(livestock$cp_grazing*livestock$grazing_displacement*no_days)+
ifelse(is.nan(((livestock$cp_pregnancy/(no_days*livestock$birth_interval))*no_days)),0,((livestock$cp_pregnancy/(no_days*livestock$birth_interval))*no_days))+
ifelse(is.nan(((livestock$cp_lactation/(no_days*livestock$birth_interval))*no_days)),0,((livestock$er_lactation/(no_days*livestock$birth_interval))*no_days))+
(livestock$annual_milk*livestock$cp_lactmilk)+(livestock$annual_growth*livestock$cp_growth))*livestock$herd_composition)
#get livestock energy and protein requirement per season
for (i in 1:nrow(seasons)) {
sl <- seasons$season_length[i]
#Preparing the seasonal feed quality
s_feed_basket_quality <- dplyr::filter(feed_basket_quality, season_name == seasons$season_name[i])%>%
gather(feed,value,-season_name,-livestock_category_code,-livestock_category_name,-feed_variables)%>%
spread(feed_variables,value)%>%
mutate(prod_me = fraction_as_fed*me_content_fresh,
prod_dm = fraction_as_fed*dm_content,
prod_cp = fraction_as_fed*cp_content_fresh)%>%
select(livestock_category_code,prod_me,prod_dm,prod_cp)%>%
group_by(livestock_category_code)%>%
summarise(average_me = sum(prod_me),
average_dm = sum(prod_dm),
average_cp=sum(prod_cp))
#Computation of seasonal requirements
temp <- annual_requirement%>%
mutate(season_name = seasons$season_name[i],
energy_required_by_season = annual_requirement$energy_required_annually*(sl/no_days),#compute energy require by season
protein_required_by_season = annual_requirement$protein_required_annually*(sl/no_days))%>% #compute protein require by season
left_join(s_feed_basket_quality, by = "livestock_category_code")%>%
mutate(fresh_intake_required_e = energy_required_by_season/average_me,
dmi_required_e = fresh_intake_required_e*average_dm/100,
fresh_intake_required_cp = protein_required_by_season/(average_cp/100),
dmi_required_cp = fresh_intake_required_cp*average_dm/100,
dmi_s = ifelse(dmi_required_cp>dmi_required_e,dmi_required_cp,dmi_required_e),
limiting = ifelse(dmi_required_e == 0 | dmi_required_cp == 0, NA,
ifelse(dmi_required_cp>dmi_required_e,"CP","ENERGY")),
me_intake_s = dmi_s*average_me*100/average_dm)
#Binding seasonal results
if (i==1) {df <- temp}
else{df <- rbind(df,temp)}
}
#Manure computation
manure_comp <- df%>%group_by(livestock_category_code)%>%
summarise(me_intake = sum(me_intake_s),
dmi_tot = sum(dmi_s))%>%
mutate(de_intake = me_intake/0.81,
ge_intake = dmi_tot*18.45,
annual_manure_produced = (dmi_tot*0.365),
daily_manure_produced = annual_manure_produced/365)%>%
left_join(livestock, by = "livestock_category_code")%>%
mutate(manure_onfarm_grazing = (annual_manure_produced*time_in_onfarm_grazing)-(annual_manure_produced*time_in_onfarm_grazing*manure_in_field),
n_content_manure_grazing = manure_onfarm_grazing*n_content,
manure_collected = annual_manure_produced*((time_in_stable*manure_in_stable)+
(time_in_non_roofed_enclosure*manure_in_non_roofed_enclosure)+
(time_in_onfarm_grazing*manure_in_field))*manure_as_fertilizer,
n_content_manure_collected = manure_collected*n_content,
n_content_manure_total = n_content_manure_grazing+n_content_manure_collected)%>%
select(livestock_category_code,me_intake,dmi_tot,de_intake,ge_intake,annual_manure_produced,daily_manure_produced,manure_onfarm_grazing,
n_content_manure_grazing,manure_collected,n_content_manure_collected,n_content_manure_total)
View(para)
#Manure computation
manure_comp <- df%>%group_by(livestock_category_code)%>%
summarise(me_intake = sum(me_intake_s),
dmi_tot = sum(dmi_s))%>%
mutate(de_intake = me_intake/0.81,
ge_intake = dmi_tot*18.45,
annual_manure_produced = (dmi_tot*0.365),
daily_manure_produced = annual_manure_produced/365)%>%
left_join(livestock, by = "livestock_category_code")%>%
mutate(manure_onfarm_grazing = (annual_manure_produced*time_in_onfarm_grazing)-(annual_manure_produced*time_in_onfarm_grazing*manure_in_field),
n_content_manure_grazing = manure_onfarm_grazing*n_content,
manure_collected = annual_manure_produced*((time_in_stable*manure_in_stable)+
(time_in_non_roofed_enclosure*manure_in_non_roofed_enclosure)+
(time_in_onfarm_grazing*manure_in_field))*manure_onfarm_fraction,
n_content_manure_collected = manure_collected*n_content,
n_content_manure_total = n_content_manure_grazing+n_content_manure_collected)%>%
select(livestock_category_code,me_intake,dmi_tot,de_intake,ge_intake,annual_manure_produced,daily_manure_produced,manure_onfarm_grazing,
n_content_manure_grazing,manure_collected,n_content_manure_collected,n_content_manure_total)
para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
feed_basket_quality <- feed_quality(para)
#get the seasons
seasons <- para[["seasons"]]
livestock <- para[["livestock"]]%>%
rename(livestock_category_code=livetype_code,
livestock_category_name=livetype_desc)
no_days <- 365
#Compute annual energy and protein required
annual_requirement <- livestock%>%select(livestock_category_code,livestock_category_name)%>%
mutate(energy_required_annually=((livestock$er_maintenance*no_days)+(livestock$er_grazing*livestock$grazing_displacement*no_days)+
ifelse(is.nan(((livestock$er_pregnancy/(no_days*livestock$birth_interval))*no_days)),0,((livestock$er_pregnancy/(no_days*livestock$birth_interval))*no_days))+
ifelse(is.nan(((livestock$er_lactation/(no_days*livestock$birth_interval))*no_days)),0,((livestock$er_lactation/(no_days*livestock$birth_interval))*no_days))+
(livestock$annual_milk*livestock$er_lactmilk)+(livestock$annual_growth*livestock$er_growth))*livestock$herd_composition,
protein_required_annually =((livestock$cp_maintenance*no_days)+(livestock$cp_grazing*livestock$grazing_displacement*no_days)+
ifelse(is.nan(((livestock$cp_pregnancy/(no_days*livestock$birth_interval))*no_days)),0,((livestock$cp_pregnancy/(no_days*livestock$birth_interval))*no_days))+
ifelse(is.nan(((livestock$cp_lactation/(no_days*livestock$birth_interval))*no_days)),0,((livestock$er_lactation/(no_days*livestock$birth_interval))*no_days))+
(livestock$annual_milk*livestock$cp_lactmilk)+(livestock$annual_growth*livestock$cp_growth))*livestock$herd_composition)
#get livestock energy and protein requirement per season
for (i in 1:nrow(seasons)) {
sl <- seasons$season_length[i]
#Preparing the seasonal feed quality
s_feed_basket_quality <- dplyr::filter(feed_basket_quality, season_name == seasons$season_name[i])%>%
gather(feed,value,-season_name,-livestock_category_code,-livestock_category_name,-feed_variables)%>%
spread(feed_variables,value)%>%
mutate(prod_me = fraction_as_fed*me_content_fresh,
prod_dm = fraction_as_fed*dm_content,
prod_cp = fraction_as_fed*cp_content_fresh)%>%
select(livestock_category_code,prod_me,prod_dm,prod_cp)%>%
group_by(livestock_category_code)%>%
summarise(average_me = sum(prod_me),
average_dm = sum(prod_dm),
average_cp=sum(prod_cp))
#Computation of seasonal requirements
temp <- annual_requirement%>%
mutate(season_name = seasons$season_name[i],
energy_required_by_season = annual_requirement$energy_required_annually*(sl/no_days),#compute energy require by season
protein_required_by_season = annual_requirement$protein_required_annually*(sl/no_days))%>% #compute protein require by season
left_join(s_feed_basket_quality, by = "livestock_category_code")%>%
mutate(fresh_intake_required_e = energy_required_by_season/average_me,
dmi_required_e = fresh_intake_required_e*average_dm/100,
fresh_intake_required_cp = protein_required_by_season/(average_cp/100),
dmi_required_cp = fresh_intake_required_cp*average_dm/100,
dmi_s = ifelse(dmi_required_cp>dmi_required_e,dmi_required_cp,dmi_required_e),
limiting = ifelse(dmi_required_e == 0 | dmi_required_cp == 0, NA,
ifelse(dmi_required_cp>dmi_required_e,"CP","ENERGY")),
me_intake_s = dmi_s*average_me*100/average_dm)
#Binding seasonal results
if (i==1) {df <- temp}
else{df <- rbind(df,temp)}
}
#Manure computation
manure_comp <- df%>%group_by(livestock_category_code)%>%
summarise(me_intake = sum(me_intake_s),
dmi_tot = sum(dmi_s))%>%
mutate(de_intake = me_intake/0.81,
ge_intake = dmi_tot*18.45,
annual_manure_produced = (dmi_tot*0.365),
daily_manure_produced = annual_manure_produced/365)%>%
left_join(livestock, by = "livestock_category_code")%>%
mutate(manure_onfarm_grazing = (annual_manure_produced*time_in_onfarm_grazing)-(annual_manure_produced*time_in_onfarm_grazing*manure_in_field),
n_content_manure_grazing = manure_onfarm_grazing*n_content,
manure_collected = annual_manure_produced*((time_in_stable*manure_in_stable)+
(time_in_non_roofed_enclosure*manure_in_non_roofed_enclosure)+
(time_in_onfarm_grazing*manure_in_field))*manure_onfarm_fraction,
n_content_manure_collected = manure_collected*n_content,
n_content_manure_total = n_content_manure_grazing+n_content_manure_collected)%>%
select(livestock_category_code,me_intake,dmi_tot,de_intake,ge_intake,annual_manure_produced,daily_manure_produced,manure_onfarm_grazing,
n_content_manure_grazing,manure_collected,n_content_manure_collected,n_content_manure_total)
annual_results <- annual_requirement #left_join(annual_requirement,manure_comp)
seasonal_results <- select(df,season_name,livestock_category_code,livestock_category_name,energy_required_by_season,protein_required_by_season,
fresh_intake_required_e,dmi_required_e,fresh_intake_required_cp,dmi_required_cp,dmi_s,limiting,me_intake_s)
#return results
results <- list(annual_results = annual_results,
seasonal_results = seasonal_results)
return(results)
View(results)
View(annual_results)
# clear your work space
rm(list = ls(all = TRUE))
para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
feed_basket_quality <- feed_quality(para)
para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
feed_basket_quality <- feed_quality(para)
View(feed_basket_quality)
energy_requirement(para,feed_basket_quality)
energy <- energy_requirement(para,feed_basket_quality)
names(energy)
view(energy["annual_results"])
view(energy["seasonal_results"])
library(cleaned)
# clear your work space
rm(list = ls(all = TRUE))
para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
feed_basket_quality <- feed_quality(para)
energy <- energy_requirement(para,feed_basket_quality)
library(cleaned)
# clear your work space
rm(list = ls(all = TRUE))
para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
feed_basket_quality <- feed_quality(para)
energy <- energy_requirement(para,feed_basket_quality)
seasons <- para[["seasons"]]
livestock <- para[["livestock"]]%>%
rename(livestock_category_code=livetype_code,
livestock_category_name=livetype_desc)
no_days <- 365
#Compute annual energy and protein required
annual_requirement <- livestock%>%select(livestock_category_code,livestock_category_name)%>%
mutate(energy_required_annually=((livestock$er_maintenance*no_days)+(livestock$er_grazing*livestock$grazing_displacement*no_days)+
ifelse(is.nan(((livestock$er_pregnancy/(no_days*livestock$birth_interval))*no_days)),0,((livestock$er_pregnancy/(no_days*livestock$birth_interval))*no_days))+
ifelse(is.nan(((livestock$er_lactation/(no_days*livestock$birth_interval))*no_days)),0,((livestock$er_lactation/(no_days*livestock$birth_interval))*no_days))+
(livestock$annual_milk*livestock$er_lactmilk)+(livestock$annual_growth*livestock$er_growth))*livestock$herd_composition,
protein_required_annually =((livestock$cp_maintenance*no_days)+(livestock$cp_grazing*livestock$grazing_displacement*no_days)+
ifelse(is.nan(((livestock$cp_pregnancy/(no_days*livestock$birth_interval))*no_days)),0,((livestock$cp_pregnancy/(no_days*livestock$birth_interval))*no_days))+
ifelse(is.nan(((livestock$cp_lactation/(no_days*livestock$birth_interval))*no_days)),0,((livestock$er_lactation/(no_days*livestock$birth_interval))*no_days))+
(livestock$annual_milk*livestock$cp_lactmilk)+(livestock$annual_growth*livestock$cp_growth))*livestock$herd_composition)
#get livestock energy and protein requirement per season
for (i in 1:nrow(seasons)) {
sl <- seasons$season_length[i]
#Preparing the seasonal feed quality
s_feed_basket_quality <- dplyr::filter(feed_basket_quality, season_name == seasons$season_name[i])%>%
gather(feed,value,-season_name,-livestock_category_code,-livestock_category_name,-feed_variables)%>%
spread(feed_variables,value)%>%
mutate(prod_me = fraction_as_fed*me_content_fresh,
prod_dm = fraction_as_fed*dm_content,
prod_cp = fraction_as_fed*cp_content_fresh)%>%
select(livestock_category_code,prod_me,prod_dm,prod_cp)%>%
group_by(livestock_category_code)%>%
summarise(average_me = sum(prod_me),
average_dm = sum(prod_dm),
average_cp=sum(prod_cp))
#Computation of seasonal requirements
temp <- annual_requirement%>%
mutate(season_name = seasons$season_name[i],
energy_required_by_season = annual_requirement$energy_required_annually*(sl/no_days),#compute energy require by season
protein_required_by_season = annual_requirement$protein_required_annually*(sl/no_days))%>% #compute protein require by season
left_join(s_feed_basket_quality, by = "livestock_category_code")%>%
mutate(fresh_intake_required_e = energy_required_by_season/average_me,
dmi_required_e = fresh_intake_required_e*average_dm/100,
fresh_intake_required_cp = protein_required_by_season/(average_cp/100),
dmi_required_cp = fresh_intake_required_cp*average_dm/100,
dmi_s = ifelse(dmi_required_cp>dmi_required_e,dmi_required_cp,dmi_required_e),
limiting = ifelse(dmi_required_e == 0 | dmi_required_cp == 0, NA,
ifelse(dmi_required_cp>dmi_required_e,"CP","ENERGY")),
me_intake_s = dmi_s*average_me*100/average_dm)
#Binding seasonal results
if (i==1) {df <- temp}
else{df <- rbind(df,temp)}
}
#Manure computation
manure_comp <- df%>%group_by(livestock_category_code)%>%
summarise(me_intake = sum(me_intake_s),
dmi_tot = sum(dmi_s))%>%
mutate(de_intake = me_intake/0.81,
ge_intake = dmi_tot*18.45,
annual_manure_produced = (dmi_tot*0.365),
daily_manure_produced = annual_manure_produced/365)%>%
left_join(livestock, by = "livestock_category_code")%>%
mutate(manure_onfarm_grazing = (annual_manure_produced*time_in_onfarm_grazing)-(annual_manure_produced*time_in_onfarm_grazing*manure_in_field),
n_content_manure_grazing = manure_onfarm_grazing*n_content,
manure_collected = annual_manure_produced*((time_in_stable*manure_in_stable)+
(time_in_non_roofed_enclosure*manure_in_non_roofed_enclosure)+
(time_in_onfarm_grazing*manure_in_field))*manure_onfarm_fraction,
n_content_manure_collected = manure_collected*n_content,
n_content_manure_total = n_content_manure_grazing+n_content_manure_collected)%>%
select(livestock_category_code,me_intake,dmi_tot,de_intake,ge_intake,annual_manure_produced,daily_manure_produced,manure_onfarm_grazing,
n_content_manure_grazing,manure_collected,n_content_manure_collected,n_content_manure_total)
View(annual_requirement)
View(manure_comp)
?left_join
# clear your work space
rm(list = ls(all = TRUE))
library(cleaned)
para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
feed_basket_quality <- feed_quality(para)
energy <- energy_requirement(para,feed_basket_quality)
view(energy["seasonal_results"])
view(energy["annual_results"])
library(cleaned)
library(jsonlite)
library(tidyverse)
para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
feed_basket_quality <- feed_quality(para)
energy_required <- energy_requirement(para,feed_basket_quality)
land_required <- land_requirement(feed_basket_quality, energy_required, para)
soil_erosion <- soil_health(para, land_required)
water_required <- water_requirement(para, land_required)
#getting the crop parameters
feed_production <- unnest(para[["feed_production"]], cols = c(feed_type_name))
View(para)
#getting the crop parameters
feed_production <- unnest(para[["feed_items"]], cols = c(feed_type_name))
View(feed_production)
#convert columns to numeric
cols_nam <- colnames(feed_production%>%select(kc_initial,kc_midseason,kc_late))
feed_production[cols_nam] <- sapply(feed_production[cols_nam],as.numeric)
#change NAs to 0
feed_production[is.na(feed_production)] <- 0
#getting the livestock parameters
livestock <- unnest(para[["livestock"]], cols = c())
#convert columns to numeric
cols_nam <- colnames(livestock%>%select(-livestock_category_code,-livestock_category_name))
#convert columns to numeric
cols_nam <- colnames(livestock%>%select(-livetype_code,-livetype_desc))
livestock[cols_nam] <- sapply(livestock[cols_nam],as.numeric)
#getting the livestock parameters
livestock <- unnest(para[["livestock"]], cols = c())
#area evapotranspiration
et <- as.numeric(para[["et"]])
#annual precipitation
annual_precipitation <- as.numeric(para[["annual_precipitation"]])
#computing water use per feed item
water_use_per_feed_item <- land_required%>%
group_by(feed)%>%
summarise(area_feed = sum(area_feed, na.rm = T),
area_non_feed = sum(area_non_feed, na.rm = T),
area_total = sum(area_total, na.rm = T))%>% #reformating land required
left_join(feed_production, by = c("feed"="feed_type_name"))%>%
mutate(fraction_of_land_required = area_feed/sum(area_feed,na.rm = T),
kc_average = (kc_initial+kc_midseason+kc_late)/3,
kc_frac = fraction_of_land_required*kc_average,
ET = kc_frac*et,
water_use = ET*sum(area_feed),
feed_water_use = ifelse(is.nan(water_use*(1-(area_non_feed/area_total))),0,(water_use*(1-(area_non_feed/area_total)))),
non_feed_water_use = water_use-feed_water_use)%>%
select(feed,area_feed,area_non_feed,area_total,kc_average,kc_frac,ET,water_use,feed_water_use,non_feed_water_use)
#computing water use for production
ET <- et*sum(water_use_per_feed_item$kc_frac)
fraction_of_precipitation_used_for_feed_production <- ET/annual_precipitation
total_water_use <- ET*sum(water_use_per_feed_item$area_feed)
water_use_fpcm <- total_water_use/sum(livestock$herd_composition*livestock$annual_milk*(0.337+(0.116*livestock$fat_content)+(0.06*livestock$protein_milkcontent)))
water_use_meat <- total_water_use/sum(livestock$herd_composition*livestock$annual_growth*livestock$carcass_fraction)
water_use_protein <- total_water_use/(sum(livestock$herd_composition*livestock$annual_growth*livestock$carcass_fraction*(livestock$protein_meatcontent/100))+
sum(livestock$herd_composition*livestock$annual_milk*(0.337+(0.116*livestock$fat_content)+(0.06*livestock$protein_milkcontent))*(livestock$protein_milkcontent/100)))
#merging water use items for production
water_use_for_production <- cbind(ET,fraction_of_precipitation_used_for_feed_production,total_water_use,water_use_fpcm,water_use_meat,water_use_protein)
water_use <- list(water_use_per_feed_item = water_use_per_feed_item,
water_use_for_production = water_use_per_feed_item)
#returning results
return(water_use)
View(water_use_per_feed_item)
View(feed_production)
View(water_use_for_production)
View(water_use_per_feed_item)
water_use_per_feed_item <- land_required%>%
group_by(feed)%>%
summarise(area_feed = sum(area_feed, na.rm = T),
area_non_feed = sum(area_non_feed, na.rm = T),
area_total = sum(area_total, na.rm = T))%>% #reformating land required
left_join(feed_production, by = c("feed"="feed_type_name"))%>%
mutate(fraction_of_land_required = area_feed/sum(area_feed,na.rm = T),
kc_average = (kc_initial+kc_midseason+kc_late)/3,
kc_frac = fraction_of_land_required*kc_average,
ET = kc_frac*et,
water_use = ET*sum(area_feed),
feed_water_use = ifelse(is.nan(water_use*(1-(area_non_feed/area_total))),0,(water_use*(1-(area_non_feed/area_total)))),
non_feed_water_use = water_use-feed_water_use)
names(water_use_per_feed_item)
View(land_required)
rm(list = ls())
para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
feed_basket_quality <- feed_quality(para)
energy_required <- energy_requirement(para,feed_basket_quality)
land_required <- land_requirement(feed_basket_quality, energy_required, para)
#getting the crop parameters
feed_production <- unnest(para[["feed_items"]], cols = c(feed_type_name))
#convert columns to numeric
cols_nam <- colnames(feed_production%>%select(kc_initial,kc_midseason,kc_late))
#getting the livestock parameters
livestock <- unnest(para[["livestock"]], cols = c())
#area evapotranspiration
et <- as.numeric(para[["et"]])
#annual precipitation
annual_precipitation <- as.numeric(para[["annual_precipitation"]])
#computing water use per feed item
water_use_per_feed_item <- land_required%>%
group_by(feed)%>%
summarise(area_feed = sum(area_feed, na.rm = T),
area_non_feed = sum(area_non_feed, na.rm = T),
area_total = sum(area_total, na.rm = T))%>% #reformating land required
left_join(feed_production, by = c("feed"="feed_type_name"))%>%
mutate(fraction_of_land_required = area_feed/sum(area_feed,na.rm = T),
kc_average = (kc_initial+kc_midseason+kc_late)/3,
kc_frac = fraction_of_land_required*kc_average,
ET = kc_frac*et,
water_use = ET*sum(area_feed),
feed_water_use = ifelse(is.nan(water_use*(1-(area_non_feed/area_total))),0,(water_use*(1-(area_non_feed/area_total)))),
non_feed_water_use = water_use-feed_water_use)%>%
select(feed,area_feed,area_non_feed,area_total,kc_average,kc_frac,ET,water_use,feed_water_use,non_feed_water_use)
View(water_use_per_feed_item)
#computing water use for production
ET <- et*sum(water_use_per_feed_item$kc_frac)
fraction_of_precipitation_used_for_feed_production <- ET/annual_precipitation
total_water_use <- ET*sum(water_use_per_feed_item$area_feed)
water_use_fpcm <- total_water_use/sum(livestock$herd_composition*livestock$annual_milk*(0.337+(0.116*livestock$fat_content)+(0.06*livestock$protein_milkcontent)))
water_use_meat <- total_water_use/sum(livestock$herd_composition*livestock$annual_growth*livestock$carcass_fraction)
water_use_protein <- total_water_use/(sum(livestock$herd_composition*livestock$annual_growth*livestock$carcass_fraction*(livestock$protein_meatcontent/100))+
sum(livestock$herd_composition*livestock$annual_milk*(0.337+(0.116*livestock$fat_content)+(0.06*livestock$protein_milkcontent))*(livestock$protein_milkcontent/100)))
#merging water use items for production
water_use_for_production <- cbind(ET,fraction_of_precipitation_used_for_feed_production,total_water_use,water_use_fpcm,water_use_meat,water_use_protein)
View(water_use_per_feed_item)
View(water_use_for_production)
View(t(water_use_for_production))
#computing water use per feed item
water_use_per_feed_item <- land_required%>%
group_by(feed)%>%
summarise(area_feed = sum(area_feed, na.rm = T),
area_non_feed = sum(area_non_feed, na.rm = T),
area_total = sum(area_total, na.rm = T))%>% #reformating land required
left_join(feed_production, by = c("feed"="feed_type_name"))%>%
mutate(fraction_of_land_required = area_feed/sum(area_feed,na.rm = T),
kc_average = (kc_initial+kc_midseason+kc_late)/3,
kc_frac = fraction_of_land_required*kc_average,
ET = kc_frac*et,
water_use = ET*sum(area_feed),
feed_water_use = ifelse(is.nan(water_use*(1-(area_non_feed/area_total))),0,(water_use*(1-(area_non_feed/area_total)))),
non_feed_water_use = water_use-feed_water_use)%>%
select(feed,kc_average,kc_frac,water_use,feed_water_use,non_feed_water_use)
View(water_use_per_feed_item)
#merging water use items for production
water_use_for_production <- t(cbind(ET,
fraction_of_precipitation_used_for_feed_production,
total_water_use,
water_use_fpcm,
water_use_meat,
water_use_protein))
View(water_use_for_production)
library(cleaned)
rm(list = ls())
para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
feed_basket_quality <- feed_quality(para)
energy_required <- energy_requirement(para,feed_basket_quality)
land_required <- land_requirement(feed_basket_quality, energy_required, para)
soil_erosion <- soil_health(para, land_required)
water_required <- water_requirement(para, land_required)
rm(list = ls())
para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
feed_basket_quality <- feed_quality(para)
energy_required <- energy_requirement(para,feed_basket_quality)
land_required <- land_requirement(feed_basket_quality, energy_required, para)
soil_erosion <- soil_health(para, land_required)
#getting the crop parameters
feed_production <- unnest(para[["feed_items"]], cols = c(feed_type_name))
#getting the livestock parameters
livestock <- unnest(para[["livestock"]], cols = c())
#area evapotranspiration
et <- as.numeric(para[["et"]])
#annual precipitation
annual_precipitation <- as.numeric(para[["annual_precipitation"]])
#computing water use per feed item
water_use_per_feed_item <- land_required%>%
group_by(feed)%>%
summarise(area_feed = sum(area_feed, na.rm = T),
area_non_feed = sum(area_non_feed, na.rm = T),
area_total = sum(area_total, na.rm = T))%>% #reformating land required
left_join(feed_production, by = c("feed"="feed_type_name"))%>%
mutate(fraction_of_land_required = area_feed/sum(area_feed,na.rm = T),
kc_average = (kc_initial+kc_midseason+kc_late)/3,
kc_frac = fraction_of_land_required*kc_average,
ET = kc_frac*et,
water_use = ET*sum(area_feed),
feed_water_use = ifelse(is.nan(water_use*(1-(area_non_feed/area_total))),0,
(water_use*(1-(area_non_feed/area_total)))),
non_feed_water_use = water_use-feed_water_use)%>%
select(feed,kc_average,kc_frac,water_use,feed_water_use,non_feed_water_use)
#computing water use for production
ET <- et*sum(water_use_per_feed_item$kc_frac)
fraction_of_precipitation_used_for_feed_production <- ET/annual_precipitation
total_water_use <- ET*sum(water_use_per_feed_item$area_feed)
water_use_fpcm <- total_water_use/sum(livestock$herd_composition*livestock$annual_milk*(0.337+(0.116*livestock$fat_content)+(0.06*livestock$protein_milkcontent)))
water_use_per_feed_item <- land_required%>%
group_by(feed)%>%
summarise(area_feed = sum(area_feed, na.rm = T),
area_non_feed = sum(area_non_feed, na.rm = T),
area_total = sum(area_total, na.rm = T))%>% #reformating land required
left_join(feed_production, by = c("feed"="feed_type_name"))%>%
mutate(fraction_of_land_required = area_feed/sum(area_feed,na.rm = T),
kc_average = (kc_initial+kc_midseason+kc_late)/3,
kc_frac = fraction_of_land_required*kc_average,
ET = kc_frac*et,
water_use = ET*sum(area_feed),
feed_water_use = ifelse(is.nan(water_use*(1-(area_non_feed/area_total))),0,
(water_use*(1-(area_non_feed/area_total)))),
non_feed_water_use = water_use-feed_water_use)
View(water_use_per_feed_item)
View(feed_basket_quality)
View(land_required)
nitrogen_balance <- n_balance(para, land_required, soil_erosion)
livestock_productivity <- land_productivity(para)
economics <- economics_payback(para, energy_required)
biomass <- biomass_calculation(para, land_required)
livestock <- para[["livestock"]]
#convert columns to numeric
cols_nam <- colnames(livestock%>%select(-livestock_category_code,-livestock_category_name))
library(cleaned)
library(cleaned)
library(jsonlite)
library(tidyverse)
