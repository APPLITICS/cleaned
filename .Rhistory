ghg_ipcc_data <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
energy_parameters <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
stock_change_para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
feed_basket_quality <- feed_quality(para)
energy_required <- energy_requirement(para,feed_basket_quality,energy_parameters)
land_required <- land_requirement(feed_basket_quality, energy_required, para)
soil_erosion <- soil_health(para, land_required)
#getting the crop parameters
feed_production <- unnest(para[["feed_items"]], cols = c(feed_type_name))
#getting the livestock parameters
livestock <- unnest(para[["livestock"]], cols = c())
#area evapotranspiration
et <- as.numeric(para[["et"]])
#annual precipitation
annual_precipitation <- as.numeric(para[["annual_prec"]])
#computing water use per feed item
water_use_per_feed_item <- land_required[["land_requirements_all"]] %>%
group_by(feed)%>%
summarise(area_feed = sum(area_feed, na.rm = T),
area_non_feed = sum(area_non_feed, na.rm = T),
area_total = sum(area_total, na.rm = T))%>% #reformating land required
left_join(feed_production, by = c("feed"="feed_item_name"))%>%
mutate(fraction_of_land_required = area_feed/sum(area_feed,na.rm = T),
kc_average = (kc_initial+kc_midseason+kc_late)/3,
kc_frac = fraction_of_land_required*kc_average,
ET = kc_frac*et,
water_use = ET*sum(area_feed),
feed_water_use = ifelse(is.nan(water_use*(1-(area_non_feed/area_total))),0,
(water_use*(1-(area_non_feed/area_total)))),
non_feed_water_use = water_use-feed_water_use)%>%
select(feed,area_feed,kc_average,kc_frac,water_use,feed_water_use,non_feed_water_use)
#computing water use for production
ET <- et*sum(water_use_per_feed_item$kc_frac)
fraction_of_precipitation_used_for_feed_production <- ET/annual_precipitation
total_water_use <- ET*sum(water_use_per_feed_item$area_feed)
water_use_fpcm <- total_water_use/sum(livestock$herd_composition*livestock$annual_milk*(0.337+(0.116*livestock$fat_content)+(0.06*livestock$protein_milkcontent)))
water_use_fpcm <- ifelse(!is.finite(water_use_fpcm),0,water_use_fpcm)
water_use_meat <- total_water_use/sum(livestock$herd_composition*livestock$annual_growth*livestock$carcass_fraction)
water_use_meat <- ifelse(!is.finite(water_use_meat),0,water_use_meat)
water_use_protein <- total_water_use/(sum(livestock$herd_composition*livestock$annual_growth*livestock$carcass_fraction*(livestock$protein_meatcontent/100))+
sum(livestock$herd_composition*livestock$annual_milk*(0.337+(0.116*livestock$fat_content)+(0.06*livestock$protein_milkcontent))*(livestock$protein_milkcontent/100)))
water_use_protein <- ifelse(!is.finite(water_use_protein),0,water_use_protein)
#merging water use items for production
water_use_for_production <- as.data.frame(t(cbind(ET,
fraction_of_precipitation_used_for_feed_production,
total_water_use,
water_use_fpcm,
water_use_meat,
water_use_protein)))
class(water_use_for_production)
View(water_use_per_feed_item)
View(water_use_for_production)
View(water_use_for_production)
class(water_use_for_production)
Items <- rownames(water_use_for_production)
rownames(water_use_for_production) <- NULL
water_use_for_production <- as.data.frame(cbind(Items,water_use_for_production))
class(water_use_for_production)
View(water_use_for_production)
names(water_use_for_production) <- c("Names","Value")
class(water_use_for_production)
View(water_use_for_production)
water_use <- list(water_use_per_feed_item = water_use_per_feed_item,
water_use_for_production = water_use_for_production)
class(water_use[[2]])
view(water_use[[2]])
output <- jsonlite::fromJSON("C:/Users/soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/gui_test/Data_from_Rein/SB-II-BP_2_result.json", flatten = TRUE)
scenario=1
nitrogen_balance <- output[["nitrogen_balance"]]
soil_mining_perc <- sum(nitrogen_balance[nitrogen_balance$area_total > 0.9,]$area_total)*100/sum(nitrogen_balance$area_total)
soil_leaching_perc <- sum(nitrogen_balance[nitrogen_balance$area_total < 0.5,]$area_total)*100/sum(nitrogen_balance$area_total)
erosion_tyr <- sum(as.numeric(output[["soil_erosion"]]$soil_loss_plot))
land_required <- output[["land_required"]] %>%
dplyr::bind_rows()
erosion_thayr <- sum(land_required$area_feed)/erosion_tyr
average_annual_milk_kg_yr <- sum(output[["livestock_productivity"]]$total_milk)
erosion_kgsoil_kg_fpcm <- ifelse(is.na(erosion_tyr/sum(output[["livestock_productivity"]]$total_milk)), 0, erosion_tyr/sum(output[["livestock_productivity"]]$total_milk))*1000
land_requirement_ha <- sum(land_required$area_feed)
total_land_required_ha_mt_fpcm <- ifelse(is.na(land_requirement_ha/sum(output[["livestock_productivity"]]$total_milk)), 0, land_requirement_ha/sum(output[["livestock_productivity"]]$total_milk))*1000
ghg_emission <- output[["ghg_emission"]]
ghgtot_t_co2eq_yr <- (sum(ghg_emission$kg_per_ha,na.rm = T)/1000)*land_requirement_ha
ghgtot_t_co2eq_ha_yr <- sum(ghg_emission$kg_per_ha,na.rm = T)/1000
ghgmeat_kg_co2eq_kg <- ifelse(is.na(ghgtot_t_co2eq_yr/sum(output[["livestock_productivity"]]$meat_production_animal)), 0, ghgtot_t_co2eq_yr/sum(output[["livestock_productivity"]]$meat_production_animal))
ghgmilk_kg_co2eq_kg <- ifelse(is.na(ghgtot_t_co2eq_yr/sum(output[["livestock_productivity"]]$total_milk)), 0, ghgtot_t_co2eq_yr/sum(output[["livestock_productivity"]]$total_milk))
tot_protein_kg_year_meat <- sum(output[["livestock_productivity"]]$protein_kg_year_meat)
tot_protein_kg_year_milk <- sum(output[["livestock_productivity"]]$protein_kg_year_milk)
ghgprotein_kg_co2eq_kg <- ifelse(tot_protein_kg_year_meat==0 & tot_protein_kg_year_milk == 0,0,
ifelse(tot_protein_kg_year_meat==0 & tot_protein_kg_year_milk != 0, ghgtot_t_co2eq_yr/tot_protein_kg_year_milk,
ifelse(tot_protein_kg_year_meat!=0 & tot_protein_kg_year_milk == 0,ghgtot_t_co2eq_yr/tot_protein_kg_year_meat,
(ghgtot_t_co2eq_yr/tot_protein_kg_year_milk)+(ghgtot_t_co2eq_yr/tot_protein_kg_year_meat))))
water_requirement <- output[["water_required"]]
water_use_for_production <- as.data.frame(water_requirement[["water_use_for_production"]])
View(water_use_for_production)
View(water_use_per_feed_item)
View(water_use_for_production)
View(feed_basket_quality)
?unnest
water_use_for_production <- unnest(water_requirement[["water_use_for_production"]])
water_requirement <- output[["water_required"]]
class(water_requirement)
class(water_requirement[[1]])
class(water_requirement[[2]])
library(cleaned)
water_requirement <- output[["water_required"]]
water_use_for_production <- as.data.frame(water_requirement[["water_use_for_production"]])
class(water_use_for_production)
View(water_use_for_production)
library(cleaned)
rm(list = ls())
para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
ghg_ipcc_data <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
energy_parameters <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
stock_change_para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
feed_basket_quality <- feed_quality(para)
energy_required <- energy_requirement(para,feed_basket_quality,energy_parameters)
land_required <- land_requirement(feed_basket_quality, energy_required, para)
soil_erosion <- soil_health(para, land_required)
water_required <- water_requirement(para, land_required)
nitrogen_balance <- n_balance(para, land_required, soil_erosion)
livestock_productivity <- land_productivity(para)
economics <- economics_payback(para, energy_required, livestock_productivity)
biomass <- biomass_calculation(para, land_required)
soil_carbon <- soil_organic_carbon(para, stock_change_para, land_required, biomass)
ghg_emissions <- ghg_emission(para,energy_required,ghg_ipcc_data,land_required,nitrogen_balance)
bp <-  combineOutputs(feed_basket_quality,energy_required,land_required,soil_erosion,water_required,
nitrogen_balance,livestock_productivity,economics,biomass,soil_carbon,ghg_emissions)
write(bp,"C:/Users/soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/gui_test/Data_from_Rein/SB-II-BP_290722.json")
output <- jsonlite::fromJSON("C:/Users/soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/gui_test/Data_from_Rein/SB-II-BP_290722.json", flatten = TRUE)
scenario = 1
nitrogen_balance <- output[["nitrogen_balance"]]
soil_mining_perc <- sum(nitrogen_balance[nitrogen_balance$area_total > 0.9,]$area_total)*100/sum(nitrogen_balance$area_total)
soil_leaching_perc <- sum(nitrogen_balance[nitrogen_balance$area_total < 0.5,]$area_total)*100/sum(nitrogen_balance$area_total)
erosion_tyr <- sum(as.numeric(output[["soil_erosion"]]$soil_loss_plot))
land_required <- output[["land_required"]] %>%
dplyr::bind_rows()
erosion_thayr <- sum(land_required$area_feed)/erosion_tyr
average_annual_milk_kg_yr <- sum(output[["livestock_productivity"]]$total_milk)
erosion_kgsoil_kg_fpcm <- ifelse(is.na(erosion_tyr/sum(output[["livestock_productivity"]]$total_milk)), 0, erosion_tyr/sum(output[["livestock_productivity"]]$total_milk))*1000
land_requirement_ha <- sum(land_required$area_feed)
total_land_required_ha_mt_fpcm <- ifelse(is.na(land_requirement_ha/sum(output[["livestock_productivity"]]$total_milk)), 0, land_requirement_ha/sum(output[["livestock_productivity"]]$total_milk))*1000
ghg_emission <- output[["ghg_emission"]]
ghgtot_t_co2eq_yr <- (sum(ghg_emission$kg_per_ha,na.rm = T)/1000)*land_requirement_ha
ghgtot_t_co2eq_ha_yr <- sum(ghg_emission$kg_per_ha,na.rm = T)/1000
ghgmeat_kg_co2eq_kg <- ifelse(is.na(ghgtot_t_co2eq_yr/sum(output[["livestock_productivity"]]$meat_production_animal)), 0, ghgtot_t_co2eq_yr/sum(output[["livestock_productivity"]]$meat_production_animal))
ghgmilk_kg_co2eq_kg <- ifelse(is.na(ghgtot_t_co2eq_yr/sum(output[["livestock_productivity"]]$total_milk)), 0, ghgtot_t_co2eq_yr/sum(output[["livestock_productivity"]]$total_milk))
tot_protein_kg_year_meat <- sum(output[["livestock_productivity"]]$protein_kg_year_meat)
tot_protein_kg_year_milk <- sum(output[["livestock_productivity"]]$protein_kg_year_milk)
ghgprotein_kg_co2eq_kg <- ifelse(tot_protein_kg_year_meat==0 & tot_protein_kg_year_milk == 0,0,
ifelse(tot_protein_kg_year_meat==0 & tot_protein_kg_year_milk != 0, ghgtot_t_co2eq_yr/tot_protein_kg_year_milk,
ifelse(tot_protein_kg_year_meat!=0 & tot_protein_kg_year_milk == 0,ghgtot_t_co2eq_yr/tot_protein_kg_year_meat,
(ghgtot_t_co2eq_yr/tot_protein_kg_year_milk)+(ghgtot_t_co2eq_yr/tot_protein_kg_year_meat))))
water_requirement <- output[["water_required"]]
water_use_for_production <- as.data.frame(water_requirement[["water_use_for_production"]])
View(water_use_for_production)
percent_of_precipitation_used_for_feed_production <- water_use_for_production[which(water_use_for_production$Names=="fraction_of_precipitation_used_for_feed_production"),2]*100
water_m3_yr <-water_use_for_production[which(water_use_for_production$Names=="total_water_use"),2]
waterha_m3_ha <- water_m3_yr/sum(land_required$area_feed)
water_use_perkg_fpcm <- water_use_for_production[which(water_use_for_production$Names=="water_use_fpcm"),2]
water_use_perkg_meat <- water_use_for_production[which(water_use_for_production$Names=="water_use_meat"),2]
water_use_perkg_protein <- water_use_for_production[which(water_use_for_production$Names=="water_use_protein"),2]
data.frame(scenario,
average_annual_milk_kg_yr,
soil_mining_perc,
soil_leaching_perc,
erosion_tyr,
erosion_thayr,
erosion_kgsoil_kg_fpcm,
land_requirement_ha,
total_land_required_ha_mt_fpcm,
ghgtot_t_co2eq_yr,
ghgtot_t_co2eq_ha_yr,
ghgmilk_kg_co2eq_kg,
ghgmeat_kg_co2eq_kg,
ghgprotein_kg_co2eq_kg,
percent_of_precipitation_used_for_feed_production,
water_m3_yr,
waterha_m3_ha,
water_use_perkg_fpcm,
water_use_perkg_meat,
water_use_perkg_protein)
df <- data.frame(scenario,
average_annual_milk_kg_yr,
soil_mining_perc,
soil_leaching_perc,
erosion_tyr,
erosion_thayr,
erosion_kgsoil_kg_fpcm,
land_requirement_ha,
total_land_required_ha_mt_fpcm,
ghgtot_t_co2eq_yr,
ghgtot_t_co2eq_ha_yr,
ghgmilk_kg_co2eq_kg,
ghgmeat_kg_co2eq_kg,
ghgprotein_kg_co2eq_kg,
percent_of_precipitation_used_for_feed_production,
water_m3_yr,
waterha_m3_ha,
water_use_perkg_fpcm,
water_use_perkg_meat,
water_use_perkg_protein)
View(df)
View(output)
output$energy_required$seasonal_results
#Extracting limiting factor
seasonal_energy_required <- output$energy_required$seasonal_results
View(seasonal_energy_required)
View(seasonal_energy_required)
output <- jsonlite::fromJSON("C:/Users/soloo/OneDrive - CGIAR/Documents/ILRI work/Projects/CLEANED-XtRa/gui_test/Data_from_Rein/SB-II-BP_2_result.json", flatten = TRUE)
View(seasonal_energy_required)
#Extracting limiting factor
seasonal_energy_required2 <- output$energy_required$seasonal_results
View(seasonal_energy_required2)
unique(seasonal_energy_required2$season_name)
length(seasons)
seasons <- unique(seasonal_energy_required2$season_name)
length(seasons)
j=1
seasons[j]
season_energy_data <- filter(seasonal_energy_required2, season_name = seasons[j])
season_energy_data <- filter(seasonal_energy_required2, season_name == seasons[j])
View(season_energy_data)
livestock_category <- unique(season_energy_data$livestock_category_name)
k=1
limiting_factor <- filter(season_energy_data, livestock_category_name==livestock_category[k])$limiting
limiting_factor_data <- data.frame(limiting_factor)
View(limiting_factor_data)
paste0("limiting_factor_",livestock_category[k])
limiting_factor <- data.frame(filter(season_energy_data, livestock_category_name==livestock_category[k])$limiting)
names(limiting_factor) <- paste0("limiting_factor_",livestock_category[k])
View(limiting_factor)
season <- data.frame(seasons[j])
View(season)
limiting_factor <- data.frame(filter(season_energy_data, livestock_category_name==livestock_category[k])$limiting)
season <- seasons[j]
season_limiting_factor <- data.frame(season,limiting_factor)
View(season_limiting_factor)
limiting_factor <- data.frame(filter(season_energy_data, livestock_category_name==livestock_category[k])$limiting)
names(limiting_factor) <- paste0("limiting_factor_",livestock_category[k])
season_limiting_factor <- data.frame(season,limiting_factor)
for (k in 1:length(livestock_category)) {
limiting_factor <- data.frame(filter(season_energy_data, livestock_category_name==livestock_category[k])$limiting)
names(limiting_factor) <- paste0("limiting_factor_",livestock_category[k])
if (k==1) {
season_limiting_factor <- data.frame(season,limiting_factor)
}else{season_limiting_factor <- cbind(season_limiting_factor,limiting_factor) }
}
View(season_limiting_factor)
#loop through the seasons
for (j in 1:length(seasons)){
season <- seasons[j]
season_energy_data <- filter(seasonal_energy_required2, season_name == seasons[j])
livestock_category <- unique(season_energy_data$livestock_category_name)
#loop through livestock category
for (k in 1:length(livestock_category)) {
limiting_factor <- data.frame(filter(season_energy_data, livestock_category_name==livestock_category[k])$limiting)
names(limiting_factor) <- paste0("limiting_factor_",livestock_category[k])
if (k==1) {
season_limiting_factor <- data.frame(season,limiting_factor)
}else{season_limiting_factor <- cbind(season_limiting_factor,limiting_factor) }
} #end
if (j==1) {
annual_limiting_factor <- season_limiting_factor
}else{annual_limiting_factor <- cbind(annual_limiting_factor,season_limiting_factor) }
}
View(annual_limiting_factor)
data.frame(scenario,
average_annual_milk_kg_yr,
soil_mining_perc,
soil_leaching_perc,
erosion_tyr,
erosion_thayr,
erosion_kgsoil_kg_fpcm,
land_requirement_ha,
total_land_required_ha_mt_fpcm,
ghgtot_t_co2eq_yr,
ghgtot_t_co2eq_ha_yr,
ghgmilk_kg_co2eq_kg,
ghgmeat_kg_co2eq_kg,
ghgprotein_kg_co2eq_kg,
percent_of_precipitation_used_for_feed_production,
water_m3_yr,
waterha_m3_ha,
water_use_perkg_fpcm,
water_use_perkg_meat,
water_use_perkg_protein)%>%cbind(annual_limiting_factor)
rm(list = ls())
library(cleaned)
library(jsonlite)
library(tidyverse)
ghg_ipcc_data <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
energy_parameters <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
stock_change_para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
feed_basket_quality <- feed_quality(para)
energy_required <- energy_requirement(para,feed_basket_quality,energy_parameters)
land_required <- land_requirement(feed_basket_quality, energy_required, para)
soil_erosion <- soil_health(para, land_required)
feed_basket_quality <- feed_quality(para)
energy_required <- energy_requirement(para,feed_basket_quality,energy_parameters)
#get the seasons
seasons <- para[["seasons"]]
livestock <- para[["livestock"]]%>%
rename(livestock_category_code=livetype_code,
livestock_category_name=livetype_desc)
?rename
livestock <- para[["livestock"]]%>%
dplyr::rename(livestock_category_code=livetype_code,
livestock_category_name=livetype_desc)
livestock <- para[["livestock"]]
View(para)
para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
feed_basket_quality <- feed_quality(para)
energy_required <- energy_requirement(para,feed_basket_quality,energy_parameters)
View(para)
para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
feed_basket_quality <- feed_quality(para)
energy_required <- energy_requirement(para,feed_basket_quality,energy_parameters)
land_required <- land_requirement(feed_basket_quality, energy_required, para)
soil_erosion <- soil_health(para, land_required)
water_required <- water_requirement(para, land_required)
nitrogen_balance <- n_balance(para, land_required, soil_erosion)
livestock_productivity <- land_productivity(para)
rm(water_required,nitrogen_balance,livestock_productivity)
#getting the crop parameters
feed_production <- unnest(para[["feed_items"]], cols = c(feed_type_name))
#getting the livestock parameters
livestock <- unnest(para[["livestock"]], cols = c())
#area evapotranspiration
et <- as.numeric(para[["et"]])
#annual precipitation
annual_precipitation <- as.numeric(para[["annual_prec"]])
water_use_per_feed_item <- land_required[["land_requirements_all"]] %>%
group_by(feed)%>%
summarise(area_feed = sum(area_feed, na.rm = T)
water_use_per_feed_item <- land_required[["land_requirements_all"]] %>%
group_by(feed)%>%
summarise(area_feed = sum(area_feed, na.rm = T),
area_non_feed = sum(area_non_feed, na.rm = T),
area_total = sum(area_total, na.rm = T))
View(water_use_per_feed_item)
water_use_per_feed_item <- land_required[["land_requirements_all"]] %>%
group_by(feed)%>%
summarise(area_feed = sum(area_feed, na.rm = T),
area_non_feed = sum(area_non_feed, na.rm = T),
area_total = sum(area_total, na.rm = T))%>% #reformating land required
left_join(feed_production, by = c("feed"="feed_item_name"))
water_use_per_feed_item <- land_required[["land_requirements_all"]] %>%
group_by(feed)%>%
summarise(area_feed = sum(area_feed, na.rm = T),
area_non_feed = sum(area_non_feed, na.rm = T),
area_total = sum(area_total, na.rm = T))%>% #reformating land required
left_join(feed_production, by = c("feed"="feed_item_name"))%>%
mutate(fraction_of_land_required = area_feed/sum(area_feed,na.rm = T),
kc_average = (kc_initial+kc_midseason+kc_late)/3,
kc_frac = fraction_of_land_required*kc_average,
ET = kc_frac*et,
water_use = ET*sum(area_feed),
feed_water_use = ifelse(is.nan(water_use*(1-(area_non_feed/area_total))),0,
(water_use*(1-(area_non_feed/area_total)))),
non_feed_water_use = water_use-feed_water_use)%>%
select(feed,area_feed,kc_average,kc_frac,water_use,feed_water_use,non_feed_water_use)
View(water_use_per_feed_item)
water_use_per_feed_item <- land_required[["land_requirements_all"]] %>%
group_by(feed)%>%
summarise(area_feed = sum(area_feed, na.rm = T),
area_non_feed = sum(area_non_feed, na.rm = T),
area_total = sum(area_total, na.rm = T))
View(water_use_per_feed_item)
water_use_per_feed_item <- land_required[["land_requirements_all"]] %>%
group_by(feed)%>%
summarise(area_feed = sum(area_feed, na.rm = T),
area_non_feed = sum(area_non_feed, na.rm = T),
area_total = sum(area_total, na.rm = T))%>% #reformating land required
left_join(feed_production, by = c("feed"="feed_item_name"))%>%
mutate(fraction_of_land_required = area_feed/sum(area_feed,na.rm = T),
kc_average = (kc_initial+kc_midseason+kc_late)/3,
kc_frac = fraction_of_land_required*kc_average,
ET = kc_frac*et,
water_use = ET*sum(area_feed),
feed_water_use = ifelse(is.nan(water_use*(1-(area_non_feed/area_total))),0,
(water_use*(1-(area_non_feed/area_total)))),
non_feed_water_use = water_use-feed_water_use,
kc_water_use_of_roughages = ifelse(grepl("OFR",feed),feed_water_use,0),
kc_water_use_of_concentrates = ifelse(grepl("OFC",feed),feed_water_use,0),
kc_water_use_ip_concentrates = ifelse(grepl("IP",feed),feed_water_use,0),
kc_water_use_on_farm = feed_water_use-kc_water_use_of_roughages-kc_water_use_ip_concentrates,
kc_water_use_m3_per_kg = ifelse(is.nan(feed_water_use/area_feed),0,(feed_water_use/area_feed)))
tier1 <- data.frame("initial_landuse" = "cropland") %>%
mutate(reporting_landuse = "cropland",
annual_area_cropland_perennial_woody_biomass=0,
annual_growth_rate_perenial_woody_biomass=2.6,
annual_carbon_stock_biomass_removed=2.5,
annual_change_carbon_stocks_biomass=annual_area_cropland_perennial_woody_biomass*sum(annual_growth_rate_perenial_woody_biomass+annual_carbon_stock_biomass_removed))
View(tier1)
tier1 <- data.frame("initial_landuse" = "cropland") %>%
mutate(reporting_landuse = "cropland",
annual_area_cropland_perennial_woody_biomass=0,
annual_growth_rate_perenial_woody_biomass=2.6,
annual_carbon_stock_biomass_removed=2.5,
annual_change_carbon_stocks_biomass=annual_area_cropland_perennial_woody_biomass*(annual_growth_rate_perenial_woody_biomass-annual_carbon_stock_biomass_removed))
# Land requirement for feed production per associated crop (ha)
land_requirement_per_feed <- land_required[["land_requirements_all"]] %>%
select(feed, area_feed) %>%
group_by(feed) %>%
summarise(area_feed = sum(area_feed))
View(land_requirement_per_feed)
View(land_required)
View(land_requirement_per_feed)
# add feed category
feed_production <- unnest(para[["feed_items"]], cols = c(feed_type_name))
feed_production <- na_if(feed_production, "NA") %>%
as.data.frame()
View(feed_production)
# add area_feed to feed_production sheet
feed_production$area_feed <- land_requirement_per_feed$area_feed[match(feed_production$feed_item_name,
land_requirement_per_feed$feed)]
feeds <- unique(feed_production$feed_item_name)
feeds
f = "Maize (Zea mays) - stover"
# selected feed from feed production
selected_feed_production <- feed_production %>%
dplyr::filter(feed_item_name == f)
View(selected_feed_production)
# selected feed from land requirements
selected_land_required <- land_required[["land_requirements_all"]] %>%
dplyr::filter(feed == f)
View(selected_land_required)
View(selected_land_required)
trees_non_feed_biomass[[f]] <- selected_feed_production %>%
select(feed_item_name, trees_ha_dbh25, increase_dbh25, trees_ha_dbh2550, increase_dbh2550, trees_ha_dbh50, increase_dbh50, time_horizon, average_dbh25, average_dbh2550, average_dbh50)
trees_non_feed_biomass <- list()
trees_non_feed_biomass[[f]] <- selected_feed_production %>%
select(feed_item_name, trees_ha_dbh25, increase_dbh25, trees_ha_dbh2550, increase_dbh2550, trees_ha_dbh50, increase_dbh50, time_horizon, average_dbh25, average_dbh2550, average_dbh50)
trees_non_feed_biomass[[f]]
selected_land_required$farm
View(selected_land_required)
co2_conversion_factor <- 44/12
co2_conversion_factor <- 44/12
soil_amount <- 1000000*(para[["soil_depth"]]/100)*para[["soil_bulk"]]
soil_amount <- 1000000*(para[["soil_depth"]]/100)*para[["soil_bulk"]]
field_soc <- soil_amount*para[["soil_c"]]*0.001
land_required <- land_required[["land_requirements_all"]] %>%
as.data.frame()
cropland_change_carbon_stocks_mineral_soils <- data.frame("initial_landuse" = "cropland")
View(cropland_change_carbon_stocks_mineral_soils)
land_required <- land_required[["land_requirements_all"]] %>%
as.data.frame()
View(land_required)
rm(list = ls())
library(cleaned)
library(jsonlite)
library(tidyverse)
para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
ghg_ipcc_data <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
energy_parameters <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
stock_change_para <- fromJSON(file.choose(),  flatten = TRUE, simplifyDataFrame = TRUE)
feed_basket_quality <- feed_quality(para)
energy_required <- energy_requirement(para,feed_basket_quality,energy_parameters)
land_required <- land_requirement(feed_basket_quality, energy_required, para)
soil_erosion <- soil_health(para, land_required)
water_required <- water_requirement(para, land_required)
nitrogen_balance <- n_balance(para, land_required, soil_erosion)
livestock_productivity <- land_productivity(para)
economics <- economics_payback(para, energy_required, livestock_productivity)
biomass <- biomass_calculation(para, land_required)
co2_conversion_factor <- 44/12
soil_amount <- 1000000*(para[["soil_depth"]]/100)*para[["soil_bulk"]]
field_soc <- soil_amount*para[["soil_c"]]*0.001
land_required <- land_required[["land_requirements_all"]] %>%
as.data.frame()
View(land_required)
cropland_change_carbon_stocks_mineral_soils <- data.frame("initial_landuse" = "cropland") %>%
mutate(reporting_landuse = "cropland",
area_last_year_inventory_period = sum(land_required$area_feed)-(sum(land_required$grasses)+sum(land_required$tree_legume)),
carbon_stock_last_year_inventory_period = ifelse(field_soc>0, field_soc, 30),
time_dependence_stock_change = 20,
stock_change_factor_land_use = unnest(stock_change_para[["cropland"]], cols = c(landuse)) %>%
unnest(cols = c(factor_variables)) %>%
select(paste0(para[["cropland_system"]])) %>%
as.numeric(),
stock_change_factor_management = unnest(stock_change_para[["cropland"]], cols = c(tillage)) %>%
unnest(cols = c(factor_variables)) %>%
select(paste0(para[["cropland_tillage"]])) %>%
as.numeric(),
stock_change_factor_input = unnest(stock_change_para[["cropland"]], cols = c(input)) %>%
unnest(cols = c(factor_variables)) %>%
select(paste0(para[["cropland_orgmatter"]])) %>%
as.numeric(),
annual_change_carbon_stocks_mineral_soils = ((carbon_stock_last_year_inventory_period*stock_change_factor_land_use*stock_change_factor_management*stock_change_factor_input)-carbon_stock_last_year_inventory_period)/time_dependence_stock_change*area_last_year_inventory_period)
View(cropland_change_carbon_stocks_mineral_soils)
unnest(stock_change_para[["cropland"]], cols = c(landuse))
stock_change_para[["cropland"]]
stock_change_factor_land_use = unnest(stock_change_para[["cropland"]], cols = c(landuse))
View(stock_change_para)
stock_change_factor_land_use = unnest(stock_change_para[["cropland"]], cols = c(landuse)) %>%
unnest(cols = c(factor_variables))
stock_change_factor_land_use = unnest(stock_change_para[["cropland"]], cols = c(landuse)) %>%
unnest(cols = c(factor_variables)) %>%
select(paste0(para[["cropland_system"]])) %>%
as.numeric()
View(stock_change_para)
stock_change_factor_land_use = unnest(stock_change_para[["cropland"]], cols = c(landuse)) %>%
unnest(cols = c(factor_variables))
View(stock_change_factor_land_use)
stock_change_factor_land_use = unnest(stock_change_para[["cropland"]], cols = c(landuse)) %>%
unnest(cols = c(factor_variables)) %>%
select(paste0(para[["cropland_system"]]))
View(stock_change_factor_land_use)
paste0(para[["cropland_system"]])
View(ghg_ipcc_data)
ghg_ipcc_data[["table_11.1_&_table_11.3"]]
